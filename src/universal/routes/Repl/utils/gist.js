const cache = {};

function request(method, url, data) {
	return new Promise((fulfil, reject) => {
		const xhr = new XMLHttpRequest();
		xhr.open(method, url);
		xhr.onload = () => {
			const response = JSON.parse(xhr.responseText);
			if (xhr.status >= 400) {
				reject(new Error(response.message));
			}
			fulfil(response);
		};
		xhr.onerror = reject;
		xhr.send(data);
	});
}

function get(url) {
	return request('GET', url);
}

function post(url, data) {
	return request('POST', url, data);
}

export function getComponentFromGist ( id ) {
	let cancelled = false;

	if ( !cache[ id ] ) {
		cache[ id ] = get(`https://api.github.com/gists/${id}`)
			.catch( () => get(`/gists/${id}`))
			.then( gist => {
				const components = [];

				const componentFiles = Object.keys( gist.files ).filter( file => /\.(html|js)$/.test( file ) );

				if ( componentFiles.length === 1 && componentFiles[0] === 'component.html' ) {
					// legacy
					components.push({
						name: 'App',
						type: 'html',
						entry: true,
						source: gist.files[ 'component.html' ].content
					});
				} else {
					componentFiles.forEach( file => {
						const ext = /\.(html|js)$/.exec(file)[0];
						const name = file.slice( 0, -ext.length );
						const type = ext.slice(1);

						const source = gist.files[ file ].content;

						components.push({ name, type, entry: name === 'App', source });
					});
				}

				const jsonFile = gist.files[ 'data.json' ];
				const json = jsonFile && jsonFile.content || '{}';

				return { components, json };
			})
			.catch( err => {
				cache[ id ] = null;
				throw err;
			});
	}

	const promise = cache[ id ].then( component => {
		if ( cancelled ) throw new Error( `Request was cancelled` );
		return component;
	});

	promise.cancel = () => {
		cancelled = true;
	};

	return promise;
}

export function saveComponentAsGist ( components, json ) {
	const files = {
		'README.md': {
			content: `# Svelte component\n\nThis gist was generated by the [Svelte REPL](https://svelte.technology/repl). Visit https://svelte.technology/repl?gist=this_gist_id to see it.`
		},

		'data.json': {
			content: json
		}
	};

	components.forEach( component => {
		files[ `${component.name}.${component.type}` ] = {
			content: component.source
		};
	});

	const body = JSON.stringify({
		description: 'Svelte component',
		public: true,
		files
	});

	return post(`/gists`, body)
		.catch(() => post(`https://api.github.com/gists`, body))
		.then(gist => gist.id);
}