{"title":"Line chart","data":{"myData":[{"year":1990,"birthrate":16.7},{"year":1995,"birthrate":14.6},{"year":2000,"birthrate":14.4},{"year":2005,"birthrate":14},{"year":2010,"birthrate":13},{"year":2015,"birthrate":12.4}]},"source":"<div class='chart'>\n\t<h2>US birthrate by year</h2>\n\n\t<svg ref:svg>\n\t\t<g transform='translate(0,0)'>\n\t\t\t<g class='axes'>\n\t\t\t\t<!-- y axis -->\n\t\t\t\t<g class='axis y-axis' transform='translate(0, {{ padding.top }} )'>\n\t\t\t\t\t{{#each yTicks as tick}}\n\t\t\t\t\t\t<g class='tick tick-{{ tick }}' transform='translate( 0, {{ yScale(tick) - padding.bottom }} )'>\n\t\t\t\t\t\t\t<line stroke='#000' x2='100%' y1='0' y2='0'></line>\n\t\t\t\t\t\t\t<text fill='#000' x='0' y='0' dy='-2'>{{ tick !== 0 ? tick : ''}} {{tick === 20 ? ' per 1,000 population' : ''}}</text>\n\t\t\t\t\t\t</g>\n\t\t\t\t\t{{/each}}\n\t\t\t\t</g>\n\n\t\t\t\t<!-- x axis -->\n\t\t\t\t<g class='axis x-axis'>\n\t\t\t\t\t{{#each xTicks as tick}}\n\t\t\t\t\t\t<g class='tick tick-{{ tick }}' transform='translate( {{ xScale(tick) }}, {{ height }} )'>\n\t\t\t\t\t\t\t<line stroke='#000' y1='-{{height}}' y2='-{{padding.bottom}}' x1='0' x2='0'></line>\n\n\t\t\t\t\t\t\t{{#if width > 380}}\n\t\t\t\t\t\t\t\t<text fill='#000' x='0' y='0' dy='-2'>{{ tick }}</text>\n\t\t\t\t\t\t\t{{else}}\n\t\t\t\t\t\t\t\t<text fill='#000' x='0' y='0' dy='-2'>{{ formatMobile(tick) }}</text>\n\t\t\t\t\t\t\t{{/if}}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t{{/each}}\n\t\t\t\t</g>\n\t\t\t</g>\n\n\t\t\t<!-- line -->\n\t\t\t<path class='path-line' d='{{ path }}'></path>\n\t\t</g>\n\t</svg>\n</div>\n\n<style>\n\t.chart {\n\t\twidth: 100%;\n\t\tmax-width: 500px;\n\t\tmargin: 0 auto;\n\t}\n\n\tsvg {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t.tick,\n\tp.source {\n\t\tfont-size: .725em;\n\t\tfont-weight: 200;\n\t}\n\n\t.tick line {\n\t\tstroke: #e2e2e2;\n\t\tstroke-dasharray: 2;\n\t}\n\n\t.tick text {\n\t\tfill: #ccc;\n\t\ttext-anchor: start;\n\t}\n\n\t.tick.tick-0 line {\n\t\tstroke-dasharray: 0;\n\t}\n\n\t.x-axis .tick text {\n\t\ttext-anchor: middle;\n\t}\n\n\t.path-line {\n\t\tfill: none;\n\t\tstroke: #a11;\n\t\tstroke-linejoin: round;\n\t\tstroke-linecap: round;\n\t\tstroke-width: 2;\n\t}\n</style>\n\n<script>\n\timport { scaleLinear } from 'd3-scale';\n\n\texport default {\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\tpadding: {\n\t\t\t\t\ttop: 20,\n\t\t\t\t\tright: 15,\n\t\t\t\t\tbottom: 20,\n\t\t\t\t\tleft: 25\n\t\t\t\t},\n\t\t\t\theight: 150,\n\t\t\t\twidth: 500,\n\t\t\t\tyTicks: [0, 5, 10, 15, 20 ],\n\t\t\t\txTicks: [1990, 1995, 2000, 2005, 2010, 2015],\n\t\t\t\tformatMobile ( tick ) {\n\t\t\t\t\treturn \"'\" + tick.toString().slice(-2);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tcomputed: {\n\t\t\tyScale: function ( padding, height, yTicks ) {\n\t\t\t\treturn scaleLinear()\n\t\t\t\t\t.domain([Math.min.apply(null, yTicks), Math.max.apply(null, yTicks)])\n\t\t\t\t\t.range([height - padding.bottom, padding.top]);\n\t\t\t},\n\t\t\txScale: function ( padding, width, xTicks ) {\n\t\t\t\treturn scaleLinear()\n\t\t\t\t\t.domain([Math.min.apply(null, xTicks), Math.max.apply(null, xTicks)])\n\t\t\t\t\t.range([padding.left, width - padding.right]);\n\t\t\t},\n\t\t\tpath ( myData, xScale, yScale ) {\n\n\t\t\t\tvar path = '';\n\n\t\t\t\t// make path\n\t\t\t\tmyData.forEach(function (datapoint, i) {\n\t\t\t\t\tvar year = datapoint.year;\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tpath = 'M' + xScale(year) + ' ' + yScale(datapoint.birthrate) + ' ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpath += 'L ' + xScale(year) + ' ' + yScale(datapoint.birthrate) + ' ';\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\treturn path;\n\t\t\t}\n\t\t},\n\t\toncreate () {\n\t\t\tthis.container = this.refs.svg;\n\n\t\t\tvar self = this;\n\t\t\twindow.addEventListener( 'resize', function () {\n\t\t\t\tself.resize();\n\t\t\t});\n\t\t\tthis.resize();\n\t\t},\n\t\tmethods: {\n\t\t\tresize () {\n\t\t\t\tthis.set({\n\t\t\t\t\twidth: this.container.getBoundingClientRect().width,\n\t\t\t\t\theight: this.container.getBoundingClientRect().height\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n</script>"}