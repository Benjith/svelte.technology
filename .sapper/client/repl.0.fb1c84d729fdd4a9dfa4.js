webpackJsonp([0],[
/* 0 */,
/* 1 */,
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_locate_character__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Layout_html__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CodeMirror_html__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Viewer_html__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ComponentSelector_html__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ExampleSelector_html__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_gist_js__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_debounce_js__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_load_js__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_get_js__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__store_js__ = __webpack_require__(23);
/* routes/repl/index.html generated by Svelte v1.49.0 */













function loadCodemirror() {
	return __webpack_require__.e/* import() */(6).then(__webpack_require__.bind(null, 101)).then(CodeMirror => {
		return (window.CodeMirror = CodeMirror);
	});
}

const versionMatch = typeof window !== 'undefined' && /version=([^&]+)/.exec(window.location.search);
let dataQuery;

function loadSvelte() {
	const version = versionMatch ? versionMatch[1] : 'latest';
	if (version === 'local') return __webpack_require__.e/* import() */(7).then(__webpack_require__.bind(null, 109));
	return __WEBPACK_IMPORTED_MODULE_9__utils_load_js__["a" /* script */](`https://unpkg.com/svelte@${version}/compiler/svelte.js`).then(() => window.svelte);
}

function tryParseData(encoded) {
	try {
		return JSON.parse(decodeURIComponent(atob(encoded)));
	} catch (err) {
		return {};
	}
}

function compile(component) {
	const warnings = [];

	if (component.type === 'js') return { code: component.source, map: null, warnings };

	const { code, map } = svelte.compile(component.source || '', {
		cascade: false,
		name: component.name,
		filename: component.name + '.html',
		onwarn: warning => {
			warnings.push(warning);
		}
	});

	return { code, map, warnings };
}

function runtimeErrorLoc(runtimeError, selectedComponent) {
	if (!runtimeError || !selectedComponent) return null;
	if (runtimeError.filename !== `${selectedComponent.name}.${selectedComponent.type}`) return;

	return runtimeError.loc;
};

function githubGist(gist) {
	return 'https://gist.github.com/anonymous/' + gist;
};

function data() {
	const search = typeof window !== 'undefined' ? window.location.search : '';
	const gistMatch = /gist=([^&]+)$/.exec(search);
	const dataMatch = /data=([^&]+)$/.exec(search);

	let gist = null;
	let components = [];
	let selectedExample = null;
	let data = {};

	if (dataMatch) {
		dataQuery = dataMatch[1]; // so we don't lose it from the URL later
		const parsed = tryParseData(dataMatch[1]);

		if (parsed.source && !parsed.components) {
			// legacy
			components = [
				{
					name: 'App',
					type: 'html',
					entry: true,
					source: parsed.source
				}
			];
		} else {
			components = parsed.components;
			components.forEach(component => {
				if (!component.type) component.type = 'html';
			});
		}

		data = parsed.data;
	}

	let selectedComponent = null;

	if (components && components.length > 0) {
		selectedComponent = components[0];
	} else if (gistMatch) {
		gist = gistMatch[1];
	}

	return {
		horizontalDividerPos: 50,
		verticalDividerPos: 50,
		showGenerated: false,

		// TODO remove this post-https://github.com/sveltejs/svelte/issues/424
		false: false,
		true: true,
		null: null,

		selectedExample: null,
		selectedComponent,

		gist,
		components,
		data,
		json: JSON.stringify(data, null, '  '),

		loadedCodemirror: false,
		editorRotation: 0,
		flip: ''
	};
};

function drag(node, callback) {
	const mousedown = event => {
		if (event.which !== 1) return;

		event.preventDefault();

		this.set({ dragging: true });

		const onmouseup = () => {
			this.set({ dragging: false });

			window.removeEventListener('mousemove', callback, false);
			window.removeEventListener('mouseup', onmouseup, false);
		};

		window.addEventListener('mousemove', callback, false);
		window.addEventListener('mouseup', onmouseup, false);
	}

	node.addEventListener('mousedown', mousedown, false);

	return {
		teardown() {
			node.removeEventListener('mousedown', onmousedown, false);
		}
	};
};

var methods = {
	createComponent() {
		const components = this.get('components');

		const newComponent = {
			name: this.uid++ ? `Component${this.uid}` : 'Component1',
			type: 'html',
			source: '',
			edit: true
		};

		components.push(newComponent);

		this.set({
			components,

			// for some reason we need to unset selectedComponent before
			// resetting it, otherwise the editor remains bound to the
			// previous component. TODO look into this bug
			selectedComponent: null
		});

		this.set({
			selectedComponent: newComponent
		});
		document.getElementById(newComponent.name).scrollIntoView(false);
		this.refs.selector.focusLast();
	},

	removeComponent(component) {
		const components = this.get('components');

		let selectedComponent;

		if (component.entry) {
			// App.html can't be removed
			component.source = '';
			selectedComponent = component;
		} else {
			const index = components.indexOf(component);
			if (~index) {
				components.splice(index, 1);
			} else {
				console.error(`Could not find component! That's... odd`);
			}

			selectedComponent = components[index] || components[components.length - 1];
		}

		this.set({
			components,
			selectedComponent
		});
	},

	flip() {
		if (window.innerWidth < 768) {
			this.flipMobile();
			return;
		}

		if (this.flipping) return;
		this.flipping = true;

		const wrapper = this.refs.editorWrapper;
		const showGenerated = this.get('showGenerated');

		const handleFlipOutEnd = () => {
			wrapper.removeEventListener('animationend', handleFlipOutEnd);
			wrapper.removeEventListener('webkitAnimationEnd', handleFlipOutEnd);

			this.set({
				showGenerated: !showGenerated,
				flip: 'flip-pause'
			});

			const handleFlipInEnd = () => {
				wrapper.removeEventListener('animationend', handleFlipInEnd);
				wrapper.removeEventListener('webkitAnimationEnd', handleFlipInEnd);

				this.flipping = false;

				this.set({ flip: '' });
			}

			wrapper.addEventListener('animationend', handleFlipInEnd);
			wrapper.addEventListener('webkitAnimationEnd', handleFlipInEnd);

			setTimeout(() => {
				this.set({ flip: 'flip-in' });
			});
		}

		wrapper.addEventListener('animationend', handleFlipOutEnd);
		wrapper.addEventListener('webkitAnimationEnd', handleFlipOutEnd);

		this.set({ flip: 'flip-out' });
	},

	flipMobile() {
		const bcr1 = this.refs.editorWrapper.getBoundingClientRect();
		this.set({
			showGenerated: !this.get('showGenerated')
		});

		// if top is visible, keep it that way
		if (bcr1.top > 0) return;

		const bcr2 = this.refs.editorWrapper.getBoundingClientRect();
		const d = bcr2.bottom - bcr1.bottom;
		window.scrollTo(0, window.scrollY + d);
	},

	setHorizontal(event) {
		const { top, bottom } = this.refs.right.getBoundingClientRect();

		this.set({
			horizontalDividerPos: 100 * (event.clientY - top) / (bottom - top)
		});

		this.refs.data.resize();
	},

	setVertical(event) {
		this.set({
			verticalDividerPos: 100 * event.clientX / window.innerWidth
		});

		this.refs.editor.resize();
		this.refs.data.resize();
	},

	updateData({ key, value }) {
		const data = JSON.parse(this.get('json'));
		data[key] = value;
		this.set({ json: JSON.stringify(data, null, '  ') });
	},

	save() {
		this.set({ saving: true });

		Object(__WEBPACK_IMPORTED_MODULE_7__utils_gist_js__["b" /* saveComponentAsGist */])(this.get('components'), this.get('json')).then(id => {
			this.set({
				saving: false,
				gist: id,
				selectedExample: null
			});
			this.updateUrl();
		});
	},

	updateBundle() {
		// TODO do this in a worker
		const components = this.get('components');

		if (!components || !components.length) return;
		if (components.some(c => !c.compiled)) return;

		console.clear();
		console.log(`running Svelte compiler version %c${svelte.VERSION}`, 'font-weight: bold');

		if (this.bundlePromise) this.bundlePromise.cancel();

		const lookup = {};
		let warningCount = 0;
		for (let i = 0; i < components.length; i += 1) {
			const component = components[i];
			const w = component.compiled.warnings.length;
			warningCount += w;

			if (w > 0) {
				console.group(`${component.name}.${component.type}: ${w} ${w === 1 ? 'warning' : 'warnings'}`);
				component.compiled.warnings.forEach(warning => {
					console.warn(warning.message);
					console.log(warning.frame);
				});
				console.groupEnd();
			}

			const path = `./${component.name}.${component.type}`;

			if (path in lookup) {
				this.set({
					bundleError: new Error(`Multiple ${component.name}.${component.type} components`)
				});
				return;
			}

			lookup[path] = {
				code: component.compiled.code,
				map: component.compiled.map
			};
		}

		this.set({ warningCount });

		let cancelled = false;

		let uid = 1;
		const importMap = new Map();
		const input = './App.html';

		this.bundlePromise = rollup.rollup({
			input,
			external: id => {
				return id[0] !== '.';
			},
			plugins: [{
				resolveId(importee, importer) {
					if (importee[0] === '.') return importee;
				},
				load(id) {
					if (id in lookup) return lookup[id];
					if (id[0] === '.') {
						throw new Error(`file does not exist`);
					}

					return null;
				}
			}],
			onwarn(warning) {
				if (warning.code === 'MISSING_GLOBAL_NAME') return;
				console.warn(warning.message);
			}
		}).then(bundle => {
			if (cancelled) return;

			return bundle.generate({
				format: 'iife',
				name: 'SvelteComponent',
				globals: id => {
					const name = `import_${uid++}`;
					importMap.set(id, name);
					return name;
				},
				sourcemap: true
			}).then(({ code, map }) => {
				this.set({
					bundle: {
						code,
						map,
						imports: bundle.imports,
						importMap
					},
					bundleError: null,
					runtimeError: null
				});
			});
		}).catch(err => {
			console.error(err.stack);
			this.set({
				bundleError: err
			});
		});

		this.bundlePromise.cancel = () => {
			cancelled = true;
		};
	},

	updateUrl() {
		if (typeof history === 'undefined') return;

		const gist = this.get('gist');
		const selectedExample = this.get('selectedExample');

		const params = {};
		if (typeof svelte !== 'undefined') {
			params.version = versionMatch && versionMatch[1] === 'local' ? 'local' : svelte.VERSION;
		} else if (versionMatch) {
			params.version = versionMatch[1];
		}

		if (gist) {
			params.gist = gist;
		} else if (selectedExample) {
			params.example = selectedExample.id;
		} else if (dataQuery) {
			params.data = dataQuery;
		}

		const queryString = Object.keys(params).map(key => `${key}=${params[key]}`).join('&');
		const url = queryString ? `/repl?${queryString}` : '/repl';

		history.replaceState({}, 'x', url);
	},

	navigate(filename) {
		const name = filename.replace(/\.html$/, '');
		const { components, selectedComponent } = this.get();

		if (selectedComponent.name === name) return;

		this.set({
			selectedComponent: components.find(c => c.name === name)
		});
	},

	download() {
		this.set({
			downloading: true
		});

		Promise.all([
			__webpack_require__.e/* import() */(5).then(__webpack_require__.bind(null, 110)),
			__webpack_require__.e/* import() */(9).then(__webpack_require__.bind(null, 160))
		]).then(([JSZip, saveAs]) => {
			const zip = new JSZip();

			Object(__WEBPACK_IMPORTED_MODULE_10__utils_get_js__["a" /* get */])('/svelte-app.zip', { responseType: 'arraybuffer' })
				.then(JSZip.loadAsync)
				.then(zip => {
					const { bundle, components, data } = this.get();

					// remove any dotfiles that snuck in
					Object.keys(zip.files).forEach(key => {
						const file = key.split('/').pop();
						if (file[0] === '.') zip.remove(key);
					});

					// add component files
					components.forEach(component => {
						zip.file(`src/${component.name}.${component.type}`, component.source);
					});

					// add entry point
					zip.file(`src/main.js`, `import App from './App.html';

var app = new App({
	target: document.body,
	data: ${JSON.stringify(data, null, '\t').replace(/\n/g, '\n\t')}
});

export default app;` );

					const go = () => {
						zip.generateAsync({ type: 'blob' })
							.then(blob => {
								this.set({
									downloading: false
								});
								saveAs(blob, 'svelte-app.zip');
							});
					};

					if (bundle.imports.length > 0) {
						zip.file('package.json')
							.async('string')
							.then(JSON.parse)
							.then(pkg => {
								const deps = {};
								bundle.imports.forEach(mod => {
									const match = /^[^@\/]+/.exec(mod);
									deps[match[0]] = 'latest';
								});
								pkg.dependencies = deps;

								zip.file('package.json', JSON.stringify(pkg, null, '  '));
							})
							.then(go);
					} else {
						go();
					}
				});
		});
	},

	findExample(id) {
		const { example_contents } = this.get();

		id = decodeURIComponent(id);

		for (let i = 0; i < example_contents.length; i += 1) {
			const group = example_contents[i];
			for (let j = 0; j < group.examples.length; j += 1) {
				const example = group.examples[j];
				if (example.id === id) return example;
			}
		}
	}
};

function oncreate() {
	this.uid = 0;
	this.flipping = false;
	this.bundlePromise = null;

	loadCodemirror().then(() => {
		this.set({ loadedCodemirror: true });
	});

	let exampleComponents;
	let lastSelectedExample;

	const { gist, components } = this.get();
	if (!gist && components.length === 0) {
		const exampleMatch = /example=([^&]+)$/.exec(window.location.search);
		const selectedExample = this.findExample(exampleMatch ? exampleMatch[1] : 'hello-world');
		this.set({ selectedExample });
	}

	this.observe('selectedExample', example => {
		if (!example) return;
		const id = example.id;

		lastSelectedExample = id;
		fetch(`/api/examples/${id}`).then(r => r.json()).then(example => {
			exampleComponents = stringifyComponents(example.components);

			if (window.svelte) {
				example.components.forEach(component => {
					component.compiled = compile(component);
				});
			}

			this.set({
				components: example.components,
				selectedComponent: example.components[0],
				json: JSON.stringify(example.data, null, '  ')
			});

			this.updateBundle();
		});

		this.set({ gist: null });
		this.updateUrl();
	});

	if (!this.get('gist')) {
		this.set({ json: JSON.stringify(this.get('data'), null, '  ') });
	}

	this.observe('gist', gist => {
		if (!gist) return;

		if (this.promise) this.promise.cancel();
		this.promise = Object(__WEBPACK_IMPORTED_MODULE_7__utils_gist_js__["a" /* getComponentFromGist */])(gist);

		this.promise
			.then(({ components, json }) => {
				if (window.svelte) {
					components.forEach(component => {
						try {
							component.compiled = compile(component);
						} catch (err) {
							console.error(err.stack);

							this.set({
								sourceError: err,
								sourceErrorLoc: err.loc
							});
						}
					});
				}

				this.set({ components, json, selectedComponent: components[0] });
			})
			.catch(err => {
				alert('Error loading from gist.github.com – please try again later!');
				console.error(err.stack);
			});

		this.set({ selectedExample: null });
		this.updateUrl();
	});

	loadSvelte().then(svelte => {
		window.svelte = svelte;

		this.set({ loadedSvelte: true });

		this.get('components').forEach(component => {
			try {
				component.compiled = compile(component);
			} catch (err) {
				console.error(err.stack);

				this.set({
					sourceError: err,
					sourceErrorLoc: err.loc
				});
			}
		});

		this.observe('selectedComponent', (selectedComponent, previousComponent) => {
			if (!selectedComponent) return;
			if (previousComponent && selectedComponent !== previousComponent) return;

			// if component has been edited, unset selectedExample
			if (stringifyComponents(this.get('components')) !== exampleComponents) {
				this.set({ selectedExample: null });
			}

			try {
				selectedComponent.compiled = compile(selectedComponent);
				this.set({ selectedComponent, sourceError: null, sourceErrorLoc: null });

				if (this.get('loadedRollup')) {
					this.updateBundle();
				}
			} catch (err) {
				console.error(err.stack);

				this.set({
					sourceError: err,
					sourceErrorLoc: err.loc
				});
			}
		});

		this.updateUrl();
	});

	__webpack_require__.e/* import() */(8).then(__webpack_require__.bind(null, 163)).then(rollup => {
		this.set({ loadedRollup: true });
		window.rollup = rollup;

		this.updateBundle();
	});

	this.observe('json', json => {
		try {
			this.set({
				data: JSON.parse(json),
				dataError: null,
				dataErrorLoc: null
			});
		} catch (err) {
			console.error(err.stack);

			const match = /in JSON at position (\d+)/.exec(err.message);

			if (match) {
				const loc = Object(__WEBPACK_IMPORTED_MODULE_1_locate_character__["a" /* locate */])(json, +match[1], { offsetLine: 1 });
				this.set({
					dataError: {
						message: err.message.slice(0, match.index).trim(),
						loc
					},
					dataErrorLoc: loc
				});
			}
		}
	});
};

function preload() {
	return fetch(`/api/examples`).then(r => r.json()).then(example_contents => {
		return { example_contents };
	});
};

function store_1() {
	return __WEBPACK_IMPORTED_MODULE_11__store_js__["a" /* default */];
}

function stringifyComponents(components) {
	return JSON.stringify(
		components.map(component => {
			return {
				name: component.name,
				source: component.source
			};
		})
	);
}

function encapsulateStyles(node) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(node, "svelte-1505907988", "");
}

function create_main_fragment(state, component_1) {
	var title, text, text_2, text_3, div, div_1, section, div_2, exampleselector_updating = {}, text_4, div_3, button, text_5_value = state.downloading ? 'zipping' : 'download', text_5, button_class_value, text_6, button_1, text_7_value = state.saving ? 'saving' : 'save', text_7, button_1_class_value, text_8, text_11, div_4, text_13, text_16, div_5, h2, text_17, text_18, div_6, text_20, h2_1, text_21, text_22, div_7, text_23, text_25, div_8, drag_handler, text_27, div_9, drag_handler_1, text_29;

	var exampleselector_initial_data = { example_contents: state.example_contents };
	if ('selectedExample' in state) {
		exampleselector_initial_data.selectedExample = state.selectedExample;
		exampleselector_updating.selectedExample = true;
	}
	var exampleselector = new __WEBPACK_IMPORTED_MODULE_6__ExampleSelector_html__["a" /* default */]({
		root: component_1.root,
		data: exampleselector_initial_data,
		_bind: function(changed, childState) {
			var state = component_1.get(), newState = {};
			if (!exampleselector_updating.selectedExample && changed.selectedExample) {
				newState.selectedExample = childState.selectedExample;
			}
			exampleselector_updating = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, changed);
			component_1._set(newState);
			exampleselector_updating = {};
		}
	});

	component_1.root._beforecreate.push(function() {
		var state = component_1.get(), childState = exampleselector.get(), newState = {};
		if (!childState) return;
		if (!exampleselector_updating.selectedExample) {
			newState.selectedExample = childState.selectedExample;
		}
		exampleselector_updating = { selectedExample: true };
		component_1._set(newState);
		exampleselector_updating = {};
	});

	var exampleselector_context = {
		state: state
	};

	function click_handler(event) {
		component_1.download();
	}

	function click_handler_1(event) {
		component_1.save();
	}

	var if_block = (state.gist) && create_if_block(state, component_1);

	var if_block_1 = (state.selectedComponent) && create_if_block_1(state, component_1);

	var current_block_type = select_block_type_1(state);
	var if_block_2 = current_block_type(state, component_1);

	var current_block_type_1 = select_block_type_2(state);
	var if_block_3 = current_block_type_1(state, component_1);

	var current_block_type_2 = select_block_type_3(state);
	var if_block_4 = current_block_type_2(state, component_1);

	var if_block_5 = (state.dragging) && create_if_block_12(state, component_1);

	var layout = new __WEBPACK_IMPORTED_MODULE_2__components_Layout_html__["a" /* default */]({
		root: component_1.root,
		slots: { default: Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["k" /* createFragment */])() },
		data: { page: "repl" }
	});

	return {
		c: function create() {
			title = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("title");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Svelte REPL");
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\t");
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			section = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("section");
			div_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			exampleselector._fragment.c();
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t\t\t");
			div_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			button = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("button");
			text_5 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_5_value);
			text_6 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\t\t\t\t\t\t");
			button_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("button");
			text_7 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_7_value);
			text_8 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t\t\t\t");
			if (if_block) if_block.c();
			text_11 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t\t");
			div_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			if (if_block_1) if_block_1.c();
			text_13 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t\t");
			if_block_2.c();
			text_16 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t");
			div_5 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			h2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("h2");
			text_17 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("data.json");
			text_18 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\t\t\t");
			div_6 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			if_block_3.c();
			text_20 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t");
			h2_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("h2");
			text_21 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Rendered component");
			text_22 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\t\t\t");
			div_7 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			if_block_4.c();
			text_23 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t\t");
			if (if_block_5) if_block_5.c();
			text_25 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t");
			div_8 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			text_27 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t");
			div_9 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			text_29 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n");
			layout._fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			title = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("title");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Svelte REPL");
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n\n");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n\t");

			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "DIV", { class: true, style: true }, false);
			var div_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_1);

			section = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_1_nodes, "SECTION", { class: true }, false);
			var section_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(section);

			div_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(section_nodes, "DIV", { class: true }, false);
			var div_2_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_2);

			exampleselector._fragment.l(div_2_nodes);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_2_nodes, "\n\n\t\t\t\t\t");

			div_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_2_nodes, "DIV", { style: true }, false);
			var div_3_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_3);

			button = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_3_nodes, "BUTTON", { style: true, disabled: true, class: true }, false);
			var button_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(button);

			text_5 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(button_nodes, text_5_value);
			button_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_6 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_3_nodes, "\n\t\t\t\t\t\t");

			button_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_3_nodes, "BUTTON", { disabled: true, class: true }, false);
			var button_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(button_1);

			text_7 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(button_1_nodes, text_7_value);
			button_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_8 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_3_nodes, "\n\n\t\t\t\t\t\t");
			if (if_block) if_block.l(div_3_nodes);
			div_3_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_2_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_11 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(section_nodes, "\n\n\t\t\t\t");

			div_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(section_nodes, "DIV", { class: true }, false);
			var div_4_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_4);

			if (if_block_1) if_block_1.l(div_4_nodes);
			div_4_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_13 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(section_nodes, "\n\n\t\t\t\t");
			if_block_2.l(section_nodes);
			section_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_16 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, "\n\n\t\t");

			div_5 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "DIV", { class: true, style: true }, false);
			var div_5_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_5);

			h2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_5_nodes, "H2", { class: true }, false);
			var h2_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(h2);

			text_17 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(h2_nodes, "data.json");
			h2_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_18 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_5_nodes, "\n\t\t\t");

			div_6 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_5_nodes, "DIV", { class: true, style: true }, false);
			var div_6_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_6);

			if_block_3.l(div_6_nodes);
			div_6_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_20 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_5_nodes, "\n\n\t\t\t");

			h2_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_5_nodes, "H2", { class: true }, false);
			var h2_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(h2_1);

			text_21 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(h2_1_nodes, "Rendered component");
			h2_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_22 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_5_nodes, "\n\t\t\t");

			div_7 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_5_nodes, "DIV", { class: true, style: true }, false);
			var div_7_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_7);

			if_block_4.l(div_7_nodes);
			text_23 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_7_nodes, "\n\n\t\t\t\t");
			if (if_block_5) if_block_5.l(div_7_nodes);
			div_7_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_25 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_5_nodes, "\n\n\t\t\t");

			div_8 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_5_nodes, "DIV", { class: true, style: true }, false);
			var div_8_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_8);

			div_8_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_5_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_27 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, "\n\n\t\t");

			div_9 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "DIV", { class: true, style: true }, false);
			var div_9_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_9);

			div_9_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_29 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n");
			layout._fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			encapsulateStyles(div_1);
			encapsulateStyles(section);
			encapsulateStyles(div_2);
			encapsulateStyles(button);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(button, "width", "6em");
			button.disabled = state.downloading;
			button.className = button_class_value = "btn " + (state.downloading ? "active" : "");
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(button, "click", click_handler);
			encapsulateStyles(button_1);
			button_1.disabled = state.saving;
			button_1.className = button_1_class_value = "btn " + (state.saving ? "active" : "");
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(button_1, "click", click_handler_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_3, "position", "absolute");
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_3, "right", "0.5em");
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_3, "z-index", "2");
			div_2.className = "app-controls";
			encapsulateStyles(div_4);
			div_4.className = "module-controls";
			section.className = "input";
			div_1.className = "left";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_1, "width", "" + state.verticalDividerPos + "%");
			encapsulateStyles(div_5);
			encapsulateStyles(h2);
			h2.className = "show-if-mobile";
			encapsulateStyles(div_6);
			div_6.className = "bottom";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_6, "height", "" + ( 100 - state.horizontalDividerPos ) + "%");
			encapsulateStyles(h2_1);
			h2_1.className = "show-if-mobile";
			encapsulateStyles(div_7);
			div_7.className = "top";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_7, "height", "" + state.horizontalDividerPos + "%");
			encapsulateStyles(div_8);
			div_8.className = "divider horizontal-divider";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_8, "top", "calc(" + state.horizontalDividerPos + "% - 8px)");

			drag_handler = drag.call(component_1, div_8, function(event) {
				component_1.setHorizontal(event);
			});

			div_5.className = "right";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_5, "width", "" + ( 100 - state.verticalDividerPos ) + "%");
			encapsulateStyles(div_9);
			div_9.className = "divider vertical-divider";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_9, "left", "calc(" + state.verticalDividerPos + "% - 8px)");

			drag_handler_1 = drag.call(component_1, div_9, function(event) {
				component_1.setVertical(event);
			});

			div.className = "repl-container";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(title, document.head);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, title);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(text_2, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_3, layout._slotted.default);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div, layout._slotted.default);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_1, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(section, div_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_2, section);
			exampleselector._mount(div_2, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_4, div_2);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_3, div_2);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(button, div_3);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_5, button);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_6, div_3);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(button_1, div_3);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_7, button_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_8, div_3);
			if (if_block) if_block.m(div_3, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_11, section);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_4, section);
			if (if_block_1) if_block_1.m(div_4, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_13, section);
			if_block_2.m(section, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_16, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_5, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(h2, div_5);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_17, h2);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_18, div_5);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_6, div_5);
			if_block_3.m(div_6, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_20, div_5);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(h2_1, div_5);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_21, h2_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_22, div_5);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_7, div_5);
			if_block_4.m(div_7, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_23, div_7);
			if (if_block_5) if_block_5.m(div_7, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_25, div_5);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_8, div_5);
			component_1.refs.right = div_5;
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_27, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_9, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_29, layout._slotted.default);
			layout._mount(target, anchor);
		},

		p: function update(changed, state) {
			var exampleselector_changes = {};
			if (changed.example_contents) exampleselector_changes.example_contents = state.example_contents;
			if (!exampleselector_updating.selectedExample && changed.selectedExample) {
				exampleselector_changes.selectedExample = state.selectedExample;
				exampleselector_updating.selectedExample = true;
			}
			exampleselector._set(exampleselector_changes);
			exampleselector_updating = {};

			exampleselector_context.state = state;

			if ((changed.downloading) && text_5_value !== (text_5_value = state.downloading ? 'zipping' : 'download')) {
				text_5.data = text_5_value;
			}

			if (changed.downloading) {
				button.disabled = state.downloading;
			}

			if ((changed.downloading) && button_class_value !== (button_class_value = "btn " + (state.downloading ? "active" : ""))) {
				button.className = button_class_value;
			}

			if ((changed.saving) && text_7_value !== (text_7_value = state.saving ? 'saving' : 'save')) {
				text_7.data = text_7_value;
			}

			if (changed.saving) {
				button_1.disabled = state.saving;
			}

			if ((changed.saving) && button_1_class_value !== (button_1_class_value = "btn " + (state.saving ? "active" : ""))) {
				button_1.className = button_1_class_value;
			}

			if (state.gist) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block(state, component_1);
					if_block.c();
					if_block.m(div_3, null);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}

			if (state.selectedComponent) {
				if (if_block_1) {
					if_block_1.p(changed, state);
				} else {
					if_block_1 = create_if_block_1(state, component_1);
					if_block_1.c();
					if_block_1.m(div_4, null);
				}
			} else if (if_block_1) {
				if_block_1.u();
				if_block_1.d();
				if_block_1 = null;
			}

			if (current_block_type === (current_block_type = select_block_type_1(state)) && if_block_2) {
				if_block_2.p(changed, state);
			} else {
				if_block_2.u();
				if_block_2.d();
				if_block_2 = current_block_type(state, component_1);
				if_block_2.c();
				if_block_2.m(section, null);
			}

			if (changed.verticalDividerPos) {
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_1, "width", "" + state.verticalDividerPos + "%");
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_2(state)) && if_block_3) {
				if_block_3.p(changed, state);
			} else {
				if_block_3.u();
				if_block_3.d();
				if_block_3 = current_block_type_1(state, component_1);
				if_block_3.c();
				if_block_3.m(div_6, null);
			}

			if (changed.horizontalDividerPos) {
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_6, "height", "" + ( 100 - state.horizontalDividerPos ) + "%");
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_3(state)) && if_block_4) {
				if_block_4.p(changed, state);
			} else {
				if_block_4.u();
				if_block_4.d();
				if_block_4 = current_block_type_2(state, component_1);
				if_block_4.c();
				if_block_4.m(div_7, text_23);
			}

			if (state.dragging) {
				if (!if_block_5) {
					if_block_5 = create_if_block_12(state, component_1);
					if_block_5.c();
					if_block_5.m(div_7, null);
				}
			} else if (if_block_5) {
				if_block_5.u();
				if_block_5.d();
				if_block_5 = null;
			}

			if (changed.horizontalDividerPos) {
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_7, "height", "" + state.horizontalDividerPos + "%");
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_8, "top", "calc(" + state.horizontalDividerPos + "% - 8px)");
			}

			if (changed.verticalDividerPos) {
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_5, "width", "" + ( 100 - state.verticalDividerPos ) + "%");
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["D" /* setStyle */])(div_9, "left", "calc(" + state.verticalDividerPos + "% - 8px)");
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(title);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(text_2);
			if (if_block) if_block.u();
			if (if_block_1) if_block_1.u();
			if_block_2.u();
			if_block_3.u();
			if_block_4.u();
			if (if_block_5) if_block_5.u();
			layout._unmount();
		},

		d: function destroy() {
			exampleselector.destroy(false);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(button, "click", click_handler);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(button_1, "click", click_handler_1);
			if (if_block) if_block.d();
			if (if_block_1) if_block_1.d();
			if_block_2.d();
			if_block_3.d();
			if_block_4.d();
			if (if_block_5) if_block_5.d();
			drag_handler.teardown();
			if (component_1.refs.right === div_5) component_1.refs.right = null;
			drag_handler_1.teardown();
			layout.destroy(false);
		}
	};
}

// (16:6) {{#if gist}}
function create_if_block(state, component_1) {
	var a, text;

	return {
		c: function create() {
			a = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("gist");
			this.h();
		},

		l: function claim(nodes) {
			a = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "A", { class: true, href: true, title: true, target: true }, false);
			var a_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_nodes, "gist");
			a_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(a);
			a.className = "gist-link";
			a.href = state.githubGist;
			a.title = "Link to saved gist";
			a.target = "_blank";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(a, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, a);
		},

		p: function update(changed, state) {
			if (changed.githubGist) {
				a.href = state.githubGist;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(a);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

// (23:5) {{#if selectedComponent}}
function create_if_block_1(state, component_1) {
	var componentselector_updating = {};

	var componentselector_initial_data = { components: state.components };
	if ('selectedComponent' in state) {
		componentselector_initial_data.selectedComponent = state.selectedComponent
							;
		componentselector_updating.selectedComponent = true;
	}
	var componentselector = new __WEBPACK_IMPORTED_MODULE_5__ComponentSelector_html__["a" /* default */]({
		root: component_1.root,
		data: componentselector_initial_data,
		_bind: function(changed, childState) {
			var state = component_1.get(), newState = {};
			if (!componentselector_updating.selectedComponent && changed.selectedComponent) {
				newState.selectedComponent = childState.selectedComponent;
			}
			componentselector_updating = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, changed);
			component_1._set(newState);
			componentselector_updating = {};
		}
	});

	component_1.root._beforecreate.push(function() {
		var state = component_1.get(), childState = componentselector.get(), newState = {};
		if (!childState) return;
		if (!componentselector_updating.selectedComponent) {
			newState.selectedComponent = childState.selectedComponent;
		}
		componentselector_updating = { selectedComponent: true };
		component_1._set(newState);
		componentselector_updating = {};
	});

	componentselector.on("create", function(event) {
		component_1.createComponent();
	});
	componentselector.on("remove", function(event) {
		var state = componentselector_context.state;

		component_1.removeComponent(state.selectedComponent);
	});

	component_1.refs.selector = componentselector;

	var componentselector_context = {
		state: state
	};

	return {
		c: function create() {
			componentselector._fragment.c();
		},

		l: function claim(nodes) {
			componentselector._fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			componentselector._mount(target, anchor);
		},

		p: function update(changed, state) {
			var componentselector_changes = {};
			if (changed.components) componentselector_changes.components = state.components;
			if (!componentselector_updating.selectedComponent && changed.selectedComponent) {
				componentselector_changes.selectedComponent = state.selectedComponent
							;
				componentselector_updating.selectedComponent = true;
			}
			componentselector._set(componentselector_changes);
			componentselector_updating = {};

			componentselector_context.state = state;
		},

		u: function unmount() {
			componentselector._unmount();
		},

		d: function destroy() {
			componentselector.destroy(false);
			if (component_1.refs.selector === componentselector) component_1.refs.selector = null;
		}
	};
}

// (37:7) {{#if showGenerated && selectedComponent.compiled}}
function create_if_block_4(state, component_1) {

	var codemirror = new __WEBPACK_IMPORTED_MODULE_3__CodeMirror_html__["a" /* default */]({
		root: component_1.root,
		data: {
			mode: "javascript",
			code: state.selectedComponent.compiled.code,
			readonly: true
		}
	});

	component_1.refs.editor = codemirror;

	return {
		c: function create() {
			codemirror._fragment.c();
		},

		l: function claim(nodes) {
			codemirror._fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			codemirror._mount(target, anchor);
		},

		p: function update(changed, state) {
			var codemirror_changes = {};
			if (changed.selectedComponent) codemirror_changes.code = state.selectedComponent.compiled.code;
			codemirror._set(codemirror_changes);
		},

		u: function unmount() {
			codemirror._unmount();
		},

		d: function destroy() {
			codemirror.destroy(false);
			if (component_1.refs.editor === codemirror) component_1.refs.editor = null;
		}
	};
}

// (39:7) {{else}}
function create_if_block_5(state, component_1) {
	var codemirror_updating = {};

	var codemirror_initial_data = {
		mode: state.selectedComponent.type === "js" ? "javascript" : "handlebars",
		error: state.sourceError,
		errorLoc: state.sourceErrorLoc || state.runtimeErrorLoc,
		warningCount: state.warningCount
	};
	if ('source' in state.selectedComponent) {
		codemirror_initial_data.code = state.selectedComponent.source;
		codemirror_updating.code = true;
	}
	var codemirror = new __WEBPACK_IMPORTED_MODULE_3__CodeMirror_html__["a" /* default */]({
		root: component_1.root,
		data: codemirror_initial_data,
		_bind: function(changed, childState) {
			var state = component_1.get(), newState = {};
			if (!codemirror_updating.code && changed.code) {
				state.selectedComponent.source = childState.code;
				newState.selectedComponent = state.selectedComponent;
			}
			codemirror_updating = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, changed);
			component_1._set(newState);
			codemirror_updating = {};
		}
	});

	component_1.root._beforecreate.push(function() {
		var state = component_1.get(), childState = codemirror.get(), newState = {};
		if (!childState) return;
		if (!codemirror_updating.code) {
			state.selectedComponent.source = childState.code;
			newState.selectedComponent = state.selectedComponent;
		}
		codemirror_updating = { code: true };
		component_1._set(newState);
		codemirror_updating = {};
	});

	codemirror.on("navigate", function(event) {
		component_1.navigate(event);
	});

	component_1.refs.editor = codemirror;

	var codemirror_context = {
		state: state
	};

	return {
		c: function create() {
			codemirror._fragment.c();
		},

		l: function claim(nodes) {
			codemirror._fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			codemirror._mount(target, anchor);
		},

		p: function update(changed, state) {
			var codemirror_changes = {};
			if (changed.selectedComponent) codemirror_changes.mode = state.selectedComponent.type === "js" ? "javascript" : "handlebars";
			if (changed.sourceError) codemirror_changes.error = state.sourceError;
			if (changed.sourceErrorLoc || changed.runtimeErrorLoc) codemirror_changes.errorLoc = state.sourceErrorLoc || state.runtimeErrorLoc;
			if (changed.warningCount) codemirror_changes.warningCount = state.warningCount;
			if (!codemirror_updating.code && changed.selectedComponent) {
				codemirror_changes.code = state.selectedComponent.source;
				codemirror_updating.code = true;
			}
			codemirror._set(codemirror_changes);
			codemirror_updating = {};

			codemirror_context.state = state;
		},

		u: function unmount() {
			codemirror._unmount();
		},

		d: function destroy() {
			codemirror.destroy(false);
			if (component_1.refs.editor === codemirror) component_1.refs.editor = null;
		}
	};
}

// (36:6) {{#if selectedComponent}}
function create_if_block_3(state, component_1) {
	var if_block_anchor;

	var current_block_type = select_block_type(state);
	var if_block = current_block_type(state, component_1);

	return {
		c: function create() {
			if_block.c();
			if_block_anchor = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["i" /* createComment */])();
		},

		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["i" /* createComment */])();
		},

		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(if_block_anchor, target, anchor);
		},

		p: function update(changed, state) {
			if (current_block_type === (current_block_type = select_block_type(state)) && if_block) {
				if_block.p(changed, state);
			} else {
				if_block.u();
				if_block.d();
				if_block = current_block_type(state, component_1);
				if_block.c();
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},

		u: function unmount() {
			if_block.u();
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(if_block_anchor);
		},

		d: function destroy() {
			if_block.d();
		}
	};
}

// (34:4) {{#if loadedCodemirror}}
function create_if_block_2(state, component_1) {
	var div, text, button, span, text_1_value = state.showGenerated ? 'output' : 'input', text_1, div_class_value;

	var if_block = (state.selectedComponent) && create_if_block_3(state, component_1);

	function click_handler(event) {
		component_1.flip();
	}

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			if (if_block) if_block.c();
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t\t\t\t");
			button = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("button");
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("span");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_1_value);
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			if (if_block) if_block.l(div_nodes);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, "\n\n\t\t\t\t\t\t");

			button = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "BUTTON", { class: true }, false);
			var button_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(button);

			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(button_nodes, "SPAN", { class: true }, false);
			var span_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(span);

			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(span_nodes, text_1_value);
			span_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			button_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			encapsulateStyles(button);
			encapsulateStyles(span);
			span.className = "flip-text";
			button.className = "btn editor-toggle";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(button, "click", click_handler);
			div.className = div_class_value = "editor-wrapper " + state.flip;
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			if (if_block) if_block.m(div, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(button, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(span, button);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, span);
			component_1.refs.editorWrapper = div;
		},

		p: function update(changed, state) {
			if (state.selectedComponent) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block_3(state, component_1);
					if_block.c();
					if_block.m(div, text);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}

			if ((changed.showGenerated) && text_1_value !== (text_1_value = state.showGenerated ? 'output' : 'input')) {
				text_1.data = text_1_value;
			}

			if ((changed.flip) && div_class_value !== (div_class_value = "editor-wrapper " + state.flip)) {
				div.className = div_class_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
			if (if_block) if_block.u();
		},

		d: function destroy() {
			if (if_block) if_block.d();
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(button, "click", click_handler);
			if (component_1.refs.editorWrapper === div) component_1.refs.editorWrapper = null;
		}
	};
}

// (56:4) {{else}}
function create_if_block_6(state, component_1) {
	var p, text;

	return {
		c: function create() {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("p");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("loading editor...");
			this.h();
		},

		l: function claim(nodes) {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "P", { class: true }, false);
			var p_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(p);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, "loading editor...");
			p_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(p);
			p.className = "loading";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(p, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, p);
		},

		p: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */],

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(p);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

// (65:4) {{#if loadedCodemirror}}
function create_if_block_7(state, component_1) {
	var codemirror_updating = {};

	var codemirror_initial_data = {
		mode: "javascript",
		error: state.dataError,
		errorLoc: state.dataErrorLoc
	};
	if ('json' in state) {
		codemirror_initial_data.code = state.json;
		codemirror_updating.code = true;
	}
	var codemirror = new __WEBPACK_IMPORTED_MODULE_3__CodeMirror_html__["a" /* default */]({
		root: component_1.root,
		data: codemirror_initial_data,
		_bind: function(changed, childState) {
			var state = component_1.get(), newState = {};
			if (!codemirror_updating.code && changed.code) {
				newState.json = childState.code;
			}
			codemirror_updating = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, changed);
			component_1._set(newState);
			codemirror_updating = {};
		}
	});

	component_1.root._beforecreate.push(function() {
		var state = component_1.get(), childState = codemirror.get(), newState = {};
		if (!childState) return;
		if (!codemirror_updating.code) {
			newState.json = childState.code;
		}
		codemirror_updating = { code: true };
		component_1._set(newState);
		codemirror_updating = {};
	});

	component_1.refs.data = codemirror;

	var codemirror_context = {
		state: state
	};

	return {
		c: function create() {
			codemirror._fragment.c();
		},

		l: function claim(nodes) {
			codemirror._fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			codemirror._mount(target, anchor);
		},

		p: function update(changed, state) {
			var codemirror_changes = {};
			if (changed.dataError) codemirror_changes.error = state.dataError;
			if (changed.dataErrorLoc) codemirror_changes.errorLoc = state.dataErrorLoc;
			if (!codemirror_updating.code && changed.json) {
				codemirror_changes.code = state.json;
				codemirror_updating.code = true;
			}
			codemirror._set(codemirror_changes);
			codemirror_updating = {};

			codemirror_context.state = state;
		},

		u: function unmount() {
			codemirror._unmount();
		},

		d: function destroy() {
			codemirror.destroy(false);
			if (component_1.refs.data === codemirror) component_1.refs.data = null;
		}
	};
}

// (67:4) {{else}}
function create_if_block_8(state, component_1) {
	var p, text;

	return {
		c: function create() {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("p");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("loading editor...");
			this.h();
		},

		l: function claim(nodes) {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "P", { class: true }, false);
			var p_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(p);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, "loading editor...");
			p_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(p);
			p.className = "loading";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(p, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, p);
		},

		p: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */],

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(p);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

// (75:5) {{#if bundle}}
function create_if_block_10(state, component_1) {
	var viewer_updating = {};

	var viewer_initial_data = {
		bundle: state.bundle,
		data: state.data,
		bundleError: state.bundleError
	};
	if ('runtimeError' in state) {
		viewer_initial_data.error = state.runtimeError;
		viewer_updating.error = true;
	}
	var viewer = new __WEBPACK_IMPORTED_MODULE_4__Viewer_html__["a" /* default */]({
		root: component_1.root,
		data: viewer_initial_data,
		_bind: function(changed, childState) {
			var state = component_1.get(), newState = {};
			if (!viewer_updating.error && changed.error) {
				newState.runtimeError = childState.error;
			}
			viewer_updating = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, changed);
			component_1._set(newState);
			viewer_updating = {};
		}
	});

	component_1.root._beforecreate.push(function() {
		var state = component_1.get(), childState = viewer.get(), newState = {};
		if (!childState) return;
		if (!viewer_updating.error) {
			newState.runtimeError = childState.error;
		}
		viewer_updating = { error: true };
		component_1._set(newState);
		viewer_updating = {};
	});

	viewer.on("change", function(event) {
		component_1.updateData(event);
	});
	viewer.on("navigate", function(event) {
		component_1.navigate(event);
	});

	var viewer_context = {
		state: state
	};

	return {
		c: function create() {
			viewer._fragment.c();
		},

		l: function claim(nodes) {
			viewer._fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			viewer._mount(target, anchor);
		},

		p: function update(changed, state) {
			var viewer_changes = {};
			if (changed.bundle) viewer_changes.bundle = state.bundle;
			if (changed.data) viewer_changes.data = state.data;
			if (changed.bundleError) viewer_changes.bundleError = state.bundleError;
			if (!viewer_updating.error && changed.runtimeError) {
				viewer_changes.error = state.runtimeError;
				viewer_updating.error = true;
			}
			viewer._set(viewer_changes);
			viewer_updating = {};

			viewer_context.state = state;
		},

		u: function unmount() {
			viewer._unmount();
		},

		d: function destroy() {
			viewer.destroy(false);
		}
	};
}

// (74:4) {{#if loadedSvelte}}
function create_if_block_9(state, component_1) {
	var if_block_anchor;

	var if_block = (state.bundle) && create_if_block_10(state, component_1);

	return {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["i" /* createComment */])();
		},

		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["i" /* createComment */])();
		},

		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(if_block_anchor, target, anchor);
		},

		p: function update(changed, state) {
			if (state.bundle) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block_10(state, component_1);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}
		},

		u: function unmount() {
			if (if_block) if_block.u();
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(if_block_anchor);
		},

		d: function destroy() {
			if (if_block) if_block.d();
		}
	};
}

// (78:4) {{else}}
function create_if_block_11(state, component_1) {
	var p, text;

	return {
		c: function create() {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("p");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("loading Svelte compiler...");
			this.h();
		},

		l: function claim(nodes) {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "P", { class: true }, false);
			var p_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(p);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, "loading Svelte compiler...");
			p_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(p);
			p.className = "loading";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(p, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, p);
		},

		p: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */],

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(p);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

// (82:4) {{#if dragging}}
function create_if_block_12(state, component_1) {
	var div;

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			div.className = "mousecatcher";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

function select_block_type(state) {
	if (state.showGenerated && state.selectedComponent.compiled) return create_if_block_4;
	return create_if_block_5;
}

function select_block_type_1(state) {
	if (state.loadedCodemirror) return create_if_block_2;
	return create_if_block_6;
}

function select_block_type_2(state) {
	if (state.loadedCodemirror) return create_if_block_7;
	return create_if_block_8;
}

function select_block_type_3(state) {
	if (state.loadedSvelte) return create_if_block_9;
	return create_if_block_11;
}

function Index(options) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["s" /* init */])(this, options);
	this.store = store_1();
	this.refs = {};
	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(data(), options.data);
	this._recompute({ runtimeError: 1, selectedComponent: 1, gist: 1 }, this._state);

	var _oncreate = oncreate.bind(this);

	if (!options.root) {
		this._oncreate = [_oncreate];
		this._beforecreate = [];
		this._aftercreate = [];
	} else {
	 	this.root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		var nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		this._fragment.m(options.target, options.anchor || null);

		this._lock = true;
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._beforecreate);
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._oncreate);
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._aftercreate);
		this._lock = false;
	}
}

Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(Index.prototype, methods, __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["w" /* proto */]);

Index.prototype._recompute = function _recompute(changed, state) {
	if (changed.runtimeError || changed.selectedComponent) {
		if (Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["p" /* differs */])(state.runtimeErrorLoc, (state.runtimeErrorLoc = runtimeErrorLoc(state.runtimeError, state.selectedComponent)))) changed.runtimeErrorLoc = true;
	}

	if (changed.gist) {
		if (Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["p" /* differs */])(state.githubGist, (state.githubGist = githubGist(state.gist)))) changed.githubGist = true;
	}
}

Index.preload = preload;
/* harmony default export */ __webpack_exports__["default"] = (Index);
__webpack_require__(99);


/***/ }),
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return blankObject; });
/* unused harmony export destroy */
/* unused harmony export destroyDev */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return differs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return dispatchObservers; });
/* unused harmony export fire */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return get; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return observe; });
/* unused harmony export observeDev */
/* unused harmony export on */
/* unused harmony export onDev */
/* unused harmony export set */
/* unused harmony export _set */
/* unused harmony export setDev */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return callAll; });
/* unused harmony export _mount */
/* unused harmony export _unmount */
/* unused harmony export isPromise */
/* unused harmony export PENDING */
/* unused harmony export SUCCESS */
/* unused harmony export FAILURE */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return removeFromStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return proto; });
/* unused harmony export protoDev */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return appendNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return insertNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return detachNode; });
/* unused harmony export detachBetween */
/* unused harmony export detachBefore */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return detachAfter; });
/* unused harmony export reinsertBetween */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return reinsertChildren; });
/* unused harmony export reinsertAfter */
/* unused harmony export reinsertBefore */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return destroyEach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return createFragment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return createElement; });
/* unused harmony export createSvgElement */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return createText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return createComment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return removeListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return setAttribute; });
/* unused harmony export setXlinkAttribute */
/* unused harmony export getBindingGroupValue */
/* unused harmony export toNumber */
/* unused harmony export timeRangesToArray */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return children; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return claimElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return claimText; });
/* unused harmony export setInputType */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return setStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return selectOption; });
/* unused harmony export selectOptions */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return selectValue; });
/* unused harmony export selectMultipleValue */
/* unused harmony export linear */
/* unused harmony export generateRule */
/* unused harmony export hash */
/* unused harmony export wrapTransition */
/* unused harmony export transitionManager */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return noop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assign; });
function noop() {}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function appendNode(node, target) {
	target.appendChild(node);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function detachBetween(before, after) {
	while (before.nextSibling && before.nextSibling !== after) {
		before.parentNode.removeChild(before.nextSibling);
	}
}

function detachBefore(after) {
	while (after.previousSibling) {
		after.parentNode.removeChild(after.previousSibling);
	}
}

function detachAfter(before) {
	while (before.nextSibling) {
		before.parentNode.removeChild(before.nextSibling);
	}
}

function reinsertBetween(before, after, target) {
	while (before.nextSibling && before.nextSibling !== after) {
		target.appendChild(before.parentNode.removeChild(before.nextSibling));
	}
}

function reinsertChildren(parent, target) {
	while (parent.firstChild) target.appendChild(parent.firstChild);
}

function reinsertAfter(before, target) {
	while (before.nextSibling) target.appendChild(before.nextSibling);
}

function reinsertBefore(after, target) {
	var parent = after.parentNode;
	while (parent.firstChild !== after) target.appendChild(parent.firstChild);
}

function destroyEach(iterations) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d();
	}
}

function createFragment() {
	return document.createDocumentFragment();
}

function createElement(name) {
	return document.createElement(name);
}

function createSvgElement(name) {
	return document.createElementNS('http://www.w3.org/2000/svg', name);
}

function createText(data) {
	return document.createTextNode(data);
}

function createComment() {
	return document.createComment('');
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function setAttribute(node, attribute, value) {
	node.setAttribute(attribute, value);
}

function setXlinkAttribute(node, attribute, value) {
	node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
}

function getBindingGroupValue(group) {
	var value = [];
	for (var i = 0; i < group.length; i += 1) {
		if (group[i].checked) value.push(group[i].__value);
	}
	return value;
}

function toNumber(value) {
	return value === '' ? undefined : +value;
}

function timeRangesToArray(ranges) {
	var array = [];
	for (var i = 0; i < ranges.length; i += 1) {
		array.push({ start: ranges.start(i), end: ranges.end(i) });
	}
	return array;
}

function children (element) {
	return Array.from(element.childNodes);
}

function claimElement (nodes, name, attributes, svg) {
	for (var i = 0; i < nodes.length; i += 1) {
		var node = nodes[i];
		if (node.nodeName === name) {
			for (var j = 0; j < node.attributes.length; j += 1) {
				var attribute = node.attributes[j];
				if (!attributes[attribute.name]) node.removeAttribute(attribute.name);
			}
			return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes
		}
	}

	return svg ? createSvgElement(name) : createElement(name);
}

function claimText (nodes, data) {
	for (var i = 0; i < nodes.length; i += 1) {
		var node = nodes[i];
		if (node.nodeType === 3) {
			node.data = data;
			return nodes.splice(i, 1)[0];
		}
	}

	return createText(data);
}

function setInputType(input, type) {
	try {
		input.type = type;
	} catch (e) {}
}

function setStyle(node, key, value) {
	node.style.setProperty(key, value);
}

function selectOption(select, value) {
	for (var i = 0; i < select.options.length; i += 1) {
		var option = select.options[i];

		if (option.__value === value) {
			option.selected = true;
			return;
		}
	}
}

function selectOptions(select, value) {
	for (var i = 0; i < select.options.length; i += 1) {
		var option = select.options[i];
		option.selected = ~value.indexOf(option.__value);
	}
}

function selectValue(select) {
	var selectedOption = select.querySelector(':checked') || select.options[0];
	return selectedOption && selectedOption.__value;
}

function selectMultipleValue(select) {
	return [].map.call(select.querySelectorAll(':checked'), function(option) {
		return option.__value;
	});
}

function linear(t) {
	return t;
}

function generateRule(
	a,
	b,
	delta,
	duration,
	ease,
	fn
) {
	var keyframes = '{\n';

	for (var p = 0; p <= 1; p += 16.666 / duration) {
		var t = a + delta * ease(p);
		keyframes += p * 100 + '%{' + fn(t) + '}\n';
	}

	return keyframes + '100% {' + fn(b) + '}\n}';
}

// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
	var hash = 5381;
	var i = str.length;

	while (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
	return hash >>> 0;
}

function wrapTransition(component, node, fn, params, intro, outgroup) {
	var obj = fn(node, params);
	var duration = obj.duration || 300;
	var ease = obj.easing || linear;
	var cssText;

	// TODO share <style> tag between all transitions?
	if (obj.css && !transitionManager.stylesheet) {
		var style = createElement('style');
		document.head.appendChild(style);
		transitionManager.stylesheet = style.sheet;
	}

	if (intro) {
		if (obj.css && obj.delay) {
			cssText = node.style.cssText;
			node.style.cssText += obj.css(0);
		}

		if (obj.tick) obj.tick(0);
	}

	return {
		t: intro ? 0 : 1,
		running: false,
		program: null,
		pending: null,
		run: function(intro, callback) {
			var program = {
				start: window.performance.now() + (obj.delay || 0),
				intro: intro,
				callback: callback
			};

			if (obj.delay) {
				this.pending = program;
			} else {
				this.start(program);
			}

			if (!this.running) {
				this.running = true;
				transitionManager.add(this);
			}
		},
		start: function(program) {
			component.fire(program.intro ? 'intro.start' : 'outro.start', { node: node });

			program.a = this.t;
			program.b = program.intro ? 1 : 0;
			program.delta = program.b - program.a;
			program.duration = duration * Math.abs(program.b - program.a);
			program.end = program.start + program.duration;

			if (obj.css) {
				if (obj.delay) node.style.cssText = cssText;

				program.rule = generateRule(
					program.a,
					program.b,
					program.delta,
					program.duration,
					ease,
					obj.css
				);

				transitionManager.addRule(program.rule, program.name = '__svelte_' + hash(program.rule));

				node.style.animation = (node.style.animation || '')
					.split(', ')
					.filter(function(anim) {
						// when introing, discard old animations if there are any
						return anim && (program.delta < 0 || !/__svelte/.test(anim));
					})
					.concat(program.name + ' ' + duration + 'ms linear 1 forwards')
					.join(', ');
			}

			this.program = program;
			this.pending = null;
		},
		update: function(now) {
			var program = this.program;
			if (!program) return;

			var p = now - program.start;
			this.t = program.a + program.delta * ease(p / program.duration);
			if (obj.tick) obj.tick(this.t);
		},
		done: function() {
			var program = this.program;
			this.t = program.b;
			if (obj.tick) obj.tick(this.t);
			if (obj.css) transitionManager.deleteRule(node, program.name);
			program.callback();
			program = null;
			this.running = !!this.pending;
		},
		abort: function() {
			if (obj.tick) obj.tick(1);
			if (obj.css) transitionManager.deleteRule(node, this.program.name);
			this.program = this.pending = null;
			this.running = false;
		}
	};
}

var transitionManager = {
	running: false,
	transitions: [],
	bound: null,
	stylesheet: null,
	activeRules: {},

	add: function(transition) {
		this.transitions.push(transition);

		if (!this.running) {
			this.running = true;
			requestAnimationFrame(this.bound || (this.bound = this.next.bind(this)));
		}
	},

	addRule: function(rule, name) {
		if (!this.activeRules[name]) {
			this.activeRules[name] = true;
			this.stylesheet.insertRule('@keyframes ' + name + ' ' + rule, this.stylesheet.cssRules.length);
		}
	},

	next: function() {
		this.running = false;

		var now = window.performance.now();
		var i = this.transitions.length;

		while (i--) {
			var transition = this.transitions[i];

			if (transition.program && now >= transition.program.end) {
				transition.done();
			}

			if (transition.pending && now >= transition.pending.start) {
				transition.start(transition.pending);
			}

			if (transition.running) {
				transition.update(now);
				this.running = true;
			} else if (!transition.pending) {
				this.transitions.splice(i, 1);
			}
		}

		if (this.running) {
			requestAnimationFrame(this.bound);
		} else if (this.stylesheet) {
			var i = this.stylesheet.cssRules.length;
			while (i--) this.stylesheet.deleteRule(i);
			this.activeRules = {};
		}
	},

	deleteRule: function(node, name) {
		node.style.animation = node.style.animation
			.split(', ')
			.filter(function(anim) {
				return anim.slice(0, name.length) !== name;
			})
			.join(', ');
	}
};

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function destroyDev(detach) {
	destroy.call(this, detach);
	this.destroy = function() {
		console.warn('Component was already destroyed');
	};
}

function differs(a, b) {
	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function init(component, options) {
	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function observeDev(key, callback, options) {
	var c = (key = '' + key).search(/[^\w]/);
	if (c > -1) {
		var message =
			'The first argument to component.observe(...) must be the name of a top-level property';
		if (c > 0)
			message += ", i.e. '" + key.slice(0, c) + "' rather than '" + key + "'";

		throw new Error(message);
	}

	return observe.call(this, key, callback, options);
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function onDev(eventName, handler) {
	if (eventName === 'teardown') {
		console.warn(
			"Use component.on('destroy', ...) instead of component.on('teardown', ...) which has been deprecated and will be unsupported in Svelte 2"
		);
		return this.on('destroy', handler);
	}

	return on.call(this, eventName, handler);
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}
}

function setDev(newState) {
	if (typeof newState !== 'object') {
		throw new Error(
			this._debugName + '.set was called without an object of data key-values to update.'
		);
	}

	this._checkReadOnly(newState);
	set.call(this, newState);
}

function callAll(fns) {
	while (fns && fns.length) fns.pop()();
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	if (this._fragment) this._fragment.u();
}

function isPromise(value) {
	return value && typeof value.then === 'function';
}

var PENDING = {};
var SUCCESS = {};
var FAILURE = {};

function removeFromStore() {
	this.store._remove(this);
}

var proto = {
	destroy: destroy,
	get: get,
	fire: fire,
	observe: observe,
	on: on,
	set: set,
	teardown: destroy,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount
};

var protoDev = {
	destroy: destroyDev,
	get: get,
	fire: fire,
	observe: observeDev,
	on: onDev,
	set: setDev,
	teardown: destroyDev,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount
};




/***/ }),
/* 8 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			var styleTarget = fn.call(this, selector);
			// Special case to return head of iframe instead of iframe itself
			if (styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[selector] = styleTarget;
		}
		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(18);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__ = __webpack_require__(7);
/* routes/_components/GuideContents.html generated by Svelte v1.49.0 */


function data() {
	return {
		contents: []
	}
};

function oncreate() {
	const onhashchange = () => {
		this.store.set({ activeGuideSection: window.location.hash.slice( 1 ) });
	};

	window.addEventListener( 'hashchange', onhashchange, false );
	this.on( 'destroy', () => {
		window.removeEventListener( 'hashchange', onhashchange, false );
	});

	onhashchange();
};

function encapsulateStyles(node) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(node, "svelte-3051345958", "");
}

function create_main_fragment(state, component) {
	var ul;

	var $guide_contents = state.$guide_contents;

	var each_blocks = [];

	for (var i = 0; i < $guide_contents.length; i += 1) {
		each_blocks[i] = create_each_block(state, $guide_contents, $guide_contents[i], i, component);
	}

	return {
		c: function create() {
			ul = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("ul");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			ul = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "UL", { class: true }, false);
			var ul_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(ul);
			ul.className = "guide-toc";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(ul, target, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},

		p: function update(changed, state) {
			var $guide_contents = state.$guide_contents;

			if (changed.$guide_contents || changed.$activeGuideSection) {
				for (var i = 0; i < $guide_contents.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, $guide_contents, $guide_contents[i], i);
					} else {
						each_blocks[i] = create_each_block(state, $guide_contents, $guide_contents[i], i, component);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = $guide_contents.length;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["m" /* destroyEach */])(each_blocks);
		}
	};
}

// (2:1) {{#each $guide_contents as section}}
function create_each_block(state, $guide_contents, section, section_index, component) {
	var li, a, text_value = section.metadata.title, text, a_class_value, a_href_value, text_1;

	var subsections = section.subsections;

	var each_blocks = [];

	for (var i = 0; i < subsections.length; i += 1) {
		each_blocks[i] = create_each_block_1(state, $guide_contents, section, section_index, subsections, subsections[i], i, component);
	}

	return {
		c: function create() {
			li = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("li");
			a = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_value);
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\t\t\t");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			li = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "LI", {}, false);
			var li_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(li);

			a = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(li_nodes, "A", { class: true, href: true }, false);
			var a_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_nodes, text_value);
			a_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(li_nodes, "\n\t\t\t");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li_nodes);
			}

			li_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(li);
			encapsulateStyles(a);
			a.className = a_class_value = "section " + (section.slug === state.$activeGuideSection ? "active": "");
			a.href = a_href_value = "/guide#" + section.slug;
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(li, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(a, li);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, a);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, li);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li, null);
			}
		},

		p: function update(changed, state, $guide_contents, section, section_index) {
			if ((changed.$guide_contents) && text_value !== (text_value = section.metadata.title)) {
				text.data = text_value;
			}

			if ((changed.$guide_contents || changed.$activeGuideSection) && a_class_value !== (a_class_value = "section " + (section.slug === state.$activeGuideSection ? "active": ""))) {
				a.className = a_class_value;
			}

			if ((changed.$guide_contents) && a_href_value !== (a_href_value = "/guide#" + section.slug)) {
				a.href = a_href_value;
			}

			var subsections = section.subsections;

			if (changed.$guide_contents || changed.$activeGuideSection) {
				for (var i = 0; i < subsections.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, $guide_contents, section, section_index, subsections, subsections[i], i);
					} else {
						each_blocks[i] = create_each_block_1(state, $guide_contents, section, section_index, subsections, subsections[i], i, component);
						each_blocks[i].c();
						each_blocks[i].m(li, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = subsections.length;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(li);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["m" /* destroyEach */])(each_blocks);
		}
	};
}

// (5:3) {{#each section.subsections as subsection}}
function create_each_block_1(state, $guide_contents, section, section_index, subsections, subsection, subsection_index, component) {
	var a, text_value = subsection.title, text, a_class_value, a_href_value;

	return {
		c: function create() {
			a = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_value);
			this.h();
		},

		l: function claim(nodes) {
			a = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "A", { class: true, href: true }, false);
			var a_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_nodes, text_value);
			a_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(a);
			a.className = a_class_value = "subsection " + (subsection.slug === state.$activeGuideSection ? "active": "");
			a.href = a_href_value = "/guide#" + subsection.slug;
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(a, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, a);
		},

		p: function update(changed, state, $guide_contents, section, section_index, subsections, subsection, subsection_index) {
			if ((changed.$guide_contents) && text_value !== (text_value = subsection.title)) {
				text.data = text_value;
			}

			if ((changed.$guide_contents || changed.$activeGuideSection) && a_class_value !== (a_class_value = "subsection " + (subsection.slug === state.$activeGuideSection ? "active": ""))) {
				a.className = a_class_value;
			}

			if ((changed.$guide_contents) && a_href_value !== (a_href_value = "/guide#" + subsection.slug)) {
				a.href = a_href_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(a);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

function Index(options) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["s" /* init */])(this, options);
	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(this.store._init(["guide_contents","activeGuideSection"]), data(), options.data);
	this.store._add(this, ["guide_contents","activeGuideSection"]);

	this._handlers.destroy = [__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["y" /* removeFromStore */]];

	var _oncreate = oncreate.bind(this);

	if (!options.root) {
		this._oncreate = [_oncreate];
	} else {
	 	this.root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		var nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		this._fragment.m(options.target, options.anchor || null);

		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._oncreate);
	}
}

Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(Index.prototype, __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["w" /* proto */]);
/* harmony default export */ __webpack_exports__["a"] = (Index);
__webpack_require__(16);


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Nav_html__ = __webpack_require__(15);
/* routes/_components/Layout.html generated by Svelte v1.49.0 */





function encapsulateStyles(node) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(node, "svelte-428658705", "");
}

function create_main_fragment(state, component) {
	var text, div, slot_content_default = component._slotted.default;

	var nav = new __WEBPACK_IMPORTED_MODULE_1__Nav_html__["a" /* default */]({
		root: component.root,
		data: { page: state.page }
	});

	return {
		c: function create() {
			nav._fragment.c();
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n");
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			this.h();
		},

		l: function claim(nodes) {
			nav._fragment.l(nodes);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n\n");

			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", {}, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
		},

		m: function mount(target, anchor) {
			nav._mount(target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(text, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);

			if (slot_content_default) {
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(slot_content_default, div);
			}
		},

		p: function update(changed, state) {
			var nav_changes = {};
			if (changed.page) nav_changes.page = state.page;
			nav._set(nav_changes);
		},

		u: function unmount() {
			nav._unmount();
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(text);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);

			if (slot_content_default) {
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["x" /* reinsertChildren */])(div, slot_content_default);
			}
		},

		d: function destroy() {
			nav.destroy(false);
		}
	};
}

function Index(options) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["s" /* init */])(this, options);
	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, options.data);

	this._slotted = options.slots || {};

	if (!options.root) {
		this._oncreate = [];
		this._beforecreate = [];
		this._aftercreate = [];
	}

	this.slots = {};

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		var nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		this._fragment.m(options.target, options.anchor || null);

		this._lock = true;
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._beforecreate);
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._oncreate);
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._aftercreate);
		this._lock = false;
	}
}

Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(Index.prototype, __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["w" /* proto */]);
/* harmony default export */ __webpack_exports__["a"] = (Index);
__webpack_require__(21);


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GuideContents_html__ = __webpack_require__(13);
/* routes/_components/Nav.html generated by Svelte v1.49.0 */



function data() {
	return {
		open: false,
		route: '',
		active: null
	};
};

var methods = {
	toggleOpen () {
		const open = this.get( 'open' );

		// if the menu is closing, scroll back to the top *after* it
		// shuts. otherwise, scroll back to the top immediately
		// (just in case the user reopened before it happened).
		// The reason we don't just do it when the menu opens is
		// that the scrollbar visibly flashes
		if ( open ) {
			setTimeout( () => {
				if ( !this.get( 'open' ) ) {
					this.refs.nav.scrollTop = 0;
				}
			}, 350 );
		} else {
			this.refs.nav.scrollTop = 0;
		}

		this.set({ open: !open });
	}
};

function encapsulateStyles(node) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(node, "svelte-2829050598", "");
}

function create_main_fragment(state, component) {
	var div, div_class_value, text, div_1, span, text_1_value = state.open ? 'Close' : 'Menu', text_1, text_2, a, text_3, text_5, nav, ul, li, a_1, text_6, a_1_class_value, li_1, a_2, text_7, a_2_class_value, li_2, a_3, text_8, a_3_class_value, li_3, a_4, text_9, li_4, a_5, text_10, text_11, div_2, nav_class_value;

	function click_handler(event) {
		component.set({ open: false });
	}

	function click_handler_1(event) {
		component.toggleOpen();
	}

	var guidecontents = new __WEBPACK_IMPORTED_MODULE_1__GuideContents_html__["a" /* default */]({
		root: component.root
	});

	function click_handler_2(event) {
		component.set({ open: false });
	}

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n");
			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("span");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_1_value);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\t");
			a = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Svelte");
			text_5 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n");
			nav = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("nav");
			ul = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("ul");
			li = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("li");
			a_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text_6 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Guide");
			li_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("li");
			a_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text_7 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("REPL");
			li_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("li");
			a_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text_8 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Blog");
			li_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("li");
			a_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text_9 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Chat");
			li_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("li");
			a_5 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("a");
			text_10 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("GitHub");
			text_11 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t");
			div_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			guidecontents._fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n\n");

			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_1);

			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_1_nodes, "SPAN", { class: true }, false);
			var span_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(span);

			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(span_nodes, text_1_value);
			span_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_1_nodes, "\n\t");

			a = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_1_nodes, "A", { href: true, class: true }, false);
			var a_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a);

			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_nodes, "Svelte");
			a_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_5 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n\n");

			nav = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "NAV", { class: true }, false);
			var nav_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(nav);

			ul = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nav_nodes, "UL", { class: true }, false);
			var ul_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(ul);

			li = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(ul_nodes, "LI", {}, false);
			var li_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(li);

			a_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(li_nodes, "A", { class: true, href: true }, false);
			var a_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a_1);

			text_6 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_1_nodes, "Guide");
			a_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			li_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);

			li_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(ul_nodes, "LI", {}, false);
			var li_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(li_1);

			a_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(li_1_nodes, "A", { class: true, href: true }, false);
			var a_2_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a_2);

			text_7 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_2_nodes, "REPL");
			a_2_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			li_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);

			li_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(ul_nodes, "LI", {}, false);
			var li_2_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(li_2);

			a_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(li_2_nodes, "A", { class: true, href: true }, false);
			var a_3_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a_3);

			text_8 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_3_nodes, "Blog");
			a_3_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			li_2_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);

			li_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(ul_nodes, "LI", {}, false);
			var li_3_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(li_3);

			a_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(li_3_nodes, "A", { href: true }, false);
			var a_4_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a_4);

			text_9 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_4_nodes, "Chat");
			a_4_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			li_3_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);

			li_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(ul_nodes, "LI", {}, false);
			var li_4_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(li_4);

			a_5 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(li_4_nodes, "A", { href: true }, false);
			var a_5_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(a_5);

			text_10 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(a_5_nodes, "GitHub");
			a_5_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			li_4_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			ul_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_11 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nav_nodes, "\n\n\t");

			div_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nav_nodes, "DIV", { class: true }, false);
			var div_2_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_2);

			guidecontents._fragment.l(div_2_nodes);
			div_2_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			nav_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			div.className = div_class_value = "" + (state.open ? "open": "closed") + " mousecatcher";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(div, "click", click_handler);
			encapsulateStyles(div_1);
			encapsulateStyles(span);
			span.className = "menu-link";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(span, "click", click_handler_1);
			encapsulateStyles(a);
			a.href = "/";
			a.className = "logo";
			div_1.className = "container";
			encapsulateStyles(nav);
			encapsulateStyles(ul);
			encapsulateStyles(li);
			encapsulateStyles(a_1);
			a_1.className = a_1_class_value = state.page === "guide" ? "active": "";
			a_1.href = "/guide";
			encapsulateStyles(li_1);
			encapsulateStyles(a_2);
			a_2.className = a_2_class_value = state.page === "repl" ? "active": "";
			a_2.href = "/repl";
			encapsulateStyles(li_2);
			encapsulateStyles(a_3);
			a_3.className = a_3_class_value = state.page === "blog" ? "active": "";
			a_3.href = "/blog";
			encapsulateStyles(li_3);
			encapsulateStyles(a_4);
			a_4.href = "https://gitter.im/sveltejs/svelte";
			encapsulateStyles(li_4);
			encapsulateStyles(a_5);
			a_5.href = "https://github.com/sveltejs/svelte";
			ul.className = "primary";
			encapsulateStyles(div_2);
			div_2.className = "secondary";
			nav.className = nav_class_value = state.open ? "open": "closed";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(nav, "click", click_handler_2);
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(text, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div_1, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(span, div_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, span);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_2, div_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(a, div_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_3, a);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(text_5, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(nav, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(ul, nav);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(li, ul);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(a_1, li);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_6, a_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(li_1, ul);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(a_2, li_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_7, a_2);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(li_2, ul);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(a_3, li_2);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_8, a_3);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(li_3, ul);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(a_4, li_3);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_9, a_4);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(li_4, ul);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(a_5, li_4);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_10, a_5);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_11, nav);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_2, nav);
			guidecontents._mount(div_2, null);
			component.refs.nav = nav;
		},

		p: function update(changed, state) {
			if ((changed.open) && div_class_value !== (div_class_value = "" + (state.open ? "open": "closed") + " mousecatcher")) {
				div.className = div_class_value;
			}

			if ((changed.open) && text_1_value !== (text_1_value = state.open ? 'Close' : 'Menu')) {
				text_1.data = text_1_value;
			}

			if ((changed.page) && a_1_class_value !== (a_1_class_value = state.page === "guide" ? "active": "")) {
				a_1.className = a_1_class_value;
			}

			if ((changed.page) && a_2_class_value !== (a_2_class_value = state.page === "repl" ? "active": "")) {
				a_2.className = a_2_class_value;
			}

			if ((changed.page) && a_3_class_value !== (a_3_class_value = state.page === "blog" ? "active": "")) {
				a_3.className = a_3_class_value;
			}

			if ((changed.open) && nav_class_value !== (nav_class_value = state.open ? "open": "closed")) {
				nav.className = nav_class_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(text);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(text_5);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(nav);
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(div, "click", click_handler);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(span, "click", click_handler_1);
			guidecontents.destroy(false);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(nav, "click", click_handler_2);
			if (component.refs.nav === nav) component.refs.nav = null;
		}
	};
}

function Index(options) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["s" /* init */])(this, options);
	this.refs = {};
	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(data(), options.data);

	if (!options.root) {
		this._oncreate = [];
		this._beforecreate = [];
		this._aftercreate = [];
	}

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		var nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		this._fragment.m(options.target, options.anchor || null);

		this._lock = true;
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._beforecreate);
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._oncreate);
		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._aftercreate);
		this._lock = false;
	}
}

Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(Index.prototype, methods, __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["w" /* proto */]);
/* harmony default export */ __webpack_exports__["a"] = (Index);
__webpack_require__(19);


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(17);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(9)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817YIb9XyKvYoOS.css", function() {
			var newContent = require("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817YIb9XyKvYoOS.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(8)(true);
// imports


// module
exports.push([module.i, ".guide-toc[svelte-3051345958]{margin:0;padding:0}.guide-toc[svelte-3051345958] li[svelte-3051345958]{display:block;margin:0 0 2em 0}.section[svelte-3051345958]{display:block;font-weight:700;color:#333;font-size:1.2rem;margin:0 0 0.15em 0}.subsection[svelte-3051345958]{display:block;font-weight:500;color:#727272;font-size:1em;margin:0 0 0.15em 0}.section.active[svelte-3051345958],.subsection.active[svelte-3051345958]{color:#aa1e1e}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy8yMDgzMTEvRGV2ZWxvcG1lbnQvU1ZFTFRFL3N2ZWx0ZS50ZWNobm9sb2d5L3JvdXRlcy9fY29tcG9uZW50cy9HdWlkZUNvbnRlbnRzLmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiPHVsIGNsYXNzPSdndWlkZS10b2MnPlxuXHR7eyNlYWNoICRndWlkZV9jb250ZW50cyBhcyBzZWN0aW9ufX1cblx0XHQ8bGk+XG5cdFx0XHQ8YSBjbGFzcz0nc2VjdGlvbiB7e3NlY3Rpb24uc2x1ZyA9PT0gJGFjdGl2ZUd1aWRlU2VjdGlvbiA/IFwiYWN0aXZlXCI6IFwiXCJ9fScgaHJlZj0nL2d1aWRlI3t7c2VjdGlvbi5zbHVnfX0nPnt7c2VjdGlvbi5tZXRhZGF0YS50aXRsZX19PC9hPlxuXHRcdFx0e3sjZWFjaCBzZWN0aW9uLnN1YnNlY3Rpb25zIGFzIHN1YnNlY3Rpb259fVxuXHRcdFx0XHQ8YSBjbGFzcz0nc3Vic2VjdGlvbiB7e3N1YnNlY3Rpb24uc2x1ZyA9PT0gJGFjdGl2ZUd1aWRlU2VjdGlvbiA/IFwiYWN0aXZlXCI6IFwiXCJ9fScgaHJlZj0nL2d1aWRlI3t7c3Vic2VjdGlvbi5zbHVnfX0nPnt7c3Vic2VjdGlvbi50aXRsZX19PC9hPlxuXHRcdFx0e3svZWFjaH19XG5cdFx0PC9saT5cblx0e3svZWFjaH19XG48L3VsPlxuXG48c3R5bGU+XG5cdC5ndWlkZS10b2Mge1xuXHRcdG1hcmdpbjogMDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5cblx0Lmd1aWRlLXRvYyBsaSB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0bWFyZ2luOiAwIDAgMmVtIDA7XG5cdH1cblxuXHQuc2VjdGlvbiB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHRjb2xvcjogIzMzMztcblx0XHRmb250LXNpemU6IDEuMnJlbTtcblx0XHRtYXJnaW46IDAgMCAwLjE1ZW0gMDtcblx0fVxuXG5cdC5zdWJzZWN0aW9uIHtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LXdlaWdodDogNTAwO1xuXHRcdGNvbG9yOiM3MjcyNzI7XG5cdFx0Zm9udC1zaXplOiAxZW07XG5cdFx0bWFyZ2luOiAwIDAgMC4xNWVtIDA7XG5cdH1cblxuXHQuc2VjdGlvbi5hY3RpdmUsIC5zdWJzZWN0aW9uLmFjdGl2ZSB7XG5cdFx0Y29sb3I6ICNhYTFlMWU7XG5cdH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBkZWZhdWx0IHtcblx0XHRkYXRhKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y29udGVudHM6IFtdXG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG9uY3JlYXRlICgpIHtcblx0XHRcdGNvbnN0IG9uaGFzaGNoYW5nZSA9ICgpID0+IHtcblx0XHRcdFx0dGhpcy5zdG9yZS5zZXQoeyBhY3RpdmVHdWlkZVNlY3Rpb246IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNsaWNlKCAxICkgfSk7XG5cdFx0XHR9O1xuXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ2hhc2hjaGFuZ2UnLCBvbmhhc2hjaGFuZ2UsIGZhbHNlICk7XG5cdFx0XHR0aGlzLm9uKCAnZGVzdHJveScsICgpID0+IHtcblx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdoYXNoY2hhbmdlJywgb25oYXNoY2hhbmdlLCBmYWxzZSApO1xuXHRcdFx0fSk7XG5cblx0XHRcdG9uaGFzaGNoYW5nZSgpO1xuXHRcdH1cblx0fTtcbjwvc2NyaXB0PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlDLFVBQVUsbUJBQUMsQ0FBQyxBQUNYLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQUFDWCxDQUFDLEFBRUQsNkJBQVUsQ0FBQyxFQUFFLG1CQUFDLENBQUMsQUFDZCxPQUFPLENBQUUsS0FBSyxDQUNkLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ2xCLENBQUMsQUFFRCxRQUFRLG1CQUFDLENBQUMsQUFDVCxPQUFPLENBQUUsS0FBSyxDQUNkLFdBQVcsQ0FBRSxHQUFHLENBQ2hCLEtBQUssQ0FBRSxJQUFJLENBQ1gsU0FBUyxDQUFFLE1BQU0sQ0FDakIsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQUFDckIsQ0FBQyxBQUVELFdBQVcsbUJBQUMsQ0FBQyxBQUNaLE9BQU8sQ0FBRSxLQUFLLENBQ2QsV0FBVyxDQUFFLEdBQUcsQ0FDaEIsTUFBTSxPQUFPLENBQ2IsU0FBUyxDQUFFLEdBQUcsQ0FDZCxNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxBQUNyQixDQUFDLEFBRUQsUUFBUSwwQkFBTyxDQUFFLFdBQVcsT0FBTyxtQkFBQyxDQUFDLEFBQ3BDLEtBQUssQ0FBRSxPQUFPLEFBQ2YsQ0FBQyJ9*/", "", {"version":3,"sources":["/Users/208311/Development/SVELTE/svelte.technology/routes/_components/GuideContents.html","/private/var/folders/5_/1988587d0t3_w4n0f1g4ydhwn85510/T/tmp-74817YIb9XyKvYoOS.css"],"names":[],"mappings":"AAYC,8BAAY,SAEX,SAAU,CACV,oDAEc,cAEd,gBAAiB,CACjB,4BAES,cAET,gBACA,WACA,iBACA,mBAAoB,CACpB,+BAEY,cAEZ,gBACA,cACA,cACA,mBAAoB,CACpB,yEAEoC,aACtB,CACd;ACvCF,07FAA07F","file":"tmp-74817YIb9XyKvYoOS.css","sourcesContent":["<ul class='guide-toc'>\n\t{{#each $guide_contents as section}}\n\t\t<li>\n\t\t\t<a class='section {{section.slug === $activeGuideSection ? \"active\": \"\"}}' href='/guide#{{section.slug}}'>{{section.metadata.title}}</a>\n\t\t\t{{#each section.subsections as subsection}}\n\t\t\t\t<a class='subsection {{subsection.slug === $activeGuideSection ? \"active\": \"\"}}' href='/guide#{{subsection.slug}}'>{{subsection.title}}</a>\n\t\t\t{{/each}}\n\t\t</li>\n\t{{/each}}\n</ul>\n\n<style>\n\t.guide-toc {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\n\t.guide-toc li {\n\t\tdisplay: block;\n\t\tmargin: 0 0 2em 0;\n\t}\n\n\t.section {\n\t\tdisplay: block;\n\t\tfont-weight: 700;\n\t\tcolor: #333;\n\t\tfont-size: 1.2rem;\n\t\tmargin: 0 0 0.15em 0;\n\t}\n\n\t.subsection {\n\t\tdisplay: block;\n\t\tfont-weight: 500;\n\t\tcolor:#727272;\n\t\tfont-size: 1em;\n\t\tmargin: 0 0 0.15em 0;\n\t}\n\n\t.section.active, .subsection.active {\n\t\tcolor: #aa1e1e;\n\t}\n</style>\n\n<script>\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tcontents: []\n\t\t\t}\n\t\t},\n\n\t\toncreate () {\n\t\t\tconst onhashchange = () => {\n\t\t\t\tthis.store.set({ activeGuideSection: window.location.hash.slice( 1 ) });\n\t\t\t};\n\n\t\t\twindow.addEventListener( 'hashchange', onhashchange, false );\n\t\t\tthis.on( 'destroy', () => {\n\t\t\t\twindow.removeEventListener( 'hashchange', onhashchange, false );\n\t\t\t});\n\n\t\t\tonhashchange();\n\t\t}\n\t};\n</script>\n",".guide-toc[svelte-3051345958]{margin:0;padding:0}.guide-toc[svelte-3051345958] li[svelte-3051345958]{display:block;margin:0 0 2em 0}.section[svelte-3051345958]{display:block;font-weight:700;color:#333;font-size:1.2rem;margin:0 0 0.15em 0}.subsection[svelte-3051345958]{display:block;font-weight:500;color:#727272;font-size:1em;margin:0 0 0.15em 0}.section.active[svelte-3051345958],.subsection.active[svelte-3051345958]{color:#aa1e1e}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy8yMDgzMTEvRGV2ZWxvcG1lbnQvU1ZFTFRFL3N2ZWx0ZS50ZWNobm9sb2d5L3JvdXRlcy9fY29tcG9uZW50cy9HdWlkZUNvbnRlbnRzLmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiPHVsIGNsYXNzPSdndWlkZS10b2MnPlxuXHR7eyNlYWNoICRndWlkZV9jb250ZW50cyBhcyBzZWN0aW9ufX1cblx0XHQ8bGk+XG5cdFx0XHQ8YSBjbGFzcz0nc2VjdGlvbiB7e3NlY3Rpb24uc2x1ZyA9PT0gJGFjdGl2ZUd1aWRlU2VjdGlvbiA/IFwiYWN0aXZlXCI6IFwiXCJ9fScgaHJlZj0nL2d1aWRlI3t7c2VjdGlvbi5zbHVnfX0nPnt7c2VjdGlvbi5tZXRhZGF0YS50aXRsZX19PC9hPlxuXHRcdFx0e3sjZWFjaCBzZWN0aW9uLnN1YnNlY3Rpb25zIGFzIHN1YnNlY3Rpb259fVxuXHRcdFx0XHQ8YSBjbGFzcz0nc3Vic2VjdGlvbiB7e3N1YnNlY3Rpb24uc2x1ZyA9PT0gJGFjdGl2ZUd1aWRlU2VjdGlvbiA/IFwiYWN0aXZlXCI6IFwiXCJ9fScgaHJlZj0nL2d1aWRlI3t7c3Vic2VjdGlvbi5zbHVnfX0nPnt7c3Vic2VjdGlvbi50aXRsZX19PC9hPlxuXHRcdFx0e3svZWFjaH19XG5cdFx0PC9saT5cblx0e3svZWFjaH19XG48L3VsPlxuXG48c3R5bGU+XG5cdC5ndWlkZS10b2Mge1xuXHRcdG1hcmdpbjogMDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5cblx0Lmd1aWRlLXRvYyBsaSB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0bWFyZ2luOiAwIDAgMmVtIDA7XG5cdH1cblxuXHQuc2VjdGlvbiB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHRjb2xvcjogIzMzMztcblx0XHRmb250LXNpemU6IDEuMnJlbTtcblx0XHRtYXJnaW46IDAgMCAwLjE1ZW0gMDtcblx0fVxuXG5cdC5zdWJzZWN0aW9uIHtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LXdlaWdodDogNTAwO1xuXHRcdGNvbG9yOiM3MjcyNzI7XG5cdFx0Zm9udC1zaXplOiAxZW07XG5cdFx0bWFyZ2luOiAwIDAgMC4xNWVtIDA7XG5cdH1cblxuXHQuc2VjdGlvbi5hY3RpdmUsIC5zdWJzZWN0aW9uLmFjdGl2ZSB7XG5cdFx0Y29sb3I6ICNhYTFlMWU7XG5cdH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBkZWZhdWx0IHtcblx0XHRkYXRhKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y29udGVudHM6IFtdXG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG9uY3JlYXRlICgpIHtcblx0XHRcdGNvbnN0IG9uaGFzaGNoYW5nZSA9ICgpID0+IHtcblx0XHRcdFx0dGhpcy5zdG9yZS5zZXQoeyBhY3RpdmVHdWlkZVNlY3Rpb246IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNsaWNlKCAxICkgfSk7XG5cdFx0XHR9O1xuXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ2hhc2hjaGFuZ2UnLCBvbmhhc2hjaGFuZ2UsIGZhbHNlICk7XG5cdFx0XHR0aGlzLm9uKCAnZGVzdHJveScsICgpID0+IHtcblx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdoYXNoY2hhbmdlJywgb25oYXNoY2hhbmdlLCBmYWxzZSApO1xuXHRcdFx0fSk7XG5cblx0XHRcdG9uaGFzaGNoYW5nZSgpO1xuXHRcdH1cblx0fTtcbjwvc2NyaXB0PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlDLFVBQVUsbUJBQUMsQ0FBQyxBQUNYLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQUFDWCxDQUFDLEFBRUQsNkJBQVUsQ0FBQyxFQUFFLG1CQUFDLENBQUMsQUFDZCxPQUFPLENBQUUsS0FBSyxDQUNkLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ2xCLENBQUMsQUFFRCxRQUFRLG1CQUFDLENBQUMsQUFDVCxPQUFPLENBQUUsS0FBSyxDQUNkLFdBQVcsQ0FBRSxHQUFHLENBQ2hCLEtBQUssQ0FBRSxJQUFJLENBQ1gsU0FBUyxDQUFFLE1BQU0sQ0FDakIsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQUFDckIsQ0FBQyxBQUVELFdBQVcsbUJBQUMsQ0FBQyxBQUNaLE9BQU8sQ0FBRSxLQUFLLENBQ2QsV0FBVyxDQUFFLEdBQUcsQ0FDaEIsTUFBTSxPQUFPLENBQ2IsU0FBUyxDQUFFLEdBQUcsQ0FDZCxNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxBQUNyQixDQUFDLEFBRUQsUUFBUSwwQkFBTyxDQUFFLFdBQVcsT0FBTyxtQkFBQyxDQUFDLEFBQ3BDLEtBQUssQ0FBRSxPQUFPLEFBQ2YsQ0FBQyJ9*/"],"sourceRoot":""}]);

// exports


/***/ }),
/* 18 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(20);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(9)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-748176FXmW7RSmeWW.css", function() {
			var newContent = require("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-748176FXmW7RSmeWW.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(8)(true);
// imports


// module
exports.push([module.i, ".mousecatcher[svelte-2829050598]{position:fixed;left:0;top:0;width:100vw;height:100vh;background-color:black;pointer-events:none;opacity:0;z-index:3}.mousecatcher.open[svelte-2829050598]{pointer-events:all;opacity:0.3}@keyframes svelte-2829050598-fadein{from{opacity:0}to{opacity:1}}.container[svelte-2829050598]{position:fixed;width:100%;height:3em;background-color:#333;color:#eee;border-bottom:2px solid rgb(170,30,30);font-family:Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";z-index:5}nav[svelte-2829050598]{position:fixed;width:14em;height:calc(100vh - 3em);top:3em;font-family:Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";background-color:white;transform:translate(-100%,0);transition:transform 0.2s cubic-bezier(.17,.67,.24,.99);border-right:1px solid #eee;z-index:5;padding:1em;user-select:none}.open[svelte-2829050598]{transform:translate(0,0);transition:transform 0.3s cubic-bezier(.17,.67,.24,.99);overflow-y:auto}.menu-link[svelte-2829050598]{display:inline;position:absolute;top:0;left:1rem;font-size:1em;line-height:3.1em;color:#ccc;cursor:pointer;font-weight:500;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none}.logo[svelte-2829050598]{position:absolute;top:50%;left:50%;transform:translate(-50%, -45%);-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;line-height:1;text-transform:lowercase;color:white;font-size:1.4rem}ul[svelte-2829050598]{display:block;margin:0;padding:0;list-style:none}.primary[svelte-2829050598]{margin:0 0 2em 0}.primary[svelte-2829050598] li[svelte-2829050598]{position:relative;display:block}.primary[svelte-2829050598] .active[svelte-2829050598]{color:#333;font-weight:700}.primary[svelte-2829050598] li a[svelte-2829050598]{display:block;color:#727272;font-size:1.3em;font-weight:500;padding:0.75em 0;line-height:1}@media(min-width: 768px){.mousecatcher[svelte-2829050598],.menu-link[svelte-2829050598]{display:none}.container[svelte-2829050598]{height:4em}nav[svelte-2829050598]{width:100%;height:4em;padding:0 1.5em 0 0;transform:none;transition:none;height:0}.primary[svelte-2829050598]{position:fixed;top:0;right:1em;margin:0}.primary[svelte-2829050598] li[svelte-2829050598]{display:inline-block}.primary[svelte-2829050598] li a[svelte-2829050598]{padding:1.5em 0.5em;color:#ccc;font-size:1rem}.primary[svelte-2829050598] li a.active[svelte-2829050598]{color:white;font-weight:500}.primary[svelte-2829050598] li[svelte-2829050598]::after{position:absolute;top:1.5rem;right:-0.3em;content:'/';font-size:0.8em;color:#999}.primary[svelte-2829050598] li[svelte-2829050598]:last-child::after{content:''}.secondary[svelte-2829050598]{display:none}.logo[svelte-2829050598]{position:absolute;top:1rem;left:1rem;font-size:2em;font-weight:300;transform:none}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/", "", {"version":3,"sources":["/Users/208311/Development/SVELTE/svelte.technology/routes/_components/Nav.html","/private/var/folders/5_/1988587d0t3_w4n0f1g4ydhwn85510/T/tmp-748176FXmW7RSmeWW.css"],"names":[],"mappings":"AAsBC,iCAAe,eAEd,OACA,MACA,YACA,aACA,uBACA,oBACA,UAEA,SAAU,CACV,sCAEmB,mBAEnB,WAAY,CACZ,oCAEkB,KACZ,SAAW,CAAG,GAChB,SAAW,CAAG,CAClB,8BAEW,eAEX,WACA,WACA,sBACA,WACA,uCACA,4JACA,SAAU,CACV,uBAEI,eAEJ,WACA,yBACA,QACA,4JACA,uBACA,6BACA,wDACA,4BACA,UACA,YACA,gBAAiB,CACjB,yBAEM,yBAEN,wDACA,eAAgB,CAChB,8BAEW,eAEX,kBACA,MACA,UACA,cACA,kBACA,WACA,eACA,gBACA,wCACA,0BAA2B,CAC3B,yBAEM,kBAEN,QACA,SACA,gCACA,wCACA,2BACA,cACA,yBACA,YACA,gBAAiB,CACjB,sBAEG,cAEH,SACA,UACA,eAAgB,CAChB,4BAES,gBACQ,CACjB,kDAEY,kBAEZ,aAAc,CACd,uDAEiB,WAEjB,eAAgB,CAChB,oDAIc,cAEd,cACA,gBACA,gBACA,iBACA,aAAc,CACd,yBAE0B,+DACC,YACb,CACb,8BAEW,UACA,CACX,uBAEI,WAEJ,WACA,oBACA,eACA,gBACA,QAAS,CACT,4BAES,eAET,MACA,UACA,QAAS,CACT,kDAEY,oBACS,CACrB,oDAEc,oBAEd,WACA,cAAe,CACf,2DAEqB,YAErB,eAAgB,CAChB,yDAEmB,kBAEnB,WACA,aACA,YACA,gBACA,UAAW,CACX,oEAE8B,UACnB,CACX,8BAEW,YACE,CACb,yBAEM,kBAEN,SACA,UACA,cACA,gBACA,cAAe,CACf,CACD;ACxMF,8sYAA8sY","file":"tmp-748176FXmW7RSmeWW.css","sourcesContent":["<div class='{{open ? \"open\": \"closed\"}} mousecatcher' on:click='set({ open: false })'></div>\n\n<div class='container'>\n\t<span class=\"menu-link\" on:click='toggleOpen()'>{{open ? 'Close' : 'Menu'}}</span>\n\t<a href='/' class='logo'>Svelte</a>\n</div>\n\n<nav ref:nav class='{{open ? \"open\": \"closed\"}}' on:click='set({ open: false })'>\n\t<ul class='primary'>\n\t\t<li><a class='{{page === \"guide\" ? \"active\": \"\"}}' href='/guide'>Guide</a></li>\n\t\t<li><a class='{{page === \"repl\" ? \"active\": \"\"}}' href='/repl'>REPL</a></li>\n\t\t<li><a class='{{page === \"blog\" ? \"active\": \"\"}}' href='/blog'>Blog</a></li>\n\t\t<li><a href='https://gitter.im/sveltejs/svelte'>Chat</a></li>\n\t\t<li><a href='https://github.com/sveltejs/svelte'>GitHub</a></li>\n\t</ul>\n\n\t<div class='secondary'>\n\t\t<GuideContents/>\n\t</div>\n</nav>\n\n<style>\n\t.mousecatcher {\n\t\tposition: fixed;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\twidth: 100vw;\n\t\theight: 100vh;\n\t\tbackground-color: black;\n\t\tpointer-events: none;\n\t\topacity: 0;\n\t\t/*transition: opacity 0.4s;*/\n\t\tz-index: 3;\n\t}\n\n\t.mousecatcher.open {\n\t\tpointer-events: all;\n\t\topacity: 0.3;\n\t}\n\n\t@keyframes fadein {\n\t\tfrom { opacity: 0; }\n\t\tto { opacity: 1; }\n\t}\n\n\t.container {\n\t\tposition: fixed;\n\t\twidth: 100%;\n\t\theight: 3em;\n\t\tbackground-color: #333;\n\t\tcolor: #eee;\n\t\tborder-bottom: 2px solid rgb(170,30,30);\n\t\tfont-family: Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\t\tz-index: 5;\n\t}\n\n\tnav {\n\t\tposition: fixed;\n\t\twidth: 14em;\n\t\theight: calc(100vh - 3em);\n\t\ttop: 3em;\n\t\tfont-family: Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\t\tbackground-color: white;\n\t\ttransform: translate(-100%,0);\n\t\ttransition: transform 0.2s cubic-bezier(.17,.67,.24,.99);\n\t\tborder-right: 1px solid #eee;\n\t\tz-index: 5;\n\t\tpadding: 1em;\n\t\tuser-select: none;\n\t}\n\n\t.open {\n\t\ttransform: translate(0,0);\n\t\ttransition: transform 0.3s cubic-bezier(.17,.67,.24,.99);\n\t\toverflow-y: auto;\n\t}\n\n\t.menu-link {\n\t\tdisplay: inline;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 1rem;\n\t\tfont-size: 1em;\n\t\tline-height: 3.1em;\n\t\tcolor: #ccc;\n\t\tcursor: pointer;\n\t\tfont-weight: 500;\n\t\t-webkit-tap-highlight-color: transparent;\n\t\t-webkit-touch-callout: none;\n\t}\n\n\t.logo {\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%, -45%);\n\t\t-webkit-tap-highlight-color: transparent;\n\t\t-webkit-touch-callout: none;\n\t\tline-height: 1;\n\t\ttext-transform: lowercase;\n\t\tcolor: white;\n\t\tfont-size: 1.4rem;\n\t}\n\n\tul {\n\t\tdisplay: block;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tlist-style: none;\n\t}\n\n\t.primary {\n\t\tmargin: 0 0 2em 0;\n\t}\n\n\t.primary li {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t}\n\n\t.primary .active {\n\t\tcolor: #333;\n\t\tfont-weight: 700;\n\t}\n\n\t/**/\n\n\t.primary li a {\n\t\tdisplay: block;\n\t\tcolor: #727272;\n\t\tfont-size: 1.3em;\n\t\tfont-weight: 500;\n\t\tpadding: 0.75em 0;\n\t\tline-height: 1;\n\t}\n\n\t@media (min-width: 768px) {\n\t\t.mousecatcher, .menu-link {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.container {\n\t\t\theight: 4em;\n\t\t}\n\n\t\tnav {\n\t\t\twidth: 100%;\n\t\t\theight: 4em;\n\t\t\tpadding: 0 1.5em 0 0;\n\t\t\ttransform: none;\n\t\t\ttransition: none;\n\t\t\theight: 0;\n\t\t}\n\n\t\t.primary {\n\t\t\tposition: fixed;\n\t\t\ttop: 0;\n\t\t\tright: 1em;\n\t\t\tmargin: 0;\n\t\t}\n\n\t\t.primary li {\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\t.primary li a {\n\t\t\tpadding: 1.5em 0.5em;\n\t\t\tcolor: #ccc;\n\t\t\tfont-size: 1rem;\n\t\t}\n\n\t\t.primary li a.active {\n\t\t\tcolor: white;\n\t\t\tfont-weight: 500;\n\t\t}\n\n\t\t.primary li::after {\n\t\t\tposition: absolute;\n\t\t\ttop: 1.5rem;\n\t\t\tright: -0.3em;\n\t\t\tcontent: '/';\n\t\t\tfont-size: 0.8em;\n\t\t\tcolor: #999;\n\t\t}\n\n\t\t.primary li:last-child::after {\n\t\t\tcontent: '';\n\t\t}\n\n\t\t.secondary {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.logo {\n\t\t\tposition: absolute;\n\t\t\ttop: 1rem;\n\t\t\tleft: 1rem;\n\t\t\tfont-size: 2em;\n\t\t\tfont-weight: 300;\n\t\t\ttransform: none;\n\t\t}\n\t}\n</style>\n\n<script>\n\timport GuideContents from './GuideContents.html';\n\n\texport default {\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\topen: false,\n\t\t\t\troute: '',\n\t\t\t\tactive: null\n\t\t\t};\n\t\t},\n\n\t\tmethods: {\n\t\t\ttoggleOpen () {\n\t\t\t\tconst open = this.get( 'open' );\n\n\t\t\t\t// if the menu is closing, scroll back to the top *after* it\n\t\t\t\t// shuts. otherwise, scroll back to the top immediately\n\t\t\t\t// (just in case the user reopened before it happened).\n\t\t\t\t// The reason we don't just do it when the menu opens is\n\t\t\t\t// that the scrollbar visibly flashes\n\t\t\t\tif ( open ) {\n\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\tif ( !this.get( 'open' ) ) {\n\t\t\t\t\t\t\tthis.refs.nav.scrollTop = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 350 );\n\t\t\t\t} else {\n\t\t\t\t\tthis.refs.nav.scrollTop = 0;\n\t\t\t\t}\n\n\t\t\t\tthis.set({ open: !open });\n\t\t\t}\n\t\t},\n\n\t\tcomponents: {\n\t\t\tGuideContents\n\t\t}\n\t};\n</script>\n",".mousecatcher[svelte-2829050598]{position:fixed;left:0;top:0;width:100vw;height:100vh;background-color:black;pointer-events:none;opacity:0;z-index:3}.mousecatcher.open[svelte-2829050598]{pointer-events:all;opacity:0.3}@keyframes svelte-2829050598-fadein{from{opacity:0}to{opacity:1}}.container[svelte-2829050598]{position:fixed;width:100%;height:3em;background-color:#333;color:#eee;border-bottom:2px solid rgb(170,30,30);font-family:Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";z-index:5}nav[svelte-2829050598]{position:fixed;width:14em;height:calc(100vh - 3em);top:3em;font-family:Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";background-color:white;transform:translate(-100%,0);transition:transform 0.2s cubic-bezier(.17,.67,.24,.99);border-right:1px solid #eee;z-index:5;padding:1em;user-select:none}.open[svelte-2829050598]{transform:translate(0,0);transition:transform 0.3s cubic-bezier(.17,.67,.24,.99);overflow-y:auto}.menu-link[svelte-2829050598]{display:inline;position:absolute;top:0;left:1rem;font-size:1em;line-height:3.1em;color:#ccc;cursor:pointer;font-weight:500;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none}.logo[svelte-2829050598]{position:absolute;top:50%;left:50%;transform:translate(-50%, -45%);-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;line-height:1;text-transform:lowercase;color:white;font-size:1.4rem}ul[svelte-2829050598]{display:block;margin:0;padding:0;list-style:none}.primary[svelte-2829050598]{margin:0 0 2em 0}.primary[svelte-2829050598] li[svelte-2829050598]{position:relative;display:block}.primary[svelte-2829050598] .active[svelte-2829050598]{color:#333;font-weight:700}.primary[svelte-2829050598] li a[svelte-2829050598]{display:block;color:#727272;font-size:1.3em;font-weight:500;padding:0.75em 0;line-height:1}@media(min-width: 768px){.mousecatcher[svelte-2829050598],.menu-link[svelte-2829050598]{display:none}.container[svelte-2829050598]{height:4em}nav[svelte-2829050598]{width:100%;height:4em;padding:0 1.5em 0 0;transform:none;transition:none;height:0}.primary[svelte-2829050598]{position:fixed;top:0;right:1em;margin:0}.primary[svelte-2829050598] li[svelte-2829050598]{display:inline-block}.primary[svelte-2829050598] li a[svelte-2829050598]{padding:1.5em 0.5em;color:#ccc;font-size:1rem}.primary[svelte-2829050598] li a.active[svelte-2829050598]{color:white;font-weight:500}.primary[svelte-2829050598] li[svelte-2829050598]::after{position:absolute;top:1.5rem;right:-0.3em;content:'/';font-size:0.8em;color:#999}.primary[svelte-2829050598] li[svelte-2829050598]:last-child::after{content:''}.secondary[svelte-2829050598]{display:none}.logo[svelte-2829050598]{position:absolute;top:1rem;left:1rem;font-size:2em;font-weight:300;transform:none}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/"],"sourceRoot":""}]);

// exports


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(22);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(9)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817ansKsP4dm8ei.css", function() {
			var newContent = require("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817ansKsP4dm8ei.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(8)(true);
// imports


// module
exports.push([module.i, "div[svelte-428658705]{position:relative;padding:3em 0 0 0;overflow-x:hidden}@media(min-width: 768px){div[svelte-428658705]{padding:4em 0 0 0}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy8yMDgzMTEvRGV2ZWxvcG1lbnQvU1ZFTFRFL3N2ZWx0ZS50ZWNobm9sb2d5L3JvdXRlcy9fY29tcG9uZW50cy9MYXlvdXQuaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyI8TmF2IDpwYWdlLz5cblxuPGRpdj5cblx0PHNsb3Q+PC9zbG90PlxuPC9kaXY+XG5cbjxzdHlsZT5cblx0ZGl2IHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0cGFkZGluZzogM2VtIDAgMCAwO1xuXHRcdG92ZXJmbG93LXg6IGhpZGRlbjtcblx0fVxuXG5cdEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xuXHRcdGRpdiB7XG5cdFx0XHRwYWRkaW5nOiA0ZW0gMCAwIDA7XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG48c2NyaXB0PlxuXHRpbXBvcnQgTmF2IGZyb20gJy4vTmF2Lmh0bWwnO1xuXG5cdGV4cG9ydCBkZWZhdWx0IHtcblx0XHRjb21wb25lbnRzOiB7XG5cdFx0XHROYXZcblx0XHR9XG5cdH07XG48L3NjcmlwdD4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0MsR0FBRyxrQkFBQyxDQUFDLEFBQ0osUUFBUSxDQUFFLFFBQVEsQ0FDbEIsT0FBTyxDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEIsVUFBVSxDQUFFLE1BQU0sQUFDbkIsQ0FBQyxBQUVELE1BQU0sQUFBQyxZQUFZLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDMUIsR0FBRyxrQkFBQyxDQUFDLEFBQ0osT0FBTyxDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDbkIsQ0FBQyxBQUNGLENBQUMifQ==*/", "", {"version":3,"sources":["/Users/208311/Development/SVELTE/svelte.technology/routes/_components/Layout.html","/private/var/folders/5_/1988587d0t3_w4n0f1g4ydhwn85510/T/tmp-74817ansKsP4dm8ei.css"],"names":[],"mappings":"AAOC,sBAAK,kBAEJ,kBACA,iBAAkB,CAClB,yBAE0B,sBACrB,iBACc,CAClB,CACD;AChBF,0lCAA0lC","file":"tmp-74817ansKsP4dm8ei.css","sourcesContent":["<Nav :page/>\n\n<div>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv {\n\t\tposition: relative;\n\t\tpadding: 3em 0 0 0;\n\t\toverflow-x: hidden;\n\t}\n\n\t@media (min-width: 768px) {\n\t\tdiv {\n\t\t\tpadding: 4em 0 0 0;\n\t\t}\n\t}\n</style>\n\n<script>\n\timport Nav from './Nav.html';\n\n\texport default {\n\t\tcomponents: {\n\t\t\tNav\n\t\t}\n\t};\n</script>","div[svelte-428658705]{position:relative;padding:3em 0 0 0;overflow-x:hidden}@media(min-width: 768px){div[svelte-428658705]{padding:4em 0 0 0}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy8yMDgzMTEvRGV2ZWxvcG1lbnQvU1ZFTFRFL3N2ZWx0ZS50ZWNobm9sb2d5L3JvdXRlcy9fY29tcG9uZW50cy9MYXlvdXQuaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyI8TmF2IDpwYWdlLz5cblxuPGRpdj5cblx0PHNsb3Q+PC9zbG90PlxuPC9kaXY+XG5cbjxzdHlsZT5cblx0ZGl2IHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0cGFkZGluZzogM2VtIDAgMCAwO1xuXHRcdG92ZXJmbG93LXg6IGhpZGRlbjtcblx0fVxuXG5cdEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xuXHRcdGRpdiB7XG5cdFx0XHRwYWRkaW5nOiA0ZW0gMCAwIDA7XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG48c2NyaXB0PlxuXHRpbXBvcnQgTmF2IGZyb20gJy4vTmF2Lmh0bWwnO1xuXG5cdGV4cG9ydCBkZWZhdWx0IHtcblx0XHRjb21wb25lbnRzOiB7XG5cdFx0XHROYXZcblx0XHR9XG5cdH07XG48L3NjcmlwdD4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0MsR0FBRyxrQkFBQyxDQUFDLEFBQ0osUUFBUSxDQUFFLFFBQVEsQ0FDbEIsT0FBTyxDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEIsVUFBVSxDQUFFLE1BQU0sQUFDbkIsQ0FBQyxBQUVELE1BQU0sQUFBQyxZQUFZLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDMUIsR0FBRyxrQkFBQyxDQUFDLEFBQ0osT0FBTyxDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDbkIsQ0FBQyxBQUNGLENBQUMifQ==*/"],"sourceRoot":""}]);

// exports


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svelte_store_js__ = __webpack_require__(24);


const store = new __WEBPACK_IMPORTED_MODULE_0_svelte_store_js__["a" /* Store */]({
	guide_contents: []
});

fetch(`/api/guide/contents`).then(r => r.json()).then(guide_contents => {
	store.set({ guide_contents });
});

/* harmony default export */ __webpack_exports__["a"] = (store);

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Store; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shared_js__ = __webpack_require__(7);


function Store(state) {
	this._observers = { pre: Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["d" /* blankObject */])(), post: Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["d" /* blankObject */])() };
	this._changeHandlers = [];
	this._dependents = [];

	this._computed = Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["d" /* blankObject */])();
	this._sortedComputedProperties = [];

	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["c" /* assign */])({}, state);
}

Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["c" /* assign */])(Store.prototype, {
	_add: function(component, props) {
		this._dependents.push({
			component: component,
			props: props
		});
	},

	_init: function(props) {
		var state = {};
		for (var i = 0; i < props.length; i += 1) {
			var prop = props[i];
			state['$' + prop] = this._state[prop];
		}
		return state;
	},

	_remove: function(component) {
		var i = this._dependents.length;
		while (i--) {
			if (this._dependents[i].component === component) {
				this._dependents.splice(i, 1);
				return;
			}
		}
	},

	_sortComputedProperties: function() {
		var computed = this._computed;
		var sorted = this._sortedComputedProperties = [];
		var cycles;
		var visited = Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["d" /* blankObject */])();

		function visit(key) {
			if (cycles[key]) {
				throw new Error('Cyclical dependency detected');
			}

			if (visited[key]) return;
			visited[key] = true;

			var c = computed[key];

			if (c) {
				cycles[key] = true;
				c.deps.forEach(visit);
				sorted.push(c);
			}
		}

		for (var key in this._computed) {
			cycles = Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["d" /* blankObject */])();
			visit(key);
		}
	},

	compute: function(key, deps, fn) {
		var store = this;
		var value;

		var c = {
			deps: deps,
			update: function(state, changed, dirty) {
				var values = deps.map(function(dep) {
					if (dep in changed) dirty = true;
					return state[dep];
				});

				if (dirty) {
					var newValue = fn.apply(null, values);
					if (Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["p" /* differs */])(newValue, value)) {
						value = newValue;
						changed[key] = true;
						state[key] = value;
					}
				}
			}
		};

		c.update(this._state, {}, true);

		this._computed[key] = c;
		this._sortComputedProperties();
	},

	get: __WEBPACK_IMPORTED_MODULE_0__shared_js__["r" /* get */],

	observe: __WEBPACK_IMPORTED_MODULE_0__shared_js__["v" /* observe */],

	onchange: function(callback) {
		this._changeHandlers.push(callback);
		return {
			cancel: function() {
				var index = this._changeHandlers.indexOf(callback);
				if (~index) this._changeHandlers.splice(index, 1);
			}
		};
	},

	set: function(newState) {
		var oldState = this._state,
			changed = this._changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._computed[key]) throw new Error("'" + key + "' is a read-only property");
			if (Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["p" /* differs */])(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["c" /* assign */])({}, oldState, newState);

		for (var i = 0; i < this._sortedComputedProperties.length; i += 1) {
			this._sortedComputedProperties[i].update(this._state, changed);
		}

		for (var i = 0; i < this._changeHandlers.length; i += 1) {
			this._changeHandlers[i](this._state, changed);
		}

		Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["q" /* dispatchObservers */])(this, this._observers.pre, changed, this._state, oldState);

		var dependents = this._dependents.slice(); // guard against mutations
		for (var i = 0; i < dependents.length; i += 1) {
			var dependent = dependents[i];
			var componentState = {};
			dirty = false;

			for (var j = 0; j < dependent.props.length; j += 1) {
				var prop = dependent.props[j];
				if (prop in changed) {
					componentState['$' + prop] = this._state[prop];
					dirty = true;
				}
			}

			if (dirty) dependent.component.set(componentState);
		}

		Object(__WEBPACK_IMPORTED_MODULE_0__shared_js__["q" /* dispatchObservers */])(this, this._observers.post, changed, this._state, oldState);
	}
});



/***/ }),
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return decode$$1; });
/* unused harmony export encode */
var charToInteger = {};
var integerToChar = {};

'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {
	charToInteger[ char ] = i;
	integerToChar[ i ] = char;
});

function decode$1 ( string ) {
	var result = [],
		len = string.length,
		i,
		hasContinuationBit,
		shift = 0,
		value = 0,
		integer,
		shouldNegate;

	for ( i = 0; i < len; i += 1 ) {
		integer = charToInteger[ string[i] ];

		if ( integer === undefined ) {
			throw new Error( 'Invalid character (' + string[i] + ')' );
		}

		hasContinuationBit = integer & 32;

		integer &= 31;
		value += integer << shift;

		if ( hasContinuationBit ) {
			shift += 5;
		} else {
			shouldNegate = value & 1;
			value >>= 1;

			result.push( shouldNegate ? -value : value );

			// reset
			value = shift = 0;
		}
	}

	return result;
}

function encode$1 ( value ) {
	var result, i;

	if ( typeof value === 'number' ) {
		result = encodeInteger( value );
	} else {
		result = '';
		for ( i = 0; i < value.length; i += 1 ) {
			result += encodeInteger( value[i] );
		}
	}

	return result;
}

function encodeInteger ( num ) {
	var result = '', clamped;

	if ( num < 0 ) {
		num = ( -num << 1 ) | 1;
	} else {
		num <<= 1;
	}

	do {
		clamped = num & 31;
		num >>= 5;

		if ( num > 0 ) {
			clamped |= 32;
		}

		result += integerToChar[ clamped ];
	} while ( num > 0 );

	return result;
}

function decodeSegments ( encodedSegments ) {
	var i = encodedSegments.length;
	var segments = new Array( i );

	while ( i-- ) { segments[i] = decode$1( encodedSegments[i] ); }
	return segments;
}

function decode$$1 ( mappings ) {
	var sourceFileIndex = 0;   // second field
	var sourceCodeLine = 0;    // third field
	var sourceCodeColumn = 0;  // fourth field
	var nameIndex = 0;         // fifth field

	var lines = mappings.split( ';' );
	var numLines = lines.length;
	var decoded = new Array( numLines );

	var i;
	var j;
	var line;
	var generatedCodeColumn;
	var decodedLine;
	var segments;
	var segment;
	var result;

	for ( i = 0; i < numLines; i += 1 ) {
		line = lines[i];

		generatedCodeColumn = 0; // first field - reset each time
		decodedLine = [];

		segments = decodeSegments( line.split( ',' ) );

		for ( j = 0; j < segments.length; j += 1 ) {
			segment = segments[j];

			if ( !segment.length ) {
				break;
			}

			generatedCodeColumn += segment[0];

			result = [ generatedCodeColumn ];
			decodedLine.push( result );

			if ( segment.length === 1 ) {
				// only one field!
				continue;
			}

			sourceFileIndex  += segment[1];
			sourceCodeLine   += segment[2];
			sourceCodeColumn += segment[3];

			result.push( sourceFileIndex, sourceCodeLine, sourceCodeColumn );

			if ( segment.length === 5 ) {
				nameIndex += segment[4];
				result.push( nameIndex );
			}
		}

		decoded[i] = decodedLine;
	}

	return decoded;
}

function encode$$1 ( decoded ) {
	var offsets = {
		generatedCodeColumn: 0,
		sourceFileIndex: 0,   // second field
		sourceCodeLine: 0,    // third field
		sourceCodeColumn: 0,  // fourth field
		nameIndex: 0          // fifth field
	};

	return decoded.map( function (line) {
		offsets.generatedCodeColumn = 0; // first field - reset each time
		return line.map( encodeSegment ).join( ',' );
	}).join( ';' );

	function encodeSegment ( segment ) {
		if ( !segment.length ) {
			return segment;
		}

		var result = new Array( segment.length );

		result[0] = segment[0] - offsets.generatedCodeColumn;
		offsets.generatedCodeColumn = segment[0];

		if ( segment.length === 1 ) {
			// only one field!
			return encode$1( result );
		}

		result[1] = segment[1] - offsets.sourceFileIndex;
		result[2] = segment[2] - offsets.sourceCodeLine;
		result[3] = segment[3] - offsets.sourceCodeColumn;

		offsets.sourceFileIndex  = segment[1];
		offsets.sourceCodeLine   = segment[2];
		offsets.sourceCodeColumn = segment[3];

		if ( segment.length === 5 ) {
			result[4] = segment[4] - offsets.nameIndex;
			offsets.nameIndex = segment[4];
		}

		return encode$1( result );
	}
}


//# sourceMappingURL=sourcemap-codec.es.js.map


/***/ }),
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getLocator */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return locate; });
function getLocator(source, options) {
    if (options === void 0) { options = {}; }
    var offsetLine = options.offsetLine || 0;
    var offsetColumn = options.offsetColumn || 0;
    var originalLines = source.split('\n');
    var start = 0;
    var lineRanges = originalLines.map(function (line, i) {
        var end = start + line.length + 1;
        var range = { start: start, end: end, line: i };
        start = end;
        return range;
    });
    var i = 0;
    function rangeContains(range, index) {
        return range.start <= index && index < range.end;
    }
    function getLocation(range, index) {
        return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };
    }
    function locate(search, startIndex) {
        if (typeof search === 'string') {
            search = source.indexOf(search, startIndex || 0);
        }
        var range = lineRanges[i];
        var d = search >= range.end ? 1 : -1;
        while (range) {
            if (rangeContains(range, search))
                return getLocation(range, search);
            i += d;
            range = lineRanges[i];
        }
    }
    ;
    return locate;
}
function locate(source, search, options) {
    if (typeof options === 'number') {
        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');
    }
    return getLocator(source, options)(search, options && options.startIndex);
}



/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__ = __webpack_require__(7);
/* routes/repl/_CodeMirror.html generated by Svelte v1.49.0 */


var methods = {
	createEditor() {
		if (this.editor) {
			this.editor.toTextArea();
		}

		const { mode, code, readonly } = this.get();

		const modes = {
			json: {
				name: 'javascript',
				json: true
			},
			handlebars: {
				name: 'handlebars',
				base: 'text/html'
			}
		};

		this.editor = window.CodeMirror.fromTextArea(this.refs.editor, {
			lineNumbers: true,
			lineWrapping: true,
			indentWithTabs: true,
			indentUnit: 2,
			tabSize: 2,
			value: code,
			mode: modes[mode] || {
				name: mode
			},
			readOnly: readonly
		});

		this.editor.on('change', instance => {
			if (!this.updating) {
				this.updating = true;
				this.set({ code: instance.getValue() });
				this.updating = false;
			}
		});
	},

	resize() {
		this.editor.refresh();
	}
};

function oncreate() {
	this.updating = false;

	this.observe('mode', this.createEditor);

	this.observe('code', code => {
		if (!this.updating && code != null) {
			this.updating = true;
			this.editor.setValue(code);
			this.updating = false;
		}
	});

	let marker;
	let line;
	this.observe('errorLoc', loc => {
		if (marker) marker.clear();

		if (loc == null) {
			this.set({ errorLine: null });
		} else {
			const line = loc.line - 1;
			const ch = loc.column;

			marker = this.editor.markText({ line, ch }, { line, ch: ch + 1 }, {
				className: 'error-loc'
			});

			this.set({ errorLine: line });
		}
	});

	this.observe('errorLine', (line, previousLine) => {
		if (previousLine != null) this.editor.removeLineClass(previousLine, 'wrap', 'error-line');
		if (line != null) this.editor.addLineClass(line, 'wrap', 'error-line');
	});

	this.on('destroy', () => {
		this.editor.toTextArea();
	});

	// TODO this is a bug. oncreate should only be called once
	// the component is actually in the DOM
	setTimeout(() => {
		this.editor.refresh();
	});
};

function encapsulateStyles(node) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(node, "svelte-4104114949", "");
}

function create_main_fragment(state, component) {
	var div, textarea, text;

	var current_block_type = select_block_type(state);
	var if_block = current_block_type && current_block_type(state, component);

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			textarea = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("textarea");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			textarea = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "TEXTAREA", { tabindex: true }, false);
			var textarea_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(textarea);

			textarea_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, "\n\n\t");
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			encapsulateStyles(textarea);
			textarea.tabIndex = "2";
			div.className = "codemirror-container";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(textarea, div);
			component.refs.editor = textarea;
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, div);
			if (if_block) if_block.m(div, null);
		},

		p: function update(changed, state) {
			if (current_block_type === (current_block_type = select_block_type(state)) && if_block) {
				if_block.p(changed, state);
			} else {
				if (if_block) {
					if_block.u();
					if_block.d();
				}
				if_block = current_block_type && current_block_type(state, component);
				if (if_block) if_block.c();
				if (if_block) if_block.m(div, null);
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
			if (if_block) if_block.u();
		},

		d: function destroy() {
			if (component.refs.editor === textarea) component.refs.editor = null;
			if (if_block) if_block.d();
		}
	};
}

// (8:5) {{#if error.filename}}
function create_if_block_2(state, component) {
	var span, text_value = state.error.filename, text;

	function click_handler(event) {
		var state = component.get();
		component.fire("navigate", state.error.filename);
	}

	return {
		c: function create() {
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("span");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_value);
			this.h();
		},

		l: function claim(nodes) {
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "SPAN", { class: true }, false);
			var span_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(span);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(span_nodes, text_value);
			span_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			span.className = "filename";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(span, "click", click_handler);
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(span, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, span);
		},

		p: function update(changed, state) {
			if ((changed.error) && text_value !== (text_value = state.error.filename)) {
				text.data = text_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(span);
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(span, "click", click_handler);
		}
	};
}

// (6:3) {{#if error.loc}}
function create_if_block_1(state, component) {
	var strong, text, text_1_value = state.error.loc.line, text_1, text_2, text_3_value = state.error.loc.column, text_3, text_4;

	var if_block = (state.error.filename) && create_if_block_2(state, component);

	return {
		c: function create() {
			strong = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("strong");
			if (if_block) if_block.c();
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t\t\t(");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_1_value);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(":");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_3_value);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(")");
		},

		l: function claim(nodes) {
			strong = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "STRONG", {}, false);
			var strong_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(strong);

			if (if_block) if_block.l(strong_nodes);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, "\n\n\t\t\t\t\t(");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, text_1_value);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, ":");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, text_3_value);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, ")");
			strong_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(strong, target, anchor);
			if (if_block) if_block.m(strong, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, strong);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, strong);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_2, strong);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_3, strong);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_4, strong);
		},

		p: function update(changed, state) {
			if (state.error.filename) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block_2(state, component);
					if_block.c();
					if_block.m(strong, text);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}

			if ((changed.error) && text_1_value !== (text_1_value = state.error.loc.line)) {
				text_1.data = text_1_value;
			}

			if ((changed.error) && text_3_value !== (text_3_value = state.error.loc.column)) {
				text_3.data = text_3_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(strong);
			if (if_block) if_block.u();
		},

		d: function destroy() {
			if (if_block) if_block.d();
		}
	};
}

// (4:1) {{#if error}}
function create_if_block(state, component) {
	var p, text, text_1_value = state.error.message, text_1;

	var if_block = (state.error.loc) && create_if_block_1(state, component);

	return {
		c: function create() {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("p");
			if (if_block) if_block.c();
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_1_value);
			this.h();
		},

		l: function claim(nodes) {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "P", { class: true }, false);
			var p_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(p);

			if (if_block) if_block.l(p_nodes);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, "\n\n\t\t\t");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, text_1_value);
			p_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(p);
			p.className = "error message";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(p, target, anchor);
			if (if_block) if_block.m(p, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, p);
		},

		p: function update(changed, state) {
			if (state.error.loc) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block_1(state, component);
					if_block.c();
					if_block.m(p, text);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}

			if ((changed.error) && text_1_value !== (text_1_value = state.error.message)) {
				text_1.data = text_1_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(p);
			if (if_block) if_block.u();
		},

		d: function destroy() {
			if (if_block) if_block.d();
		}
	};
}

// (18:28) 
function create_if_block_3(state, component) {
	var p, text, text_1, text_2, text_3_value = state.warningCount === 1 ? 'warning' : 'warnings', text_3, text_4;

	return {
		c: function create() {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("p");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Compiled, but with ");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(state.warningCount);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(" ");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_3_value);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(" — check the console for details");
			this.h();
		},

		l: function claim(nodes) {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "P", { class: true }, false);
			var p_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(p);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, "Compiled, but with ");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, state.warningCount);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, " ");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, text_3_value);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, " — check the console for details");
			p_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(p);
			p.className = "warning message";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(p, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_2, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_3, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_4, p);
		},

		p: function update(changed, state) {
			if (changed.warningCount) {
				text_1.data = state.warningCount;
			}

			if ((changed.warningCount) && text_3_value !== (text_3_value = state.warningCount === 1 ? 'warning' : 'warnings')) {
				text_3.data = text_3_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(p);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

function select_block_type(state) {
	if (state.error) return create_if_block;
	if (state.warningCount > 0) return create_if_block_3;
	return null;
}

function Index(options) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["s" /* init */])(this, options);
	this.refs = {};
	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, options.data);

	var _oncreate = oncreate.bind(this);

	if (!options.root) {
		this._oncreate = [_oncreate];
	} else {
	 	this.root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		var nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		this._fragment.m(options.target, options.anchor || null);

		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._oncreate);
	}
}

Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(Index.prototype, methods, __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["w" /* proto */]);
/* harmony default export */ __webpack_exports__["a"] = (Index);
__webpack_require__(83);


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(84);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(9)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817SeDcjSCM4Rsr.css", function() {
			var newContent = require("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817SeDcjSCM4Rsr.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(8)(true);
// imports


// module
exports.push([module.i, ".codemirror-container[svelte-4104114949]{width:100%;border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:0 0 1em 0}.codemirror-container[svelte-4104114949] .CodeMirror{border-radius:3px;font-family:Inconsolata, monospace;font-size:16px;line-height:1.2;font-weight:400;color:#333;height:auto;min-height:60px}@media(min-width: 768px){.codemirror-container[svelte-4104114949]{height:100%;border:none}.codemirror-container[svelte-4104114949] .CodeMirror{height:100%}}.codemirror-container[svelte-4104114949] .CodeMirror-gutters{border-right:1px solid #eee}textarea[svelte-4104114949]{width:100%;border:none}.codemirror-container[svelte-4104114949] .message[svelte-4104114949]{bottom:1em;left:1em;position:absolute;z-index:20}.codemirror-container[svelte-4104114949] .error-loc{position:relative;border-bottom:2px solid rgb(200,0,0)}.codemirror-container[svelte-4104114949] .error-line{background-color:rgba(200,0,0,0.05)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy8yMDgzMTEvRGV2ZWxvcG1lbnQvU1ZFTFRFL3N2ZWx0ZS50ZWNobm9sb2d5L3JvdXRlcy9yZXBsL19Db2RlTWlycm9yLmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiPGRpdiBjbGFzcz0nY29kZW1pcnJvci1jb250YWluZXInPlxuXHQ8dGV4dGFyZWEgdGFiaW5kZXg9JzInIHJlZjplZGl0b3I+PC90ZXh0YXJlYT5cblxuXHR7eyNpZiBlcnJvcn19XG5cdFx0PHAgY2xhc3M9J2Vycm9yIG1lc3NhZ2UnPlxuXHRcdFx0e3sjaWYgZXJyb3IubG9jfX1cblx0XHRcdFx0PHN0cm9uZz5cblx0XHRcdFx0XHR7eyNpZiBlcnJvci5maWxlbmFtZX19XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz0nZmlsZW5hbWUnIG9uOmNsaWNrPSdmaXJlKFwibmF2aWdhdGVcIiwgZXJyb3IuZmlsZW5hbWUpJz57e2Vycm9yLmZpbGVuYW1lfX08L3NwYW4+XG5cdFx0XHRcdFx0e3svaWZ9fVxuXG5cdFx0XHRcdFx0KHt7ZXJyb3IubG9jLmxpbmV9fTp7e2Vycm9yLmxvYy5jb2x1bW59fSlcblx0XHRcdFx0PC9zdHJvbmc+XG5cdFx0XHR7ey9pZn19XG5cblx0XHRcdHt7ZXJyb3IubWVzc2FnZX19XG5cdFx0PC9wPlxuXHR7e2Vsc2VpZiB3YXJuaW5nQ291bnQgPiAwfX1cblx0XHQ8cCBjbGFzcz0nd2FybmluZyBtZXNzYWdlJz5cblx0XHRcdENvbXBpbGVkLCBidXQgd2l0aCB7e3dhcm5pbmdDb3VudH19IHt7d2FybmluZ0NvdW50ID09PSAxID8gJ3dhcm5pbmcnIDogJ3dhcm5pbmdzJ319IOKAlCBjaGVjayB0aGUgY29uc29sZSBmb3IgZGV0YWlsc1xuXHRcdDwvcD5cblx0e3svaWZ9fVxuPC9kaXY+XG5cbjxzdHlsZT5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIHtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRib3JkZXItdG9wOiAxcHggc29saWQgI2NjYztcblx0XHRib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYztcblx0XHRtYXJnaW46IDAgMCAxZW0gMDtcblx0fVxuXG5cdC5jb2RlbWlycm9yLWNvbnRhaW5lciA6Z2xvYmFsKC5Db2RlTWlycm9yKSB7XG5cdFx0Ym9yZGVyLXJhZGl1czogM3B4O1xuXHRcdGZvbnQtZmFtaWx5OiBJbmNvbnNvbGF0YSwgbW9ub3NwYWNlO1xuXHRcdGZvbnQtc2l6ZTogMTZweDtcblx0XHRsaW5lLWhlaWdodDogMS4yO1xuXHRcdGZvbnQtd2VpZ2h0OiA0MDA7XG5cdFx0Y29sb3I6ICMzMzM7XG5cdFx0aGVpZ2h0OiBhdXRvO1xuXHRcdG1pbi1oZWlnaHQ6IDYwcHg7XG5cdH1cblxuXHRAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcblx0XHQuY29kZW1pcnJvci1jb250YWluZXIge1xuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiBub25lO1xuXHRcdH1cblxuXHRcdC5jb2RlbWlycm9yLWNvbnRhaW5lciA6Z2xvYmFsKC5Db2RlTWlycm9yKSB7XG5cdFx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0fVxuXHR9XG5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIDpnbG9iYWwoLkNvZGVNaXJyb3ItZ3V0dGVycykge1xuXHRcdGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNlZWU7XG5cdH1cblxuXHR0ZXh0YXJlYSB7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHR9XG5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIC5tZXNzYWdlIHtcblx0XHRib3R0b206IDFlbTtcblx0XHRsZWZ0OiAxZW07XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHotaW5kZXg6IDIwO1xuXHR9XG5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIDpnbG9iYWwoLmVycm9yLWxvYykge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRib3JkZXItYm90dG9tOiAycHggc29saWQgcmdiKDIwMCwwLDApO1xuXHR9XG5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIDpnbG9iYWwoLmVycm9yLWxpbmUpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIwMCwwLDAsMC4wNSk7XG5cdH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBkZWZhdWx0IHtcblx0XHRvbmNyZWF0ZSgpIHtcblx0XHRcdHRoaXMudXBkYXRpbmcgPSBmYWxzZTtcblxuXHRcdFx0dGhpcy5vYnNlcnZlKCdtb2RlJywgdGhpcy5jcmVhdGVFZGl0b3IpO1xuXG5cdFx0XHR0aGlzLm9ic2VydmUoJ2NvZGUnLCBjb2RlID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLnVwZGF0aW5nICYmIGNvZGUgIT0gbnVsbCkge1xuXHRcdFx0XHRcdHRoaXMudXBkYXRpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZWRpdG9yLnNldFZhbHVlKGNvZGUpO1xuXHRcdFx0XHRcdHRoaXMudXBkYXRpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGxldCBtYXJrZXI7XG5cdFx0XHRsZXQgbGluZTtcblx0XHRcdHRoaXMub2JzZXJ2ZSgnZXJyb3JMb2MnLCBsb2MgPT4ge1xuXHRcdFx0XHRpZiAobWFya2VyKSBtYXJrZXIuY2xlYXIoKTtcblxuXHRcdFx0XHRpZiAobG9jID09IG51bGwpIHtcblx0XHRcdFx0XHR0aGlzLnNldCh7IGVycm9yTGluZTogbnVsbCB9KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBsaW5lID0gbG9jLmxpbmUgLSAxO1xuXHRcdFx0XHRcdGNvbnN0IGNoID0gbG9jLmNvbHVtbjtcblxuXHRcdFx0XHRcdG1hcmtlciA9IHRoaXMuZWRpdG9yLm1hcmtUZXh0KHsgbGluZSwgY2ggfSwgeyBsaW5lLCBjaDogY2ggKyAxIH0sIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZTogJ2Vycm9yLWxvYydcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHRoaXMuc2V0KHsgZXJyb3JMaW5lOiBsaW5lIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5vYnNlcnZlKCdlcnJvckxpbmUnLCAobGluZSwgcHJldmlvdXNMaW5lKSA9PiB7XG5cdFx0XHRcdGlmIChwcmV2aW91c0xpbmUgIT0gbnVsbCkgdGhpcy5lZGl0b3IucmVtb3ZlTGluZUNsYXNzKHByZXZpb3VzTGluZSwgJ3dyYXAnLCAnZXJyb3ItbGluZScpO1xuXHRcdFx0XHRpZiAobGluZSAhPSBudWxsKSB0aGlzLmVkaXRvci5hZGRMaW5lQ2xhc3MobGluZSwgJ3dyYXAnLCAnZXJyb3ItbGluZScpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMub24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZWRpdG9yLnRvVGV4dEFyZWEoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBUT0RPIHRoaXMgaXMgYSBidWcuIG9uY3JlYXRlIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlXG5cdFx0XHQvLyB0aGUgY29tcG9uZW50IGlzIGFjdHVhbGx5IGluIHRoZSBET01cblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmVkaXRvci5yZWZyZXNoKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0bWV0aG9kczoge1xuXHRcdFx0Y3JlYXRlRWRpdG9yKCkge1xuXHRcdFx0XHRpZiAodGhpcy5lZGl0b3IpIHtcblx0XHRcdFx0XHR0aGlzLmVkaXRvci50b1RleHRBcmVhKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB7IG1vZGUsIGNvZGUsIHJlYWRvbmx5IH0gPSB0aGlzLmdldCgpO1xuXG5cdFx0XHRcdGNvbnN0IG1vZGVzID0ge1xuXHRcdFx0XHRcdGpzb246IHtcblx0XHRcdFx0XHRcdG5hbWU6ICdqYXZhc2NyaXB0Jyxcblx0XHRcdFx0XHRcdGpzb246IHRydWVcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGhhbmRsZWJhcnM6IHtcblx0XHRcdFx0XHRcdG5hbWU6ICdoYW5kbGViYXJzJyxcblx0XHRcdFx0XHRcdGJhc2U6ICd0ZXh0L2h0bWwnXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMuZWRpdG9yID0gd2luZG93LkNvZGVNaXJyb3IuZnJvbVRleHRBcmVhKHRoaXMucmVmcy5lZGl0b3IsIHtcblx0XHRcdFx0XHRsaW5lTnVtYmVyczogdHJ1ZSxcblx0XHRcdFx0XHRsaW5lV3JhcHBpbmc6IHRydWUsXG5cdFx0XHRcdFx0aW5kZW50V2l0aFRhYnM6IHRydWUsXG5cdFx0XHRcdFx0aW5kZW50VW5pdDogMixcblx0XHRcdFx0XHR0YWJTaXplOiAyLFxuXHRcdFx0XHRcdHZhbHVlOiBjb2RlLFxuXHRcdFx0XHRcdG1vZGU6IG1vZGVzW21vZGVdIHx8IHtcblx0XHRcdFx0XHRcdG5hbWU6IG1vZGVcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHJlYWRPbmx5OiByZWFkb25seVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLmVkaXRvci5vbignY2hhbmdlJywgaW5zdGFuY2UgPT4ge1xuXHRcdFx0XHRcdGlmICghdGhpcy51cGRhdGluZykge1xuXHRcdFx0XHRcdFx0dGhpcy51cGRhdGluZyA9IHRydWU7XG5cdFx0XHRcdFx0XHR0aGlzLnNldCh7IGNvZGU6IGluc3RhbmNlLmdldFZhbHVlKCkgfSk7XG5cdFx0XHRcdFx0XHR0aGlzLnVwZGF0aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cblx0XHRcdHJlc2l6ZSgpIHtcblx0XHRcdFx0dGhpcy5lZGl0b3IucmVmcmVzaCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbjwvc2NyaXB0PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5QkMscUJBQXFCLG1CQUFDLENBQUMsQUFDdEIsS0FBSyxDQUFFLElBQUksQ0FDWCxVQUFVLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQzFCLGFBQWEsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDN0IsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDbEIsQ0FBQyxBQUVELHdDQUFxQixDQUFDLEFBQVEsV0FBVyxBQUFFLENBQUMsQUFDM0MsYUFBYSxDQUFFLEdBQUcsQ0FDbEIsV0FBVyxDQUFFLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FDbkMsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsR0FBRyxDQUNoQixXQUFXLENBQUUsR0FBRyxDQUNoQixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQ1osVUFBVSxDQUFFLElBQUksQUFDakIsQ0FBQyxBQUVELE1BQU0sQUFBQyxZQUFZLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDMUIscUJBQXFCLG1CQUFDLENBQUMsQUFDdEIsTUFBTSxDQUFFLElBQUksQ0FDWixNQUFNLENBQUUsSUFBSSxBQUNiLENBQUMsQUFFRCx3Q0FBcUIsQ0FBQyxBQUFRLFdBQVcsQUFBRSxDQUFDLEFBQzNDLE1BQU0sQ0FBRSxJQUFJLEFBQ2IsQ0FBQyxBQUNGLENBQUMsQUFFRCx3Q0FBcUIsQ0FBQyxBQUFRLG1CQUFtQixBQUFFLENBQUMsQUFDbkQsWUFBWSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxBQUM3QixDQUFDLEFBRUQsUUFBUSxtQkFBQyxDQUFDLEFBQ1QsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxBQUNiLENBQUMsQUFFRCx3Q0FBcUIsQ0FBQyxRQUFRLG1CQUFDLENBQUMsQUFDL0IsTUFBTSxDQUFFLEdBQUcsQ0FDWCxJQUFJLENBQUUsR0FBRyxDQUNULFFBQVEsQ0FBRSxRQUFRLENBQ2xCLE9BQU8sQ0FBRSxFQUFFLEFBQ1osQ0FBQyxBQUVELHdDQUFxQixDQUFDLEFBQVEsVUFBVSxBQUFFLENBQUMsQUFDMUMsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsYUFBYSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUN0QyxDQUFDLEFBRUQsd0NBQXFCLENBQUMsQUFBUSxXQUFXLEFBQUUsQ0FBQyxBQUMzQyxnQkFBZ0IsQ0FBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxBQUNyQyxDQUFDIn0=*/", "", {"version":3,"sources":["/Users/208311/Development/SVELTE/svelte.technology/routes/repl/_CodeMirror.html","/private/var/folders/5_/1988587d0t3_w4n0f1g4ydhwn85510/T/tmp-74817SeDcjSCM4Rsr.css"],"names":[],"mappings":"AAyBC,yCAAuB,WAEtB,0BACA,6BACA,gBAAiB,CACjB,qDAE2C,kBAE3C,mCACA,eACA,gBACA,gBACA,WACA,YACA,eAAgB,CAChB,yBAE0B,yCACH,YAEtB,WAAY,CACZ,qDAE2C,WAC/B,CACZ,CACD,6DAEmD,2BACvB,CAC5B,4BAES,WAET,WAAY,CACZ,qEAE+B,WAE/B,SACA,kBACA,UAAW,CACX,oDAE0C,kBAE1C,oCAAqC,CACrC,qDAE2C,mCACP,CACpC;AC5EF,8xOAA8xO","file":"tmp-74817SeDcjSCM4Rsr.css","sourcesContent":["<div class='codemirror-container'>\n\t<textarea tabindex='2' ref:editor></textarea>\n\n\t{{#if error}}\n\t\t<p class='error message'>\n\t\t\t{{#if error.loc}}\n\t\t\t\t<strong>\n\t\t\t\t\t{{#if error.filename}}\n\t\t\t\t\t\t<span class='filename' on:click='fire(\"navigate\", error.filename)'>{{error.filename}}</span>\n\t\t\t\t\t{{/if}}\n\n\t\t\t\t\t({{error.loc.line}}:{{error.loc.column}})\n\t\t\t\t</strong>\n\t\t\t{{/if}}\n\n\t\t\t{{error.message}}\n\t\t</p>\n\t{{elseif warningCount > 0}}\n\t\t<p class='warning message'>\n\t\t\tCompiled, but with {{warningCount}} {{warningCount === 1 ? 'warning' : 'warnings'}} — check the console for details\n\t\t</p>\n\t{{/if}}\n</div>\n\n<style>\n\t.codemirror-container {\n\t\twidth: 100%;\n\t\tborder-top: 1px solid #ccc;\n\t\tborder-bottom: 1px solid #ccc;\n\t\tmargin: 0 0 1em 0;\n\t}\n\n\t.codemirror-container :global(.CodeMirror) {\n\t\tborder-radius: 3px;\n\t\tfont-family: Inconsolata, monospace;\n\t\tfont-size: 16px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 400;\n\t\tcolor: #333;\n\t\theight: auto;\n\t\tmin-height: 60px;\n\t}\n\n\t@media (min-width: 768px) {\n\t\t.codemirror-container {\n\t\t\theight: 100%;\n\t\t\tborder: none;\n\t\t}\n\n\t\t.codemirror-container :global(.CodeMirror) {\n\t\t\theight: 100%;\n\t\t}\n\t}\n\n\t.codemirror-container :global(.CodeMirror-gutters) {\n\t\tborder-right: 1px solid #eee;\n\t}\n\n\ttextarea {\n\t\twidth: 100%;\n\t\tborder: none;\n\t}\n\n\t.codemirror-container .message {\n\t\tbottom: 1em;\n\t\tleft: 1em;\n\t\tposition: absolute;\n\t\tz-index: 20;\n\t}\n\n\t.codemirror-container :global(.error-loc) {\n\t\tposition: relative;\n\t\tborder-bottom: 2px solid rgb(200,0,0);\n\t}\n\n\t.codemirror-container :global(.error-line) {\n\t\tbackground-color: rgba(200,0,0,0.05);\n\t}\n</style>\n\n<script>\n\texport default {\n\t\toncreate() {\n\t\t\tthis.updating = false;\n\n\t\t\tthis.observe('mode', this.createEditor);\n\n\t\t\tthis.observe('code', code => {\n\t\t\t\tif (!this.updating && code != null) {\n\t\t\t\t\tthis.updating = true;\n\t\t\t\t\tthis.editor.setValue(code);\n\t\t\t\t\tthis.updating = false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlet marker;\n\t\t\tlet line;\n\t\t\tthis.observe('errorLoc', loc => {\n\t\t\t\tif (marker) marker.clear();\n\n\t\t\t\tif (loc == null) {\n\t\t\t\t\tthis.set({ errorLine: null });\n\t\t\t\t} else {\n\t\t\t\t\tconst line = loc.line - 1;\n\t\t\t\t\tconst ch = loc.column;\n\n\t\t\t\t\tmarker = this.editor.markText({ line, ch }, { line, ch: ch + 1 }, {\n\t\t\t\t\t\tclassName: 'error-loc'\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.set({ errorLine: line });\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.observe('errorLine', (line, previousLine) => {\n\t\t\t\tif (previousLine != null) this.editor.removeLineClass(previousLine, 'wrap', 'error-line');\n\t\t\t\tif (line != null) this.editor.addLineClass(line, 'wrap', 'error-line');\n\t\t\t});\n\n\t\t\tthis.on('destroy', () => {\n\t\t\t\tthis.editor.toTextArea();\n\t\t\t});\n\n\t\t\t// TODO this is a bug. oncreate should only be called once\n\t\t\t// the component is actually in the DOM\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.editor.refresh();\n\t\t\t});\n\t\t},\n\n\t\tmethods: {\n\t\t\tcreateEditor() {\n\t\t\t\tif (this.editor) {\n\t\t\t\t\tthis.editor.toTextArea();\n\t\t\t\t}\n\n\t\t\t\tconst { mode, code, readonly } = this.get();\n\n\t\t\t\tconst modes = {\n\t\t\t\t\tjson: {\n\t\t\t\t\t\tname: 'javascript',\n\t\t\t\t\t\tjson: true\n\t\t\t\t\t},\n\t\t\t\t\thandlebars: {\n\t\t\t\t\t\tname: 'handlebars',\n\t\t\t\t\t\tbase: 'text/html'\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.editor = window.CodeMirror.fromTextArea(this.refs.editor, {\n\t\t\t\t\tlineNumbers: true,\n\t\t\t\t\tlineWrapping: true,\n\t\t\t\t\tindentWithTabs: true,\n\t\t\t\t\tindentUnit: 2,\n\t\t\t\t\ttabSize: 2,\n\t\t\t\t\tvalue: code,\n\t\t\t\t\tmode: modes[mode] || {\n\t\t\t\t\t\tname: mode\n\t\t\t\t\t},\n\t\t\t\t\treadOnly: readonly\n\t\t\t\t});\n\n\t\t\t\tthis.editor.on('change', instance => {\n\t\t\t\t\tif (!this.updating) {\n\t\t\t\t\t\tthis.updating = true;\n\t\t\t\t\t\tthis.set({ code: instance.getValue() });\n\t\t\t\t\t\tthis.updating = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tresize() {\n\t\t\t\tthis.editor.refresh();\n\t\t\t}\n\t\t}\n\t};\n</script>",".codemirror-container[svelte-4104114949]{width:100%;border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:0 0 1em 0}.codemirror-container[svelte-4104114949] .CodeMirror{border-radius:3px;font-family:Inconsolata, monospace;font-size:16px;line-height:1.2;font-weight:400;color:#333;height:auto;min-height:60px}@media(min-width: 768px){.codemirror-container[svelte-4104114949]{height:100%;border:none}.codemirror-container[svelte-4104114949] .CodeMirror{height:100%}}.codemirror-container[svelte-4104114949] .CodeMirror-gutters{border-right:1px solid #eee}textarea[svelte-4104114949]{width:100%;border:none}.codemirror-container[svelte-4104114949] .message[svelte-4104114949]{bottom:1em;left:1em;position:absolute;z-index:20}.codemirror-container[svelte-4104114949] .error-loc{position:relative;border-bottom:2px solid rgb(200,0,0)}.codemirror-container[svelte-4104114949] .error-line{background-color:rgba(200,0,0,0.05)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy8yMDgzMTEvRGV2ZWxvcG1lbnQvU1ZFTFRFL3N2ZWx0ZS50ZWNobm9sb2d5L3JvdXRlcy9yZXBsL19Db2RlTWlycm9yLmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiPGRpdiBjbGFzcz0nY29kZW1pcnJvci1jb250YWluZXInPlxuXHQ8dGV4dGFyZWEgdGFiaW5kZXg9JzInIHJlZjplZGl0b3I+PC90ZXh0YXJlYT5cblxuXHR7eyNpZiBlcnJvcn19XG5cdFx0PHAgY2xhc3M9J2Vycm9yIG1lc3NhZ2UnPlxuXHRcdFx0e3sjaWYgZXJyb3IubG9jfX1cblx0XHRcdFx0PHN0cm9uZz5cblx0XHRcdFx0XHR7eyNpZiBlcnJvci5maWxlbmFtZX19XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz0nZmlsZW5hbWUnIG9uOmNsaWNrPSdmaXJlKFwibmF2aWdhdGVcIiwgZXJyb3IuZmlsZW5hbWUpJz57e2Vycm9yLmZpbGVuYW1lfX08L3NwYW4+XG5cdFx0XHRcdFx0e3svaWZ9fVxuXG5cdFx0XHRcdFx0KHt7ZXJyb3IubG9jLmxpbmV9fTp7e2Vycm9yLmxvYy5jb2x1bW59fSlcblx0XHRcdFx0PC9zdHJvbmc+XG5cdFx0XHR7ey9pZn19XG5cblx0XHRcdHt7ZXJyb3IubWVzc2FnZX19XG5cdFx0PC9wPlxuXHR7e2Vsc2VpZiB3YXJuaW5nQ291bnQgPiAwfX1cblx0XHQ8cCBjbGFzcz0nd2FybmluZyBtZXNzYWdlJz5cblx0XHRcdENvbXBpbGVkLCBidXQgd2l0aCB7e3dhcm5pbmdDb3VudH19IHt7d2FybmluZ0NvdW50ID09PSAxID8gJ3dhcm5pbmcnIDogJ3dhcm5pbmdzJ319IOKAlCBjaGVjayB0aGUgY29uc29sZSBmb3IgZGV0YWlsc1xuXHRcdDwvcD5cblx0e3svaWZ9fVxuPC9kaXY+XG5cbjxzdHlsZT5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIHtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRib3JkZXItdG9wOiAxcHggc29saWQgI2NjYztcblx0XHRib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYztcblx0XHRtYXJnaW46IDAgMCAxZW0gMDtcblx0fVxuXG5cdC5jb2RlbWlycm9yLWNvbnRhaW5lciA6Z2xvYmFsKC5Db2RlTWlycm9yKSB7XG5cdFx0Ym9yZGVyLXJhZGl1czogM3B4O1xuXHRcdGZvbnQtZmFtaWx5OiBJbmNvbnNvbGF0YSwgbW9ub3NwYWNlO1xuXHRcdGZvbnQtc2l6ZTogMTZweDtcblx0XHRsaW5lLWhlaWdodDogMS4yO1xuXHRcdGZvbnQtd2VpZ2h0OiA0MDA7XG5cdFx0Y29sb3I6ICMzMzM7XG5cdFx0aGVpZ2h0OiBhdXRvO1xuXHRcdG1pbi1oZWlnaHQ6IDYwcHg7XG5cdH1cblxuXHRAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcblx0XHQuY29kZW1pcnJvci1jb250YWluZXIge1xuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiBub25lO1xuXHRcdH1cblxuXHRcdC5jb2RlbWlycm9yLWNvbnRhaW5lciA6Z2xvYmFsKC5Db2RlTWlycm9yKSB7XG5cdFx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0fVxuXHR9XG5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIDpnbG9iYWwoLkNvZGVNaXJyb3ItZ3V0dGVycykge1xuXHRcdGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNlZWU7XG5cdH1cblxuXHR0ZXh0YXJlYSB7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHR9XG5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIC5tZXNzYWdlIHtcblx0XHRib3R0b206IDFlbTtcblx0XHRsZWZ0OiAxZW07XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHotaW5kZXg6IDIwO1xuXHR9XG5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIDpnbG9iYWwoLmVycm9yLWxvYykge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRib3JkZXItYm90dG9tOiAycHggc29saWQgcmdiKDIwMCwwLDApO1xuXHR9XG5cblx0LmNvZGVtaXJyb3ItY29udGFpbmVyIDpnbG9iYWwoLmVycm9yLWxpbmUpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIwMCwwLDAsMC4wNSk7XG5cdH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBkZWZhdWx0IHtcblx0XHRvbmNyZWF0ZSgpIHtcblx0XHRcdHRoaXMudXBkYXRpbmcgPSBmYWxzZTtcblxuXHRcdFx0dGhpcy5vYnNlcnZlKCdtb2RlJywgdGhpcy5jcmVhdGVFZGl0b3IpO1xuXG5cdFx0XHR0aGlzLm9ic2VydmUoJ2NvZGUnLCBjb2RlID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLnVwZGF0aW5nICYmIGNvZGUgIT0gbnVsbCkge1xuXHRcdFx0XHRcdHRoaXMudXBkYXRpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZWRpdG9yLnNldFZhbHVlKGNvZGUpO1xuXHRcdFx0XHRcdHRoaXMudXBkYXRpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGxldCBtYXJrZXI7XG5cdFx0XHRsZXQgbGluZTtcblx0XHRcdHRoaXMub2JzZXJ2ZSgnZXJyb3JMb2MnLCBsb2MgPT4ge1xuXHRcdFx0XHRpZiAobWFya2VyKSBtYXJrZXIuY2xlYXIoKTtcblxuXHRcdFx0XHRpZiAobG9jID09IG51bGwpIHtcblx0XHRcdFx0XHR0aGlzLnNldCh7IGVycm9yTGluZTogbnVsbCB9KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBsaW5lID0gbG9jLmxpbmUgLSAxO1xuXHRcdFx0XHRcdGNvbnN0IGNoID0gbG9jLmNvbHVtbjtcblxuXHRcdFx0XHRcdG1hcmtlciA9IHRoaXMuZWRpdG9yLm1hcmtUZXh0KHsgbGluZSwgY2ggfSwgeyBsaW5lLCBjaDogY2ggKyAxIH0sIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZTogJ2Vycm9yLWxvYydcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHRoaXMuc2V0KHsgZXJyb3JMaW5lOiBsaW5lIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5vYnNlcnZlKCdlcnJvckxpbmUnLCAobGluZSwgcHJldmlvdXNMaW5lKSA9PiB7XG5cdFx0XHRcdGlmIChwcmV2aW91c0xpbmUgIT0gbnVsbCkgdGhpcy5lZGl0b3IucmVtb3ZlTGluZUNsYXNzKHByZXZpb3VzTGluZSwgJ3dyYXAnLCAnZXJyb3ItbGluZScpO1xuXHRcdFx0XHRpZiAobGluZSAhPSBudWxsKSB0aGlzLmVkaXRvci5hZGRMaW5lQ2xhc3MobGluZSwgJ3dyYXAnLCAnZXJyb3ItbGluZScpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMub24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZWRpdG9yLnRvVGV4dEFyZWEoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBUT0RPIHRoaXMgaXMgYSBidWcuIG9uY3JlYXRlIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlXG5cdFx0XHQvLyB0aGUgY29tcG9uZW50IGlzIGFjdHVhbGx5IGluIHRoZSBET01cblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmVkaXRvci5yZWZyZXNoKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0bWV0aG9kczoge1xuXHRcdFx0Y3JlYXRlRWRpdG9yKCkge1xuXHRcdFx0XHRpZiAodGhpcy5lZGl0b3IpIHtcblx0XHRcdFx0XHR0aGlzLmVkaXRvci50b1RleHRBcmVhKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB7IG1vZGUsIGNvZGUsIHJlYWRvbmx5IH0gPSB0aGlzLmdldCgpO1xuXG5cdFx0XHRcdGNvbnN0IG1vZGVzID0ge1xuXHRcdFx0XHRcdGpzb246IHtcblx0XHRcdFx0XHRcdG5hbWU6ICdqYXZhc2NyaXB0Jyxcblx0XHRcdFx0XHRcdGpzb246IHRydWVcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGhhbmRsZWJhcnM6IHtcblx0XHRcdFx0XHRcdG5hbWU6ICdoYW5kbGViYXJzJyxcblx0XHRcdFx0XHRcdGJhc2U6ICd0ZXh0L2h0bWwnXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMuZWRpdG9yID0gd2luZG93LkNvZGVNaXJyb3IuZnJvbVRleHRBcmVhKHRoaXMucmVmcy5lZGl0b3IsIHtcblx0XHRcdFx0XHRsaW5lTnVtYmVyczogdHJ1ZSxcblx0XHRcdFx0XHRsaW5lV3JhcHBpbmc6IHRydWUsXG5cdFx0XHRcdFx0aW5kZW50V2l0aFRhYnM6IHRydWUsXG5cdFx0XHRcdFx0aW5kZW50VW5pdDogMixcblx0XHRcdFx0XHR0YWJTaXplOiAyLFxuXHRcdFx0XHRcdHZhbHVlOiBjb2RlLFxuXHRcdFx0XHRcdG1vZGU6IG1vZGVzW21vZGVdIHx8IHtcblx0XHRcdFx0XHRcdG5hbWU6IG1vZGVcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHJlYWRPbmx5OiByZWFkb25seVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLmVkaXRvci5vbignY2hhbmdlJywgaW5zdGFuY2UgPT4ge1xuXHRcdFx0XHRcdGlmICghdGhpcy51cGRhdGluZykge1xuXHRcdFx0XHRcdFx0dGhpcy51cGRhdGluZyA9IHRydWU7XG5cdFx0XHRcdFx0XHR0aGlzLnNldCh7IGNvZGU6IGluc3RhbmNlLmdldFZhbHVlKCkgfSk7XG5cdFx0XHRcdFx0XHR0aGlzLnVwZGF0aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cblx0XHRcdHJlc2l6ZSgpIHtcblx0XHRcdFx0dGhpcy5lZGl0b3IucmVmcmVzaCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbjwvc2NyaXB0PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5QkMscUJBQXFCLG1CQUFDLENBQUMsQUFDdEIsS0FBSyxDQUFFLElBQUksQ0FDWCxVQUFVLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQzFCLGFBQWEsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDN0IsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDbEIsQ0FBQyxBQUVELHdDQUFxQixDQUFDLEFBQVEsV0FBVyxBQUFFLENBQUMsQUFDM0MsYUFBYSxDQUFFLEdBQUcsQ0FDbEIsV0FBVyxDQUFFLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FDbkMsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsR0FBRyxDQUNoQixXQUFXLENBQUUsR0FBRyxDQUNoQixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQ1osVUFBVSxDQUFFLElBQUksQUFDakIsQ0FBQyxBQUVELE1BQU0sQUFBQyxZQUFZLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDMUIscUJBQXFCLG1CQUFDLENBQUMsQUFDdEIsTUFBTSxDQUFFLElBQUksQ0FDWixNQUFNLENBQUUsSUFBSSxBQUNiLENBQUMsQUFFRCx3Q0FBcUIsQ0FBQyxBQUFRLFdBQVcsQUFBRSxDQUFDLEFBQzNDLE1BQU0sQ0FBRSxJQUFJLEFBQ2IsQ0FBQyxBQUNGLENBQUMsQUFFRCx3Q0FBcUIsQ0FBQyxBQUFRLG1CQUFtQixBQUFFLENBQUMsQUFDbkQsWUFBWSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxBQUM3QixDQUFDLEFBRUQsUUFBUSxtQkFBQyxDQUFDLEFBQ1QsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxBQUNiLENBQUMsQUFFRCx3Q0FBcUIsQ0FBQyxRQUFRLG1CQUFDLENBQUMsQUFDL0IsTUFBTSxDQUFFLEdBQUcsQ0FDWCxJQUFJLENBQUUsR0FBRyxDQUNULFFBQVEsQ0FBRSxRQUFRLENBQ2xCLE9BQU8sQ0FBRSxFQUFFLEFBQ1osQ0FBQyxBQUVELHdDQUFxQixDQUFDLEFBQVEsVUFBVSxBQUFFLENBQUMsQUFDMUMsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsYUFBYSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUN0QyxDQUFDLEFBRUQsd0NBQXFCLENBQUMsQUFBUSxXQUFXLEFBQUUsQ0FBQyxBQUMzQyxnQkFBZ0IsQ0FBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxBQUNyQyxDQUFDIn0=*/"],"sourceRoot":""}]);

// exports


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_getLocationFromStack_js__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sourcemap_codec__ = __webpack_require__(50);
/* routes/repl/_Viewer.html generated by Svelte v1.49.0 */




let importCache = {};

function fetchImport(id, curl) {
	return new Promise((fulfil, reject) => {
		curl([`https://bundle.run/${id}`]).then(module => {
			importCache[id] = module;
			fulfil(module);
		}, err => {
			console.error(err.stack);
			reject(new Error(`Error loading ${id} from bundle.run`));
		});
	});
}

const namespaceSpecifier = /\*\s+as\s+(\w+)/;
const namedSpecifiers = /\{(.+)\}/;

function parseSpecifiers(specifiers) {
	specifiers = specifiers.trim();

	let match = namespaceSpecifier.exec(specifiers);
	if (match) {
		return {
			namespace: true,
			name: match[1]
		};
	}

	let names = [];

	specifiers = specifiers.replace(namedSpecifiers, (match, str) => {
		names = str.split(',').map(name => {
			const split = name.split('as');
			const exported = split[0].trim();
			const local = (split[1] || exported).trim();

			return { local, exported };
		});

		return '';
	});

	match = /\w+/.exec(specifiers);

	return {
		namespace: false,
		names,
		default: match ? match[0] : null
	};
}

var methods = {
	run() {
		this.set({ pending: false });
		this.createComponent();
	}
};

function oncreate() {
	let component;

	this.refs.child.addEventListener('load', () => {
		const iframe = this.refs.child;
		const body = iframe.contentDocument.body;
		const evalInIframe = iframe.contentWindow.eval;

		// intercept links, so that we can use #hashes inside the iframe
		body.addEventListener('click', event => {
			if (event.which !== 1) return;
			if (event.metaKey || event.ctrlKey || event.shiftKey) return;
			if (event.defaultPrevented) return;

			// ensure target is a link
			let el = event.target;
			while (el && el.nodeName !== 'A') el = el.parentNode;
			if (!el || el.nodeName !== 'A') return;

			if (el.hasAttribute('download') || el.getAttribute('rel') === 'external' || el.target) return;

			event.preventDefault();

			if (el.href.startsWith(top.location.href)) {
				const hash = el.href.replace(top.location.href, '');
				if (hash[0] === '#') {
					iframe.contentWindow.location.hash = hash;
					return;
				}
			}

			window.open(el.href, '_blank');
		});

		let promise = null;
		let observers = null;
		let updating = null;

		let toDestroy = null;

		const init = () => {
			const { bundle, bundleError } = this.get();
			if (bundleError) return;

			const imports = [];
			const pattern = /\bimport\s+(?:(.+)\s+from\s+)?[\'"]([^"\']+)["\']/g; // https://gist.github.com/pilwon/ff55634a29bb4456e0dd

			const missingImports = bundle.imports.filter(x => !importCache[x]);

			const ready = () => {
				// TODO this is very hacky — would be great if this information
				// was exposed by the compiler somehow
				if (/[^_]oncreate/.test(bundle.code)) {
					this.set({ pending: true });
				} else {
					this.set({ pending: false });
					this.createComponent();
				}
			};

			this.createComponent = () => {
				this.set({ error: null });

				if (toDestroy) {
					const styles = iframe.contentDocument.querySelectorAll('style');
					let i = styles.length;
					while (i--) styles[i].parentNode.removeChild(styles[i]);

					toDestroy.destroy();
					toDestroy = null;
				}

				bundle.imports.forEach(x => {
					const module = importCache[x];
					const name = bundle.importMap.get(x);

					iframe.contentWindow[name] = module;
				});

				const data = this.get('data');

				try {
					evalInIframe(`${bundle.code}
						document.body.innerHTML = '';
						window.location.hash = '';
						window._svelteTransitionManager = null;

						var component = new SvelteComponent({
							target: document.body,
							data: ${JSON.stringify(data)}
						});`);

					component = window.app = window.component = iframe.contentWindow.component;

					observers = Object.keys(data).map(key => {
						return component.observe(key, value => {
							if (updating) return;

							updating = true;
							this.fire('change', { key, value });
							updating = false;
						}, { init: false });
					});
				} catch (error) {
					// TODO show in UI
					component = null;
					observers = null;

					const loc = Object(__WEBPACK_IMPORTED_MODULE_1__utils_getLocationFromStack_js__["a" /* default */])(error.stack, bundle.map);
					if (loc) {
						error.filename = loc.source;
						error.loc = { line: loc.line, column: loc.column };
					}
					this.set({ error });
				}
			};

			let pendingImports = missingImports.length;
			this.set({ pendingImports });

			if (missingImports.length) {
				let cancelled = false;

				promise = Promise.all(
					missingImports.map(id => fetchImport(id, iframe.contentWindow.curl).then(module => {
						pendingImports -= 1;
						this.set({ pendingImports });
						return module;
					}))
				);
				promise.cancel = () => cancelled = true;

				promise
					.then(() => {
						if (cancelled) return;
						ready();
					})
					.catch(error => {
						if (cancelled) return;
						this.set({ error });
					});
			} else {
				ready();
			}
		}

		this.observe('bundle', bundle => {
			if (!bundle) return; // TODO can this ever happen?
			if (promise) promise.cancel();

			toDestroy = component;
			component = null;

			if (this.get('data') !== undefined) init();
		});

		this.observe('data', data => {
			try {
				if (observers) {
					observers.forEach(observer => observer.cancel());
				}

				if (component) {
					this.set({ error: null });
					updating = true;
					component.set(data);
					updating = false;

					observers = Object.keys(data).map(key => {
						return component.observe(key, value => {
							if (updating) return;

							updating = true;
							this.fire('change', { key, value });
							updating = false;
						}, { init: false });
					});
				} else {
					init();
				}
			} catch (error) {
				const loc = Object(__WEBPACK_IMPORTED_MODULE_1__utils_getLocationFromStack_js__["a" /* default */])(error.stack, this.get('bundle').map);
				if (loc) {
					error.filename = loc.source;
					error.loc = { line: loc.line, column: loc.column };
				}
				this.set({ error });
			}
		});

		this.observe('bundleError', error => {
			if (error) this.set({ error });
		});
	});
};

function encapsulateStyles(node) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(node, "svelte-1613618279", "");
}

function create_main_fragment(state, component) {
	var div, iframe, iframe_class_value, text_1, div_1;

	var current_block_type = select_block_type(state);
	var if_block = current_block_type && current_block_type(state, component);

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			iframe = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("iframe");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n");
			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			iframe = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "IFRAME", { class: true, srcdoc: true }, false);
			var iframe_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(iframe);

			iframe_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n\n");

			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_1);

			if (if_block) if_block.l(div_1_nodes);
			div_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			encapsulateStyles(iframe);
			iframe.className = iframe_class_value = state.error || state.pending || state.pendingImports ? "greyed-out" : "";
			iframe.srcdoc = "\n\t\t<!doctype html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<link rel=\"stylesheet\" href=\"/repl-viewer.css\">\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<script src=\"/curl.js\"></script>\n\t\t\t\t<script>curl.config({ dontAddFileExt: /./ });</script>\n\t\t\t</body>\n\t\t</html>\n\t";
			div.className = "iframe-container";
			encapsulateStyles(div_1);
			div_1.className = "overlay";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(iframe, div);
			component.refs.child = iframe;
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(text_1, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div_1, target, anchor);
			if (if_block) if_block.m(div_1, null);
		},

		p: function update(changed, state) {
			if ((changed.error || changed.pending || changed.pendingImports) && iframe_class_value !== (iframe_class_value = state.error || state.pending || state.pendingImports ? "greyed-out" : "")) {
				iframe.className = iframe_class_value;
			}

			if (current_block_type === (current_block_type = select_block_type(state)) && if_block) {
				if_block.p(changed, state);
			} else {
				if (if_block) {
					if_block.u();
					if_block.d();
				}
				if_block = current_block_type && current_block_type(state, component);
				if (if_block) if_block.c();
				if (if_block) if_block.m(div_1, null);
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(text_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div_1);
			if (if_block) if_block.u();
		},

		d: function destroy() {
			if (component.refs.child === iframe) component.refs.child = null;
			if (if_block) if_block.d();
		}
	};
}

// (21:5) {{#if error.filename}}
function create_if_block_2(state, component) {
	var span, text_value = state.error.filename, text;

	function click_handler(event) {
		var state = component.get();
		component.fire("navigate", state.error.filename);
	}

	return {
		c: function create() {
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("span");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_value);
			this.h();
		},

		l: function claim(nodes) {
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "SPAN", { class: true }, false);
			var span_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(span);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(span_nodes, text_value);
			span_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			span.className = "filename";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(span, "click", click_handler);
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(span, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, span);
		},

		p: function update(changed, state) {
			if ((changed.error) && text_value !== (text_value = state.error.filename)) {
				text.data = text_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(span);
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(span, "click", click_handler);
		}
	};
}

// (19:3) {{#if error.loc}}
function create_if_block_1(state, component) {
	var strong, text, text_1_value = state.error.loc.line, text_1, text_2, text_3_value = state.error.loc.column, text_3, text_4;

	var if_block = (state.error.filename) && create_if_block_2(state, component);

	return {
		c: function create() {
			strong = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("strong");
			if (if_block) if_block.c();
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t\t\t(");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_1_value);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(":");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_3_value);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(")");
		},

		l: function claim(nodes) {
			strong = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "STRONG", {}, false);
			var strong_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(strong);

			if (if_block) if_block.l(strong_nodes);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, "\n\n\t\t\t\t\t(");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, text_1_value);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, ":");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, text_3_value);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(strong_nodes, ")");
			strong_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(strong, target, anchor);
			if (if_block) if_block.m(strong, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, strong);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, strong);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_2, strong);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_3, strong);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_4, strong);
		},

		p: function update(changed, state) {
			if (state.error.filename) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block_2(state, component);
					if_block.c();
					if_block.m(strong, text);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}

			if ((changed.error) && text_1_value !== (text_1_value = state.error.loc.line)) {
				text_1.data = text_1_value;
			}

			if ((changed.error) && text_3_value !== (text_3_value = state.error.loc.column)) {
				text_3.data = text_3_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(strong);
			if (if_block) if_block.u();
		},

		d: function destroy() {
			if (if_block) if_block.d();
		}
	};
}

// (17:1) {{#if error}}
function create_if_block(state, component) {
	var p, text, text_1_value = state.error.message, text_1;

	var if_block = (state.error.loc) && create_if_block_1(state, component);

	return {
		c: function create() {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("p");
			if (if_block) if_block.c();
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t\t\t");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_1_value);
			this.h();
		},

		l: function claim(nodes) {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "P", { class: true }, false);
			var p_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(p);

			if (if_block) if_block.l(p_nodes);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, "\n\n\t\t\t");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, text_1_value);
			p_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(p);
			p.className = "error message";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(p, target, anchor);
			if (if_block) if_block.m(p, null);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, p);
		},

		p: function update(changed, state) {
			if (state.error.loc) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block_1(state, component);
					if_block.c();
					if_block.m(p, text);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}

			if ((changed.error) && text_1_value !== (text_1_value = state.error.message)) {
				text_1.data = text_1_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(p);
			if (if_block) if_block.u();
		},

		d: function destroy() {
			if (if_block) if_block.d();
		}
	};
}

// (31:19) 
function create_if_block_3(state, component) {
	var div, span, text;

	function click_handler(event) {
		component.run();
	}

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("span");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Click to run");
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "SPAN", {}, false);
			var span_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(span);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(span_nodes, "Click to run");
			span_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			encapsulateStyles(span);
			div.className = "pending";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(div, "click", click_handler);
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(span, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, span);
		},

		p: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */],

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(div, "click", click_handler);
		}
	};
}

// (35:26) 
function create_if_block_4(state, component) {
	var p, text, text_1, text_2, text_3_value = state.pendingImports === 1 ? 'dependency' : 'dependencies', text_3, text_4;

	return {
		c: function create() {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("p");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("loading ");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(state.pendingImports);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(" ");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_3_value);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(" from https://bundle.run");
			this.h();
		},

		l: function claim(nodes) {
			p = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "P", { class: true }, false);
			var p_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(p);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, "loading ");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, state.pendingImports);
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, " ");
			text_3 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, text_3_value);
			text_4 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(p_nodes, " from https://bundle.run");
			p_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(p);
			p.className = "info message";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(p, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_2, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_3, p);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_4, p);
		},

		p: function update(changed, state) {
			if (changed.pendingImports) {
				text_1.data = state.pendingImports;
			}

			if ((changed.pendingImports) && text_3_value !== (text_3_value = state.pendingImports === 1 ? 'dependency' : 'dependencies')) {
				text_3.data = text_3_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(p);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

function select_block_type(state) {
	if (state.error) return create_if_block;
	if (state.pending) return create_if_block_3;
	if (state.pendingImports) return create_if_block_4;
	return null;
}

function Index(options) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["s" /* init */])(this, options);
	this.refs = {};
	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, options.data);

	var _oncreate = oncreate.bind(this);

	if (!options.root) {
		this._oncreate = [_oncreate];
	} else {
	 	this.root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		var nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		this._fragment.m(options.target, options.anchor || null);

		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._oncreate);
	}
}

Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(Index.prototype, methods, __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["w" /* proto */]);
/* harmony default export */ __webpack_exports__["a"] = (Index);
__webpack_require__(87);


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getLocationFromStack;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sourcemap_codec__ = __webpack_require__(50);


function getLocationFromStack(stack, map) {
	if (!stack) return;
	const last = stack.split('\n')[1];
	const match = /<anonymous>:(\d+):(\d+)\)$/.exec(last);

	if (!match) return null;

	const line = +match[1];
	const column = +match[2];

	return trace({ line, column }, map);
}

function trace(loc, map) {
	const mappings = Object(__WEBPACK_IMPORTED_MODULE_0_sourcemap_codec__["a" /* decode */])(map.mappings);
	const segments = mappings[loc.line - 1];

	for (let i = 0; i < segments.length; i += 1) {
		const segment = segments[i];
		if (segment[0] === loc.column) {
			const [, sourceIndex, line, column] = segment;
			const source = map.sources[sourceIndex].slice(2);

			return { source, line: line + 1, column };
		}
	}

	return null;
}


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(88);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(9)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817TepnDlgKTTzJ.css", function() {
			var newContent = require("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817TepnDlgKTTzJ.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(8)(true);
// imports


// module
exports.push([module.i, ".iframe-container[svelte-1613618279]{border-top:1px solid #ccc;background-color:white}iframe[svelte-1613618279]{width:100%;height:calc(100vh - 3em);border:none;display:block}@media(min-width: 768px){.iframe-container[svelte-1613618279]{border:none;height:100%}iframe[svelte-1613618279]{height:100%}}.greyed-out[svelte-1613618279]{filter:grayscale(100%) blur(2px);opacity:0.15}.overlay[svelte-1613618279]{position:absolute;top:0;width:100%;height:100%;padding:1em;pointer-events:none}.overlay[svelte-1613618279] p[svelte-1613618279]{pointer-events:all}.pending[svelte-1613618279]{position:absolute;width:100%;height:100%;text-align:center;top:0;left:0;pointer-events:all}.pending[svelte-1613618279] span[svelte-1613618279]{position:absolute;top:calc(50% - 0.5em);line-height:1;left:0;text-align:center;width:100%;font-size:2em}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/", "", {"version":3,"sources":["/Users/208311/Development/SVELTE/svelte.technology/routes/repl/_Viewer.html","/private/var/folders/5_/1988587d0t3_w4n0f1g4ydhwn85510/T/tmp-74817TepnDlgKTTzJ.css"],"names":[],"mappings":"AAwCC,qCAAmB,0BAElB,sBAAuB,CACvB,0BAEO,WAEP,yBACA,YACA,aAAc,CACd,yBAE0B,qCACP,YAElB,WAAY,CACZ,0BAEO,WACK,CACZ,CACD,+BAEY,iCAEZ,YAAa,CACb,4BAES,kBAET,MACA,WACA,YACA,YACA,mBAAoB,CACpB,iDAEW,kBACQ,CACnB,4BAES,kBAET,WACA,YACA,kBACA,MACA,OACA,kBAAmB,CACnB,oDAEc,kBAEd,sBACA,cACA,OACA,kBACA,WACA,aAAc,CACd;AClGF,0udAA0ud","file":"tmp-74817TepnDlgKTTzJ.css","sourcesContent":["<div class='iframe-container'>\n\t<iframe ref:child class='{{error || pending || pendingImports ? \"greyed-out\" : \"\"}}' srcdoc='\n\t\t<!doctype html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<link rel=\"stylesheet\" href=\"/repl-viewer.css\">\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<script src=\"/curl.js\"></script>\n\t\t\t\t<script>curl.config({ dontAddFileExt: /./ });</script>\n\t\t\t</body>\n\t\t</html>\n\t'></iframe>\n</div>\n\n<div class='overlay'>\n\t{{#if error}}\n\t\t<p class='error message'>\n\t\t\t{{#if error.loc}}\n\t\t\t\t<strong>\n\t\t\t\t\t{{#if error.filename}}\n\t\t\t\t\t\t<span class='filename' on:click='fire(\"navigate\", error.filename)'>{{error.filename}}</span>\n\t\t\t\t\t{{/if}}\n\n\t\t\t\t\t({{error.loc.line}}:{{error.loc.column}})\n\t\t\t\t</strong>\n\t\t\t{{/if}}\n\n\t\t\t{{error.message}}\n\t\t</p>\n\t{{elseif pending}}\n\t\t<div class='pending' on:click='run()'>\n\t\t\t<span>Click to run</span>\n\t\t</div>\n\t{{elseif pendingImports}}\n\t\t<p class='info message'>loading {{pendingImports}} {{pendingImports === 1 ? 'dependency' : 'dependencies'}} from https://bundle.run</p>\n\t{{/if}}\n</div>\n\n<style>\n\t.iframe-container {\n\t\tborder-top: 1px solid #ccc;\n\t\tbackground-color: white;\n\t}\n\n\tiframe {\n\t\twidth: 100%;\n\t\theight: calc(100vh - 3em);\n\t\tborder: none;\n\t\tdisplay: block;\n\t}\n\n\t@media (min-width: 768px) {\n\t\t.iframe-container {\n\t\t\tborder: none;\n\t\t\theight: 100%;\n\t\t}\n\n\t\tiframe {\n\t\t\theight: 100%;\n\t\t}\n\t}\n\n\t.greyed-out {\n\t\tfilter: grayscale(100%) blur(2px);\n\t\topacity: 0.15;\n\t}\n\n\t.overlay {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tpadding: 1em;\n\t\tpointer-events: none;\n\t}\n\n\t.overlay p {\n\t\tpointer-events: all;\n\t}\n\n\t.pending {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\ttext-align: center;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tpointer-events: all;\n\t}\n\n\t.pending span {\n\t\tposition: absolute;\n\t\ttop: calc(50% - 0.5em);\n\t\tline-height: 1;\n\t\tleft: 0;\n\t\ttext-align: center;\n\t\twidth: 100%;\n\t\tfont-size: 2em;\n\t}\n</style>\n\n<script>\n\timport getLocationFromStack from './_utils/getLocationFromStack.js';\n\timport { decode } from 'sourcemap-codec';\n\n\tlet importCache = {};\n\n\tfunction fetchImport(id, curl) {\n\t\treturn new Promise((fulfil, reject) => {\n\t\t\tcurl([`https://bundle.run/${id}`]).then(module => {\n\t\t\t\timportCache[id] = module;\n\t\t\t\tfulfil(module);\n\t\t\t}, err => {\n\t\t\t\tconsole.error(err.stack);\n\t\t\t\treject(new Error(`Error loading ${id} from bundle.run`));\n\t\t\t});\n\t\t});\n\t}\n\n\tconst namespaceSpecifier = /\\*\\s+as\\s+(\\w+)/;\n\tconst namedSpecifiers = /\\{(.+)\\}/;\n\n\tfunction parseSpecifiers(specifiers) {\n\t\tspecifiers = specifiers.trim();\n\n\t\tlet match = namespaceSpecifier.exec(specifiers);\n\t\tif (match) {\n\t\t\treturn {\n\t\t\t\tnamespace: true,\n\t\t\t\tname: match[1]\n\t\t\t};\n\t\t}\n\n\t\tlet names = [];\n\n\t\tspecifiers = specifiers.replace(namedSpecifiers, (match, str) => {\n\t\t\tnames = str.split(',').map(name => {\n\t\t\t\tconst split = name.split('as');\n\t\t\t\tconst exported = split[0].trim();\n\t\t\t\tconst local = (split[1] || exported).trim();\n\n\t\t\t\treturn { local, exported };\n\t\t\t});\n\n\t\t\treturn '';\n\t\t});\n\n\t\tmatch = /\\w+/.exec(specifiers);\n\n\t\treturn {\n\t\t\tnamespace: false,\n\t\t\tnames,\n\t\t\tdefault: match ? match[0] : null\n\t\t};\n\t}\n\n\texport default {\n\t\toncreate() {\n\t\t\tlet component;\n\n\t\t\tthis.refs.child.addEventListener('load', () => {\n\t\t\t\tconst iframe = this.refs.child;\n\t\t\t\tconst body = iframe.contentDocument.body;\n\t\t\t\tconst evalInIframe = iframe.contentWindow.eval;\n\n\t\t\t\t// intercept links, so that we can use #hashes inside the iframe\n\t\t\t\tbody.addEventListener('click', event => {\n\t\t\t\t\tif (event.which !== 1) return;\n\t\t\t\t\tif (event.metaKey || event.ctrlKey || event.shiftKey) return;\n\t\t\t\t\tif (event.defaultPrevented) return;\n\n\t\t\t\t\t// ensure target is a link\n\t\t\t\t\tlet el = event.target;\n\t\t\t\t\twhile (el && el.nodeName !== 'A') el = el.parentNode;\n\t\t\t\t\tif (!el || el.nodeName !== 'A') return;\n\n\t\t\t\t\tif (el.hasAttribute('download') || el.getAttribute('rel') === 'external' || el.target) return;\n\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tif (el.href.startsWith(top.location.href)) {\n\t\t\t\t\t\tconst hash = el.href.replace(top.location.href, '');\n\t\t\t\t\t\tif (hash[0] === '#') {\n\t\t\t\t\t\t\tiframe.contentWindow.location.hash = hash;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\twindow.open(el.href, '_blank');\n\t\t\t\t});\n\n\t\t\t\tlet promise = null;\n\t\t\t\tlet observers = null;\n\t\t\t\tlet updating = null;\n\n\t\t\t\tlet toDestroy = null;\n\n\t\t\t\tconst init = () => {\n\t\t\t\t\tconst { bundle, bundleError } = this.get();\n\t\t\t\t\tif (bundleError) return;\n\n\t\t\t\t\tconst imports = [];\n\t\t\t\t\tconst pattern = /\\bimport\\s+(?:(.+)\\s+from\\s+)?[\\'\"]([^\"\\']+)[\"\\']/g; // https://gist.github.com/pilwon/ff55634a29bb4456e0dd\n\n\t\t\t\t\tconst missingImports = bundle.imports.filter(x => !importCache[x]);\n\n\t\t\t\t\tconst ready = () => {\n\t\t\t\t\t\t// TODO this is very hacky — would be great if this information\n\t\t\t\t\t\t// was exposed by the compiler somehow\n\t\t\t\t\t\tif (/[^_]oncreate/.test(bundle.code)) {\n\t\t\t\t\t\t\tthis.set({ pending: true });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.set({ pending: false });\n\t\t\t\t\t\t\tthis.createComponent();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.createComponent = () => {\n\t\t\t\t\t\tthis.set({ error: null });\n\n\t\t\t\t\t\tif (toDestroy) {\n\t\t\t\t\t\t\tconst styles = iframe.contentDocument.querySelectorAll('style');\n\t\t\t\t\t\t\tlet i = styles.length;\n\t\t\t\t\t\t\twhile (i--) styles[i].parentNode.removeChild(styles[i]);\n\n\t\t\t\t\t\t\ttoDestroy.destroy();\n\t\t\t\t\t\t\ttoDestroy = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbundle.imports.forEach(x => {\n\t\t\t\t\t\t\tconst module = importCache[x];\n\t\t\t\t\t\t\tconst name = bundle.importMap.get(x);\n\n\t\t\t\t\t\t\tiframe.contentWindow[name] = module;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst data = this.get('data');\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tevalInIframe(`${bundle.code}\n\t\t\t\t\t\t\t\tdocument.body.innerHTML = '';\n\t\t\t\t\t\t\t\twindow.location.hash = '';\n\t\t\t\t\t\t\t\twindow._svelteTransitionManager = null;\n\n\t\t\t\t\t\t\t\tvar component = new SvelteComponent({\n\t\t\t\t\t\t\t\t\ttarget: document.body,\n\t\t\t\t\t\t\t\t\tdata: ${JSON.stringify(data)}\n\t\t\t\t\t\t\t\t});`);\n\n\t\t\t\t\t\t\tcomponent = window.app = window.component = iframe.contentWindow.component;\n\n\t\t\t\t\t\t\tobservers = Object.keys(data).map(key => {\n\t\t\t\t\t\t\t\treturn component.observe(key, value => {\n\t\t\t\t\t\t\t\t\tif (updating) return;\n\n\t\t\t\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\t\t\t\tthis.fire('change', { key, value });\n\t\t\t\t\t\t\t\t\tupdating = false;\n\t\t\t\t\t\t\t\t}, { init: false });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// TODO show in UI\n\t\t\t\t\t\t\tcomponent = null;\n\t\t\t\t\t\t\tobservers = null;\n\n\t\t\t\t\t\t\tconst loc = getLocationFromStack(error.stack, bundle.map);\n\t\t\t\t\t\t\tif (loc) {\n\t\t\t\t\t\t\t\terror.filename = loc.source;\n\t\t\t\t\t\t\t\terror.loc = { line: loc.line, column: loc.column };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.set({ error });\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tlet pendingImports = missingImports.length;\n\t\t\t\t\tthis.set({ pendingImports });\n\n\t\t\t\t\tif (missingImports.length) {\n\t\t\t\t\t\tlet cancelled = false;\n\n\t\t\t\t\t\tpromise = Promise.all(\n\t\t\t\t\t\t\tmissingImports.map(id => fetchImport(id, iframe.contentWindow.curl).then(module => {\n\t\t\t\t\t\t\t\tpendingImports -= 1;\n\t\t\t\t\t\t\t\tthis.set({ pendingImports });\n\t\t\t\t\t\t\t\treturn module;\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tpromise.cancel = () => cancelled = true;\n\n\t\t\t\t\t\tpromise\n\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\tif (cancelled) return;\n\t\t\t\t\t\t\t\tready();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\t\tif (cancelled) return;\n\t\t\t\t\t\t\t\tthis.set({ error });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tready();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.observe('bundle', bundle => {\n\t\t\t\t\tif (!bundle) return; // TODO can this ever happen?\n\t\t\t\t\tif (promise) promise.cancel();\n\n\t\t\t\t\ttoDestroy = component;\n\t\t\t\t\tcomponent = null;\n\n\t\t\t\t\tif (this.get('data') !== undefined) init();\n\t\t\t\t});\n\n\t\t\t\tthis.observe('data', data => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (observers) {\n\t\t\t\t\t\t\tobservers.forEach(observer => observer.cancel());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (component) {\n\t\t\t\t\t\t\tthis.set({ error: null });\n\t\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\t\tcomponent.set(data);\n\t\t\t\t\t\t\tupdating = false;\n\n\t\t\t\t\t\t\tobservers = Object.keys(data).map(key => {\n\t\t\t\t\t\t\t\treturn component.observe(key, value => {\n\t\t\t\t\t\t\t\t\tif (updating) return;\n\n\t\t\t\t\t\t\t\t\tupdating = true;\n\t\t\t\t\t\t\t\t\tthis.fire('change', { key, value });\n\t\t\t\t\t\t\t\t\tupdating = false;\n\t\t\t\t\t\t\t\t}, { init: false });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinit();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconst loc = getLocationFromStack(error.stack, this.get('bundle').map);\n\t\t\t\t\t\tif (loc) {\n\t\t\t\t\t\t\terror.filename = loc.source;\n\t\t\t\t\t\t\terror.loc = { line: loc.line, column: loc.column };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.set({ error });\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.observe('bundleError', error => {\n\t\t\t\t\tif (error) this.set({ error });\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\tmethods: {\n\t\t\trun() {\n\t\t\t\tthis.set({ pending: false });\n\t\t\t\tthis.createComponent();\n\t\t\t}\n\t\t}\n\t};\n</script>\n",".iframe-container[svelte-1613618279]{border-top:1px solid #ccc;background-color:white}iframe[svelte-1613618279]{width:100%;height:calc(100vh - 3em);border:none;display:block}@media(min-width: 768px){.iframe-container[svelte-1613618279]{border:none;height:100%}iframe[svelte-1613618279]{height:100%}}.greyed-out[svelte-1613618279]{filter:grayscale(100%) blur(2px);opacity:0.15}.overlay[svelte-1613618279]{position:absolute;top:0;width:100%;height:100%;padding:1em;pointer-events:none}.overlay[svelte-1613618279] p[svelte-1613618279]{pointer-events:all}.pending[svelte-1613618279]{position:absolute;width:100%;height:100%;text-align:center;top:0;left:0;pointer-events:all}.pending[svelte-1613618279] span[svelte-1613618279]{position:absolute;top:calc(50% - 0.5em);line-height:1;left:0;text-align:center;width:100%;font-size:2em}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/"],"sourceRoot":""}]);

// exports


/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__ = __webpack_require__(7);
/* routes/repl/_ComponentSelector.html generated by Svelte v1.49.0 */


function keyEvent(code) {
	return function (node, callback) {
		node.addEventListener('keydown', handleKeydown);

		function handleKeydown(event) {
			if (event.keyCode === code) {
				callback.call(this, event);
			}
		}

		return {
			teardown() {
				node.removeEventListener('keydown', handleKeydown);
			}
		};
	}
}

var enter = keyEvent(13);

var methods = {
	selectComponent(component, selectedComponent) {
		if (selectedComponent != component) {
			selectedComponent.edit = false;
		}
		this.set({ selectedComponent: component })
	},
	editTab(component, selectedComponent) {
		if (selectedComponent == component) {
			selectedComponent.edit = true;
			this.set({ selectedComponent });
			// this.refs.name.focus();
		}
	},
	closeEdit(selectedComponent) {
		const match = /(.+)\.(html|js)$/.exec(selectedComponent.name);
		selectedComponent.name = match ? match[1] : selectedComponent.name;
		if (match && match[2]) selectedComponent.type = match[2];
		selectedComponent.edit = false;
		this.set({ selectedComponent });
	},
	remove(component) {
		let result = confirm(`Are you sure you want to delete ${component.name}.${component.type}?`);
		if (result) {
			this.fire('remove');
			let components = this.get('components');
			this.set({ selectedComponent: components[components.length - 1] });
		}
	},
	selectInput(input) {
		setTimeout(() => {
			input.select();
		});
	},
	focusLast() {

	}
};

function encapsulateStyles(node) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(node, "svelte-3809585029", "");
}

function create_main_fragment(state, component_1) {
	var div, ul, text_1, div_1, button, span, text_2;

	var components = state.components;

	var each_blocks = [];

	for (var i = 0; i < components.length; i += 1) {
		each_blocks[i] = create_each_block(state, components, components[i], i, component_1);
	}

	function dblclick_handler_1(event) {
		component_1.fire("create");
	}

	function click_handler_3(event) {
		component_1.fire("create");
	}

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			ul = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("ul");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n");
			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			button = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("button");
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("span");
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("+");
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			ul = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "UL", { class: true }, false);
			var ul_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n\n");

			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_1);

			button = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_1_nodes, "BUTTON", { class: true, title: true }, false);
			var button_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(button);

			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(button_nodes, "SPAN", {}, false);
			var span_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(span);

			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(span_nodes, "+");
			span_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			button_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			encapsulateStyles(ul);
			ul.className = "file-tabs";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(ul, "dblclick", dblclick_handler_1);
			div.className = "panel-header";
			encapsulateStyles(div_1);
			encapsulateStyles(button);
			encapsulateStyles(span);
			button.className = "add-new";
			button.title = "add new component";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(button, "click", click_handler_3);
			div_1.className = "btn-action-container";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(ul, div);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			component_1.refs.files = ul;
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(text_1, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div_1, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(button, div_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(span, button);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_2, span);
		},

		p: function update(changed, state) {
			var components = state.components;

			if (changed.components || changed.selectedComponent) {
				for (var i = 0; i < components.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, components, components[i], i);
					} else {
						each_blocks[i] = create_each_block(state, components, components[i], i, component_1);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = components.length;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}

			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(text_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div_1);
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["m" /* destroyEach */])(each_blocks);

			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(ul, "dblclick", dblclick_handler_1);
			if (component_1.refs.files === ul) component_1.refs.files = null;
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(button, "click", click_handler_3);
		}
	};
}

// (3:2) {{#each components as component}}
function create_each_block(state, components, component, component_index, component_1) {
	var li, button, button_class_value, li_id_value, li_class_value, li_data_name_value;

	var current_block_type = select_block_type_1(state, components, component, component_index);
	var if_block = current_block_type(state, components, component, component_index, component_1);

	return {
		c: function create() {
			li = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("li");
			button = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("button");
			if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			li = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "LI", { id: true, class: true, "data-name": true }, false);
			var li_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(li);

			button = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(li_nodes, "BUTTON", { class: true }, false);
			var button_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(button);

			if_block.l(button_nodes);
			button_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			li_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(li);
			encapsulateStyles(button);
			button.className = button_class_value = "file-tabs-item " + (component.edit ? "edit-mode" : "");
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(button, "click", click_handler_2);

			button._svelte = {
				component: component_1,
				components: components,
				component_index: component_index
			};

			li.id = li_id_value = component.name;
			li.className = li_class_value = state.selectedComponent == component ? "active" : "";
			li.dataset.name = li_data_name_value = component.name;
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(li, "dblclick", dblclick_handler);
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(li, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(button, li);
			if_block.m(button, null);
		},

		p: function update(changed, state, components, component, component_index) {
			if (current_block_type === (current_block_type = select_block_type_1(state, components, component, component_index)) && if_block) {
				if_block.p(changed, state, components, component, component_index);
			} else {
				if_block.u();
				if_block.d();
				if_block = current_block_type(state, components, component, component_index, component_1);
				if_block.c();
				if_block.m(button, null);
			}

			if ((changed.components) && button_class_value !== (button_class_value = "file-tabs-item " + (component.edit ? "edit-mode" : ""))) {
				button.className = button_class_value;
			}

			button._svelte.components = components;
			button._svelte.component_index = component_index;

			if ((changed.components) && li_id_value !== (li_id_value = component.name)) {
				li.id = li_id_value;
			}

			if ((changed.selectedComponent || changed.components) && li_class_value !== (li_class_value = state.selectedComponent == component ? "active" : "")) {
				li.className = li_class_value;
			}

			if ((changed.components) && li_data_name_value !== (li_data_name_value = component.name)) {
				li.dataset.name = li_data_name_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(li);
			if_block.u();
		},

		d: function destroy() {
			if_block.d();
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(button, "click", click_handler_2);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(li, "dblclick", dblclick_handler);
		}
	};
}

// (11:5) {{#if component.edit}}
function create_if_block_2(state, components, component, component_index, component_1) {
	var div, input, input_updating = false, enter_handler;

	function input_input_handler() {
		var context = input._svelte;
		var state = component_1.get();
		input_updating = true;
		context.components[context.component_index].name = input.value;
		component_1.set({ components: state.components });
		input_updating = false;
	}

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			input = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("input");
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			input = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "INPUT", { autofocus: true }, false);
			var input_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(input);

			input_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			encapsulateStyles(input);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(input, "input", input_input_handler);
			input.autofocus = true;
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(input, "focus", focus_handler);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(input, "blur", blur_handler);

			enter_handler = enter.call(component_1, input, function(event) {
				var component_1 = input._svelte.component;
				this.blur();
			});

			input._svelte = {
				component: component_1,
				components: components,
				component_index: component_index
			};

			div.className = "input-wrapper";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(input, div);
			component_1.refs.name = input;

			input.value = component.name;

			input.focus();
		},

		p: function update(changed, state, components, component, component_index) {
			if (!input_updating) input.value = component.name;

			input._svelte.components = components;
			input._svelte.component_index = component_index;
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(input, "input", input_input_handler);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(input, "focus", focus_handler);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(input, "blur", blur_handler);
			enter_handler.teardown();
			if (component_1.refs.name === input) component_1.refs.name = null;
		}
	};
}

// (15:5) {{else}}
function create_if_block_3(state, components, component, component_index, component_1) {
	var div, text_value = component.name, text, text_1, text_2_value = component.type, text_2;

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_value);
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(".");
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_2_value);
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true, title: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, text_value);
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, ".");
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, text_2_value);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			div.className = "editable";
			div.title = "edit component name";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(div, "click", click_handler);

			div._svelte = {
				component: component_1,
				components: components,
				component_index: component_index
			};
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_2, div);
		},

		p: function update(changed, state, components, component, component_index) {
			if ((changed.components) && text_value !== (text_value = component.name)) {
				text.data = text_value;
			}

			if ((changed.components) && text_2_value !== (text_2_value = component.type)) {
				text_2.data = text_2_value;
			}

			div._svelte.components = components;
			div._svelte.component_index = component_index;
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(div, "click", click_handler);
		}
	};
}

// (6:4) {{#if component.name == 'App'}}
function create_if_block(state, components, component, component_index, component_1) {
	var div, text;

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("App.html");
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, "App.html");
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			div.className = "uneditable";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, div);
		},

		p: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */],

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

// (10:4) {{else}}
function create_if_block_1(state, components, component, component_index, component_1) {
	var text, span, text_1;

	var current_block_type = select_block_type(state, components, component, component_index);
	var if_block = current_block_type(state, components, component, component_index, component_1);

	return {
		c: function create() {
			if_block.c();
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\t\t\t\t\t");
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("span");
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("×");
			this.h();
		},

		l: function claim(nodes) {
			if_block.l(nodes);
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(nodes, "\n\t\t\t\t\t");

			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "SPAN", { class: true }, false);
			var span_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(span);

			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(span_nodes, "×");
			span_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(span);
			span.className = "remove";
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(span, "click", click_handler_1);

			span._svelte = {
				component: component_1,
				components: components,
				component_index: component_index
			};
		},

		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(text, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(span, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, span);
		},

		p: function update(changed, state, components, component, component_index) {
			if (current_block_type === (current_block_type = select_block_type(state, components, component, component_index)) && if_block) {
				if_block.p(changed, state, components, component, component_index);
			} else {
				if_block.u();
				if_block.d();
				if_block = current_block_type(state, components, component, component_index, component_1);
				if_block.c();
				if_block.m(text.parentNode, text);
			}

			span._svelte.components = components;
			span._svelte.component_index = component_index;
		},

		u: function unmount() {
			if_block.u();
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(text);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(span);
		},

		d: function destroy() {
			if_block.d();
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(span, "click", click_handler_1);
		}
	};
}

function focus_handler(event) {
	var component_1 = this._svelte.component;
	component_1.selectInput(this);
}

function blur_handler(event) {
	var component_1 = this._svelte.component;
	var state = component_1.get();
	component_1.closeEdit(state.selectedComponent);
}

function click_handler(event) {
	var component_1 = this._svelte.component;
	var components = this._svelte.components, component_index = this._svelte.component_index, component = components[component_index];
	var state = component_1.get();
	component_1.editTab(component, state.selectedComponent);
}

function select_block_type(state, components, component, component_index) {
	if (component.edit) return create_if_block_2;
	return create_if_block_3;
}

function click_handler_1(event) {
	var component_1 = this._svelte.component;
	var components = this._svelte.components, component_index = this._svelte.component_index, component = components[component_index];
	component_1.remove(component);
}

function select_block_type_1(state, components, component, component_index) {
	if (component.name == 'App') return create_if_block;
	return create_if_block_1;
}

function click_handler_2(event) {
	var component_1 = this._svelte.component;
	var components = this._svelte.components, component_index = this._svelte.component_index, component = components[component_index];
	var state = component_1.get();
	component_1.selectComponent(component, state.selectedComponent);
}

function dblclick_handler(event) {
	event.stopPropagation();
}

function Index(options) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["s" /* init */])(this, options);
	this.refs = {};
	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, options.data);

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		var nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		this._fragment.m(options.target, options.anchor || null);
	}
}

Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(Index.prototype, methods, __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["w" /* proto */]);
/* harmony default export */ __webpack_exports__["a"] = (Index);
__webpack_require__(90);


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(91);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(9)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817qOSr9SRabREE.css", function() {
			var newContent = require("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817qOSr9SRabREE.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(8)(true);
// imports


// module
exports.push([module.i, ".module-name[svelte-3809585029]{position:relative;display:block}.panel-header[svelte-3809585029]{padding:0 40px 0.5em 0}button[svelte-3809585029]{display:block;float:right;padding:calc(0.5em - 1px)}.dropdown[svelte-3809585029]{position:relative;display:block;float:left;padding:0 2em 0 0}.dropdown[svelte-3809585029]::after{content:'\\25BC';position:absolute;right:1rem;top:0.55rem;font-size:0.8em;color:#999;pointer-events:none}.input-wrapper[svelte-3809585029]{position:relative;display:block;float:left;line-height:1}.input-wrapper[svelte-3809585029] input[svelte-3809585029]{width:100%;font-size:16px;font-family:Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";border:none;color:#aa1e1e;padding:4px 10px;outline:none}.widther[svelte-3809585029]{display:block;font-family:inherit;font-size:inherit;border:1px solid #eee;padding:calc(0.5em - 1px) 0.25em;line-height:1}.file-extension[svelte-3809585029]{display:inline-block;padding:calc(0.5em - 1px) 0;color:#999;left:-0.2em;pointer-events:none}.file-tabs[svelte-3809585029]{border:none;padding-left:0;margin:0;list-style-type:none;white-space:nowrap;overflow-x:auto;overflow-y:hidden}.file-tabs[svelte-3809585029]>li[svelte-3809585029]{display:inline-block;float:none;margin-bottom:0;margin:0 0.5em 0 0;vertical-align:top}.file-tabs[svelte-3809585029] li.active[svelte-3809585029]{background-color:#fff}.file-tabs[svelte-3809585029] li.active button[svelte-3809585029]{border-bottom:1px solid #666}button.file-tabs-item[svelte-3809585029]{float:none;border-bottom:1px solid #eee;border-radius:0;color:#333;position:relative;display:block;padding:0.4em 0 0 0;margin:0;height:2.4em;box-sizing:border-box;line-height:1.4;font-weight:300}.edit-mode[svelte-3809585029]{padding-bottom:8px;padding-top:8px}.file-tabs-input[svelte-3809585029]{padding:10px 15px}.editable[svelte-3809585029],.uneditable[svelte-3809585029]{display:inline-block;margin-right:4px;padding:0 0.7em 0 0.5em;position:relative}.uneditable[svelte-3809585029]{padding-left:1em}.remove[svelte-3809585029]{position:absolute;display:none;right:0;width:20px;text-align:right;padding:0.7em 0 0.5em 0.5em;top:0}li.active[svelte-3809585029] .editable[svelte-3809585029]{cursor:text}li.active[svelte-3809585029] .remove[svelte-3809585029]{display:inline-block}.btn-action-container[svelte-3809585029]{position:absolute;right:0;top:0}button.add-new[svelte-3809585029]{border:none;width:2.4em;height:2.4em;color:#999;background:none}.add-new[svelte-3809585029] span[svelte-3809585029]{position:absolute;font-size:2em;font-weight:300;top:0;line-height:1.3;left:0;width:100%}.add-new[svelte-3809585029]:hover{border:none;color:#333}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/", "", {"version":3,"sources":["/Users/208311/Development/SVELTE/svelte.technology/routes/repl/_ComponentSelector.html","/private/var/folders/5_/1988587d0t3_w4n0f1g4ydhwn85510/T/tmp-74817qOSr9SRabREE.css"],"names":[],"mappings":"AAkCC,gCAAc,kBAEb,aAAc,CACd,iCAEc,sBACS,CACvB,0BAEO,cAEP,YACA,yBAA0B,CAC1B,6BAEU,kBAEV,cACA,WACA,iBAAkB,CAClB,oCAEiB,gBAEjB,kBACA,WACA,YACA,gBACA,WACA,mBAAoB,CACpB,kCAEe,kBAEf,cACA,WACA,aAAc,CAEd,2DAEqB,WAGrB,eACA,4JACA,YACA,cACA,iBACA,YAAa,CACb,4BAES,cAET,oBACA,kBACA,sBACA,iCACA,aAAc,CACd,mCAEgB,qBAEhB,4BACA,WACA,YACA,mBAAoB,CACpB,8BAEW,YAEX,eACA,SACA,qBACA,mBACA,gBACA,iBAAkB,CAClB,oDAEgB,qBAEhB,WACA,gBACA,mBACA,kBAAmB,CACnB,2DAEqB,qBACC,CACtB,kEAE4B,4BACC,CAE7B,yCAEsB,WAEtB,6BACA,gBACA,WACA,kBACA,cAEA,oBACA,SACA,aACA,sBACA,gBACA,eAAgB,CAChB,8BAMW,mBAEX,eAAgB,CAChB,oCAEiB,iBACC,CAClB,4DAEuB,qBAEvB,iBACA,wBACA,iBAAkB,CAClB,+BAEY,gBACK,CACjB,2BAEQ,kBAER,aACA,QACA,WACA,iBACA,4BACA,KAAM,CACN,0DAEoB,WACR,CACZ,wDAEkB,oBACG,CACrB,yCAEsB,kBAEtB,QACA,KAAM,CACN,kCAEe,YAEf,YACA,aACA,WACA,eAAgB,CAChB,oDAEc,kBAEd,cACA,gBACA,MACA,gBACA,OACA,UAAW,CACX,kCAEe,YAEf,UAAW,CACX;ACrNF,8xaAA8xa","file":"tmp-74817qOSr9SRabREE.css","sourcesContent":["<div class=\"panel-header\">\n\t<ul ref:files class=\"file-tabs\" on:dblclick='fire(\"create\")'>\n\t\t{{#each components as component}}\n\t\t<li id='{{component.name}}' class='{{ selectedComponent == component ? \"active\" : \"\" }}' data-name='{{component.name}}' on:dblclick='event.stopPropagation()'>\n\t\t\t<button class='file-tabs-item {{ component.edit ? \"edit-mode\" : \"\"}}' on:click='selectComponent(component, selectedComponent)'>\n\t\t\t\t{{#if component.name == 'App'}}\n\t\t\t\t\t<div class='uneditable'>\n\t\t\t\t\t\tApp.html\n\t\t\t\t\t</div>\n\t\t\t\t{{else}}\n\t\t\t\t\t{{#if component.edit}}\n\t\t\t\t\t\t<div class='input-wrapper'>\n\t\t\t\t\t\t\t<input autofocus ref:name bind:value='component.name' on:focus='selectInput(this)' on:blur='closeEdit(selectedComponent)' on:enter='this.blur()' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{{else}}\n\t\t\t\t\t\t<div class='editable' title='edit component name' on:click='editTab(component, selectedComponent)'>\n\t\t\t\t\t\t\t{{component.name}}.{{component.type}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{{/if}}\n\t\t\t\t\t<span class='remove' on:click='remove(component)'>&times;</span>\n\t\t\t\t{{/if}}\n\t\t\t</button>\n\t\t</li>\n\t\t{{/each}}\n\t</ul>\n</div>\n\n<div class=\"btn-action-container\">\n\t<button class='add-new' on:click='fire(\"create\")' title=\"add new component\">\n\t\t<span>+</span>\n\t</button>\n</div>\n\n<style>\n\t.module-name {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t}\n\n\t.panel-header {\n\t\tpadding: 0 40px 0.5em 0;\n\t}\n\n\tbutton {\n\t\tdisplay: block;\n\t\tfloat: right;\n\t\tpadding: calc(0.5em - 1px);\n\t}\n\n\t.dropdown {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t\tfloat: left;\n\t\tpadding: 0 2em 0 0;\n\t}\n\n\t.dropdown::after {\n\t\tcontent: '▼';\n\t\tposition: absolute;\n\t\tright: 1rem;\n\t\ttop: 0.55rem;\n\t\tfont-size: 0.8em;\n\t\tcolor: #999;\n\t\tpointer-events: none;\n\t}\n\n\t.input-wrapper {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t\tfloat: left;\n\t\tline-height: 1;\n\t\t/* margin: 0 0.3em 0 0; */\n\t}\n\n\t.input-wrapper input {\n\t\twidth: 100%;\n\t\t/* background-color: #e7e7e7; */\n\t\tfont-size: 16px;\n\t\tfont-family: Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\t\tborder: none;\n\t\tcolor: #aa1e1e;\n\t\tpadding: 4px 10px;\n\t\toutline: none;\n\t}\n\n\t.widther {\n\t\tdisplay: block;\n\t\tfont-family: inherit;\n\t\tfont-size: inherit;\n\t\tborder: 1px solid #eee;\n\t\tpadding: calc(0.5em - 1px) 0.25em;\n\t\tline-height: 1;\n\t}\n\n\t.file-extension {\n\t\tdisplay: inline-block;\n\t\tpadding: calc(0.5em - 1px) 0;\n\t\tcolor: #999;\n\t\tleft: -0.2em;\n\t\tpointer-events: none;\n\t}\n\n\t.file-tabs {\n\t\tborder: none;\n\t\tpadding-left: 0;\n\t\tmargin: 0;\n\t\tlist-style-type: none;\n\t\twhite-space: nowrap;\n\t\toverflow-x: auto;\n\t\toverflow-y: hidden;\n\t}\n\n\t.file-tabs > li {\n\t\tdisplay: inline-block;\n\t\tfloat: none;\n\t\tmargin-bottom: 0;\n\t\tmargin: 0 0.5em 0 0;\n\t\tvertical-align: top;\n\t}\n\n\t.file-tabs li.active {\n\t\tbackground-color: #fff;\n\t}\n\n\t.file-tabs li.active button {\n\t\tborder-bottom: 1px solid #666;\n\t\t/* font-weight: 500; */\n\t}\n\n\tbutton.file-tabs-item {\n\t\tfloat: none;\n\t\tborder-bottom: 1px solid #eee;\n\t\tborder-radius: 0;\n\t\tcolor: #333;\n\t\tposition: relative;\n\t\tdisplay: block;\n\t\t/* padding: 0 0.7em; */\n\t\tpadding: 0.4em 0 0 0;\n\t\tmargin: 0;\n\t\theight: 2.4em;\n\t\tbox-sizing: border-box;\n\t\tline-height: 1.4;\n\t\tfont-weight: 300;\n\t}\n\n\t/* .file-tabs-item:hover {\n\t\tborder: none;\n\t} */\n\n\t.edit-mode {\n\t\tpadding-bottom: 8px;\n\t\tpadding-top: 8px;\n\t}\n\n\t.file-tabs-input {\n\t\tpadding: 10px 15px;\n\t}\n\n\t.editable, .uneditable {\n\t\tdisplay: inline-block;\n\t\tmargin-right: 4px;\n\t\tpadding: 0 0.7em 0 0.5em;\n\t\tposition: relative;\n\t}\n\n\t.uneditable {\n\t\tpadding-left: 1em;\n\t}\n\n\t.remove {\n\t\tposition: absolute;\n\t\tdisplay: none;\n\t\tright: 0;\n\t\twidth: 20px;\n\t\ttext-align: right;\n\t\tpadding: 0.7em 0 0.5em 0.5em;\n\t\ttop: 0;\n\t}\n\n\tli.active .editable {\n\t\tcursor: text;\n\t}\n\n\tli.active .remove {\n\t\tdisplay: inline-block;\n\t}\n\n\t.btn-action-container {\n\t\tposition: absolute;\n\t\tright: 0;\n\t\ttop: 0;\n\t}\n\n\tbutton.add-new {\n\t\tborder: none;\n\t\twidth: 2.4em;\n\t\theight: 2.4em;\n\t\tcolor: #999;\n\t\tbackground: none;\n\t}\n\n\t.add-new span {\n\t\tposition: absolute;\n\t\tfont-size: 2em;\n\t\tfont-weight: 300;\n\t\ttop: 0;\n\t\tline-height: 1.3;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t}\n\n\t.add-new:hover {\n\t\tborder: none;\n\t\tcolor: #333;\n\t}\n</style>\n\n<script>\n\tfunction keyEvent(code) {\n\t\treturn function (node, callback) {\n\t\t\tnode.addEventListener('keydown', handleKeydown);\n\n\t\t\tfunction handleKeydown(event) {\n\t\t\t\tif (event.keyCode === code) {\n\t\t\t\t\tcallback.call(this, event);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tteardown() {\n\t\t\t\t\tnode.removeEventListener('keydown', handleKeydown);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\texport default {\n\t\tmethods: {\n\t\t\tselectComponent(component, selectedComponent) {\n\t\t\t\tif (selectedComponent != component) {\n\t\t\t\t\tselectedComponent.edit = false;\n\t\t\t\t}\n\t\t\t\tthis.set({ selectedComponent: component })\n\t\t\t},\n\t\t\teditTab(component, selectedComponent) {\n\t\t\t\tif (selectedComponent == component) {\n\t\t\t\t\tselectedComponent.edit = true;\n\t\t\t\t\tthis.set({ selectedComponent });\n\t\t\t\t\t// this.refs.name.focus();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcloseEdit(selectedComponent) {\n\t\t\t\tconst match = /(.+)\\.(html|js)$/.exec(selectedComponent.name);\n\t\t\t\tselectedComponent.name = match ? match[1] : selectedComponent.name;\n\t\t\t\tif (match && match[2]) selectedComponent.type = match[2];\n\t\t\t\tselectedComponent.edit = false;\n\t\t\t\tthis.set({ selectedComponent });\n\t\t\t},\n\t\t\tremove(component) {\n\t\t\t\tlet result = confirm(`Are you sure you want to delete ${component.name}.${component.type}?`);\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.fire('remove');\n\t\t\t\t\tlet components = this.get('components');\n\t\t\t\t\tthis.set({ selectedComponent: components[components.length - 1] });\n\t\t\t\t}\n\t\t\t},\n\t\t\tselectInput(input) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tinput.select();\n\t\t\t\t});\n\t\t\t},\n\t\t\tfocusLast() {\n\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\tenter: keyEvent(13)\n\t\t}\n\t};\n</script>",".module-name[svelte-3809585029]{position:relative;display:block}.panel-header[svelte-3809585029]{padding:0 40px 0.5em 0}button[svelte-3809585029]{display:block;float:right;padding:calc(0.5em - 1px)}.dropdown[svelte-3809585029]{position:relative;display:block;float:left;padding:0 2em 0 0}.dropdown[svelte-3809585029]::after{content:'▼';position:absolute;right:1rem;top:0.55rem;font-size:0.8em;color:#999;pointer-events:none}.input-wrapper[svelte-3809585029]{position:relative;display:block;float:left;line-height:1}.input-wrapper[svelte-3809585029] input[svelte-3809585029]{width:100%;font-size:16px;font-family:Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";border:none;color:#aa1e1e;padding:4px 10px;outline:none}.widther[svelte-3809585029]{display:block;font-family:inherit;font-size:inherit;border:1px solid #eee;padding:calc(0.5em - 1px) 0.25em;line-height:1}.file-extension[svelte-3809585029]{display:inline-block;padding:calc(0.5em - 1px) 0;color:#999;left:-0.2em;pointer-events:none}.file-tabs[svelte-3809585029]{border:none;padding-left:0;margin:0;list-style-type:none;white-space:nowrap;overflow-x:auto;overflow-y:hidden}.file-tabs[svelte-3809585029]>li[svelte-3809585029]{display:inline-block;float:none;margin-bottom:0;margin:0 0.5em 0 0;vertical-align:top}.file-tabs[svelte-3809585029] li.active[svelte-3809585029]{background-color:#fff}.file-tabs[svelte-3809585029] li.active button[svelte-3809585029]{border-bottom:1px solid #666}button.file-tabs-item[svelte-3809585029]{float:none;border-bottom:1px solid #eee;border-radius:0;color:#333;position:relative;display:block;padding:0.4em 0 0 0;margin:0;height:2.4em;box-sizing:border-box;line-height:1.4;font-weight:300}.edit-mode[svelte-3809585029]{padding-bottom:8px;padding-top:8px}.file-tabs-input[svelte-3809585029]{padding:10px 15px}.editable[svelte-3809585029],.uneditable[svelte-3809585029]{display:inline-block;margin-right:4px;padding:0 0.7em 0 0.5em;position:relative}.uneditable[svelte-3809585029]{padding-left:1em}.remove[svelte-3809585029]{position:absolute;display:none;right:0;width:20px;text-align:right;padding:0.7em 0 0.5em 0.5em;top:0}li.active[svelte-3809585029] .editable[svelte-3809585029]{cursor:text}li.active[svelte-3809585029] .remove[svelte-3809585029]{display:inline-block}.btn-action-container[svelte-3809585029]{position:absolute;right:0;top:0}button.add-new[svelte-3809585029]{border:none;width:2.4em;height:2.4em;color:#999;background:none}.add-new[svelte-3809585029] span[svelte-3809585029]{position:absolute;font-size:2em;font-weight:300;top:0;line-height:1.3;left:0;width:100%}.add-new[svelte-3809585029]:hover{border:none;color:#333}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/"],"sourceRoot":""}]);

// exports


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__ = __webpack_require__(7);
/* routes/repl/_ExampleSelector.html generated by Svelte v1.49.0 */


function encapsulateStyles(node) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(node, "svelte-420476576", "");
}

function create_main_fragment(state, component) {
	var div, select, option, text, option_value_value, select_updating = false, text_1, div_1, span, text_2_value = state.selectedExample ? state.selectedExample.title : 'Select an example', text_2;

	var example_contents = state.example_contents;

	var each_blocks = [];

	for (var i = 0; i < example_contents.length; i += 1) {
		each_blocks[i] = create_each_block(state, example_contents, example_contents[i], i, component);
	}

	function select_change_handler() {
		select_updating = true;
		component.set({ selectedExample: Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["B" /* selectValue */])(select) });
		select_updating = false;
	}

	return {
		c: function create() {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			select = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("select");
			option = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("option");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("Select an example");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])("\n\n\t");
			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("div");
			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("span");
			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_2_value);
			this.h();
		},

		l: function claim(nodes) {
			div = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "DIV", { class: true }, false);
			var div_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div);

			select = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "SELECT", {}, false);
			var select_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(select);

			option = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(select_nodes, "OPTION", { value: true, disabled: true }, false);
			var option_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(option);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(option_nodes, "Select an example");
			option_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select_nodes);
			}

			select_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			text_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(div_nodes, "\n\n\t");

			div_1 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_nodes, "DIV", { class: true }, false);
			var div_1_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(div_1);

			span = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(div_1_nodes, "SPAN", {}, false);
			var span_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(span);

			text_2 = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(span_nodes, text_2_value);
			span_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_1_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			div_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			encapsulateStyles(select);
			option.__value = option_value_value = null;
			option.value = option.__value;
			option.disabled = true;
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["a" /* addListener */])(select, "change", select_change_handler);
			if (!('selectedExample' in state)) component.root._beforecreate.push(select_change_handler);
			encapsulateStyles(div_1);
			encapsulateStyles(span);
			div_1.className = "visible";
			div.className = "select-wrapper";
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(div, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(select, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(option, select);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, option);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["A" /* selectOption */])(select, state.selectedExample)

			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_1, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(div_1, div);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(span, div_1);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text_2, span);
		},

		p: function update(changed, state) {
			option.value = option.__value;

			var example_contents = state.example_contents;

			if (changed.example_contents) {
				for (var i = 0; i < example_contents.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, example_contents, example_contents[i], i);
					} else {
						each_blocks[i] = create_each_block(state, example_contents, example_contents[i], i, component);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = example_contents.length;
			}

			if (!select_updating) Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["A" /* selectOption */])(select, state.selectedExample)
			if ((changed.selectedExample) && text_2_value !== (text_2_value = state.selectedExample ? state.selectedExample.title : 'Select an example')) {
				text_2.data = text_2_value;
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(div);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["m" /* destroyEach */])(each_blocks);

			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["z" /* removeListener */])(select, "change", select_change_handler);
		}
	};
}

// (5:2) {{#each example_contents as group}}
function create_each_block(state, example_contents, group, group_index, component) {
	var optgroup, optgroup_label_value;

	var examples = group.examples;

	var each_blocks = [];

	for (var i = 0; i < examples.length; i += 1) {
		each_blocks[i] = create_each_block_1(state, example_contents, group, group_index, examples, examples[i], i, component);
	}

	return {
		c: function create() {
			optgroup = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("optgroup");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			optgroup = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "OPTGROUP", { label: true }, false);
			var optgroup_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(optgroup);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(optgroup_nodes);
			}

			optgroup_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(optgroup, "label", optgroup_label_value = group.name);
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(optgroup, target, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(optgroup, null);
			}
		},

		p: function update(changed, state, example_contents, group, group_index) {
			var examples = group.examples;

			if (changed.example_contents) {
				for (var i = 0; i < examples.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, example_contents, group, group_index, examples, examples[i], i);
					} else {
						each_blocks[i] = create_each_block_1(state, example_contents, group, group_index, examples, examples[i], i, component);
						each_blocks[i].c();
						each_blocks[i].m(optgroup, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = examples.length;
			}

			if ((changed.example_contents) && optgroup_label_value !== (optgroup_label_value = group.name)) {
				Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["C" /* setAttribute */])(optgroup, "label", optgroup_label_value);
			}
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(optgroup);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["m" /* destroyEach */])(each_blocks);
		}
	};
}

// (7:4) {{#each group.examples as example}}
function create_each_block_1(state, example_contents, group, group_index, examples, example, example_index, component) {
	var option, text_value = example.title, text, option_value_value;

	return {
		c: function create() {
			option = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["j" /* createElement */])("option");
			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["l" /* createText */])(text_value);
			this.h();
		},

		l: function claim(nodes) {
			option = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["g" /* claimElement */])(nodes, "OPTION", { value: true }, false);
			var option_nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(option);

			text = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["h" /* claimText */])(option_nodes, text_value);
			option_nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
			this.h();
		},

		h: function hydrate() {
			option.__value = option_value_value = example;
			option.value = option.__value;
		},

		m: function mount(target, anchor) {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["t" /* insertNode */])(option, target, anchor);
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["b" /* appendNode */])(text, option);
		},

		p: function update(changed, state, example_contents, group, group_index, examples, example, example_index) {
			if ((changed.example_contents) && text_value !== (text_value = example.title)) {
				text.data = text_value;
			}

			if ((changed.example_contents) && option_value_value !== (option_value_value = example)) {
				option.__value = option_value_value;
			}

			option.value = option.__value;
		},

		u: function unmount() {
			Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */])(option);
		},

		d: __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["u" /* noop */]
	};
}

function Index(options) {
	Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["s" /* init */])(this, options);
	this._state = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])({}, options.data);

	if (!options.root) {
		this._oncreate = [];
		this._beforecreate = [];
	}

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		var nodes = Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["f" /* children */])(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["o" /* detachNode */]);
		this._fragment.m(options.target, options.anchor || null);

		Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["e" /* callAll */])(this._beforecreate);
	}
}

Object(__WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["c" /* assign */])(Index.prototype, __WEBPACK_IMPORTED_MODULE_0__Users_208311_Development_SVELTE_svelte_shared_js__["w" /* proto */]);
/* harmony default export */ __webpack_exports__["a"] = (Index);
__webpack_require__(93);


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(94);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(9)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817PAI1okvOuvvU.css", function() {
			var newContent = require("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817PAI1okvOuvvU.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(8)(true);
// imports


// module
exports.push([module.i, ".select-wrapper[svelte-420476576]{position:relative;display:block;float:left;padding:0 1.5em 0 0;font-family:Rajdhani;font-weight:300;font-size:1em;line-height:1.2}.select-wrapper[svelte-420476576]::after{content:'\\25BC';position:absolute;right:0.8rem;top:0.85rem;font-size:0.7em;color:rgba(0,0,0,0.4);pointer-events:none}select[svelte-420476576]{position:absolute;left:0;top:0;width:100%;height:100%;opacity:0}.visible[svelte-420476576]{pointer-events:none;padding:5px 0.4em;font-size:20px}.visible[svelte-420476576] span[svelte-420476576]{top:0.05em}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy8yMDgzMTEvRGV2ZWxvcG1lbnQvU1ZFTFRFL3N2ZWx0ZS50ZWNobm9sb2d5L3JvdXRlcy9yZXBsL19FeGFtcGxlU2VsZWN0b3IuaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyI8ZGl2IGNsYXNzPSdzZWxlY3Qtd3JhcHBlcic+XG5cdDxzZWxlY3QgYmluZDp2YWx1ZT0nc2VsZWN0ZWRFeGFtcGxlJz5cblx0XHQ8b3B0aW9uIHZhbHVlPSd7e251bGx9fScgZGlzYWJsZWQ+U2VsZWN0IGFuIGV4YW1wbGU8L29wdGlvbj5cblxuXHRcdHt7I2VhY2ggZXhhbXBsZV9jb250ZW50cyBhcyBncm91cH19XG5cdFx0XHQ8b3B0Z3JvdXAgbGFiZWw9J3t7Z3JvdXAubmFtZX19Jz5cblx0XHRcdFx0e3sjZWFjaCBncm91cC5leGFtcGxlcyBhcyBleGFtcGxlfX1cblx0XHRcdFx0XHQ8b3B0aW9uIHZhbHVlPSd7e2V4YW1wbGV9fSc+e3tleGFtcGxlLnRpdGxlfX08L29wdGlvbj5cblx0XHRcdFx0e3svZWFjaH19XG5cdFx0XHQ8L29wdGdyb3VwPlxuXHRcdHt7L2VhY2h9fVxuXHQ8L3NlbGVjdD5cblxuXHQ8ZGl2IGNsYXNzPSd2aXNpYmxlJz5cblx0XHQ8c3Bhbj57e3NlbGVjdGVkRXhhbXBsZSA/IHNlbGVjdGVkRXhhbXBsZS50aXRsZSA6ICdTZWxlY3QgYW4gZXhhbXBsZSd9fTwvc3Bhbj5cblx0PC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuXHQuc2VsZWN0LXdyYXBwZXIge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmbG9hdDogbGVmdDtcblx0XHRwYWRkaW5nOiAwIDEuNWVtIDAgMDtcblx0XHQvKiBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcblx0XHRib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDsgKi9cblx0XHRmb250LWZhbWlseTogUmFqZGhhbmk7XG5cdFx0Zm9udC13ZWlnaHQ6IDMwMDtcblx0XHRmb250LXNpemU6IDFlbTtcblx0XHRsaW5lLWhlaWdodDogMS4yO1xuXHR9XG5cblx0LnNlbGVjdC13cmFwcGVyOjphZnRlciB7XG5cdFx0Y29udGVudDogJ+KWvCc7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHJpZ2h0OiAwLjhyZW07XG5cdFx0dG9wOiAwLjg1cmVtO1xuXHRcdGZvbnQtc2l6ZTogMC43ZW07XG5cdFx0Y29sb3I6IHJnYmEoMCwwLDAsMC40KTtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0fVxuXG5cdHNlbGVjdCB7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdGxlZnQ6IDA7XG5cdFx0dG9wOiAwO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHRvcGFjaXR5OiAwO1xuXHR9XG5cblx0LnZpc2libGUge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRcdHBhZGRpbmc6IDVweCAwLjRlbTtcblx0XHRmb250LXNpemU6IDIwcHg7XG5cdH1cblxuXHQudmlzaWJsZSBzcGFuIHtcblx0XHR0b3A6IDAuMDVlbTtcblx0fVxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJDLGVBQWUsa0JBQUMsQ0FBQyxBQUNoQixRQUFRLENBQUUsUUFBUSxDQUNsQixPQUFPLENBQUUsS0FBSyxDQUNkLEtBQUssQ0FBRSxJQUFJLENBQ1gsT0FBTyxDQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FJcEIsV0FBVyxDQUFFLFFBQVEsQ0FDckIsV0FBVyxDQUFFLEdBQUcsQ0FDaEIsU0FBUyxDQUFFLEdBQUcsQ0FDZCxXQUFXLENBQUUsR0FBRyxBQUNqQixDQUFDLEFBRUQsaUNBQWUsT0FBTyxBQUFDLENBQUMsQUFDdkIsT0FBTyxDQUFFLEdBQUcsQ0FDWixRQUFRLENBQUUsUUFBUSxDQUNsQixLQUFLLENBQUUsTUFBTSxDQUNiLEdBQUcsQ0FBRSxPQUFPLENBQ1osU0FBUyxDQUFFLEtBQUssQ0FDaEIsS0FBSyxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ3RCLGNBQWMsQ0FBRSxJQUFJLEFBQ3JCLENBQUMsQUFFRCxNQUFNLGtCQUFDLENBQUMsQUFDUCxRQUFRLENBQUUsUUFBUSxDQUNsQixJQUFJLENBQUUsQ0FBQyxDQUNQLEdBQUcsQ0FBRSxDQUFDLENBQ04sS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLE9BQU8sQ0FBRSxDQUFDLEFBQ1gsQ0FBQyxBQUVELFFBQVEsa0JBQUMsQ0FBQyxBQUNULGNBQWMsQ0FBRSxJQUFJLENBQ3BCLE9BQU8sQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUNsQixTQUFTLENBQUUsSUFBSSxBQUNoQixDQUFDLEFBRUQsMEJBQVEsQ0FBQyxJQUFJLGtCQUFDLENBQUMsQUFDZCxHQUFHLENBQUUsTUFBTSxBQUNaLENBQUMifQ==*/", "", {"version":3,"sources":["/Users/208311/Development/SVELTE/svelte.technology/routes/repl/_ExampleSelector.html","/private/var/folders/5_/1988587d0t3_w4n0f1g4ydhwn85510/T/tmp-74817PAI1okvOuvvU.css"],"names":[],"mappings":"AAmBC,kCAAiB,kBAEhB,cACA,WACA,oBAIA,qBACA,gBACA,cACA,eAAgB,CAChB,yCAEuB,gBAEvB,kBACA,aACA,YACA,gBACA,sBACA,mBAAoB,CACpB,yBAEO,kBAEP,OACA,MACA,WACA,YACA,SAAU,CACV,2BAES,oBAET,kBACA,cAAe,CACf,kDAEc,UACH,CACX;AC3DF,0/FAA0/F","file":"tmp-74817PAI1okvOuvvU.css","sourcesContent":["<div class='select-wrapper'>\n\t<select bind:value='selectedExample'>\n\t\t<option value='{{null}}' disabled>Select an example</option>\n\n\t\t{{#each example_contents as group}}\n\t\t\t<optgroup label='{{group.name}}'>\n\t\t\t\t{{#each group.examples as example}}\n\t\t\t\t\t<option value='{{example}}'>{{example.title}}</option>\n\t\t\t\t{{/each}}\n\t\t\t</optgroup>\n\t\t{{/each}}\n\t</select>\n\n\t<div class='visible'>\n\t\t<span>{{selectedExample ? selectedExample.title : 'Select an example'}}</span>\n\t</div>\n</div>\n\n<style>\n\t.select-wrapper {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t\tfloat: left;\n\t\tpadding: 0 1.5em 0 0;\n\t\t/* background-color: white;\n\t\tborder: 1px solid #333;\n\t\tborder-radius: 2px; */\n\t\tfont-family: Rajdhani;\n\t\tfont-weight: 300;\n\t\tfont-size: 1em;\n\t\tline-height: 1.2;\n\t}\n\n\t.select-wrapper::after {\n\t\tcontent: '▼';\n\t\tposition: absolute;\n\t\tright: 0.8rem;\n\t\ttop: 0.85rem;\n\t\tfont-size: 0.7em;\n\t\tcolor: rgba(0,0,0,0.4);\n\t\tpointer-events: none;\n\t}\n\n\tselect {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\topacity: 0;\n\t}\n\n\t.visible {\n\t\tpointer-events: none;\n\t\tpadding: 5px 0.4em;\n\t\tfont-size: 20px;\n\t}\n\n\t.visible span {\n\t\ttop: 0.05em;\n\t}\n</style>",".select-wrapper[svelte-420476576]{position:relative;display:block;float:left;padding:0 1.5em 0 0;font-family:Rajdhani;font-weight:300;font-size:1em;line-height:1.2}.select-wrapper[svelte-420476576]::after{content:'▼';position:absolute;right:0.8rem;top:0.85rem;font-size:0.7em;color:rgba(0,0,0,0.4);pointer-events:none}select[svelte-420476576]{position:absolute;left:0;top:0;width:100%;height:100%;opacity:0}.visible[svelte-420476576]{pointer-events:none;padding:5px 0.4em;font-size:20px}.visible[svelte-420476576] span[svelte-420476576]{top:0.05em}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy8yMDgzMTEvRGV2ZWxvcG1lbnQvU1ZFTFRFL3N2ZWx0ZS50ZWNobm9sb2d5L3JvdXRlcy9yZXBsL19FeGFtcGxlU2VsZWN0b3IuaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyI8ZGl2IGNsYXNzPSdzZWxlY3Qtd3JhcHBlcic+XG5cdDxzZWxlY3QgYmluZDp2YWx1ZT0nc2VsZWN0ZWRFeGFtcGxlJz5cblx0XHQ8b3B0aW9uIHZhbHVlPSd7e251bGx9fScgZGlzYWJsZWQ+U2VsZWN0IGFuIGV4YW1wbGU8L29wdGlvbj5cblxuXHRcdHt7I2VhY2ggZXhhbXBsZV9jb250ZW50cyBhcyBncm91cH19XG5cdFx0XHQ8b3B0Z3JvdXAgbGFiZWw9J3t7Z3JvdXAubmFtZX19Jz5cblx0XHRcdFx0e3sjZWFjaCBncm91cC5leGFtcGxlcyBhcyBleGFtcGxlfX1cblx0XHRcdFx0XHQ8b3B0aW9uIHZhbHVlPSd7e2V4YW1wbGV9fSc+e3tleGFtcGxlLnRpdGxlfX08L29wdGlvbj5cblx0XHRcdFx0e3svZWFjaH19XG5cdFx0XHQ8L29wdGdyb3VwPlxuXHRcdHt7L2VhY2h9fVxuXHQ8L3NlbGVjdD5cblxuXHQ8ZGl2IGNsYXNzPSd2aXNpYmxlJz5cblx0XHQ8c3Bhbj57e3NlbGVjdGVkRXhhbXBsZSA/IHNlbGVjdGVkRXhhbXBsZS50aXRsZSA6ICdTZWxlY3QgYW4gZXhhbXBsZSd9fTwvc3Bhbj5cblx0PC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuXHQuc2VsZWN0LXdyYXBwZXIge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmbG9hdDogbGVmdDtcblx0XHRwYWRkaW5nOiAwIDEuNWVtIDAgMDtcblx0XHQvKiBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcblx0XHRib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDsgKi9cblx0XHRmb250LWZhbWlseTogUmFqZGhhbmk7XG5cdFx0Zm9udC13ZWlnaHQ6IDMwMDtcblx0XHRmb250LXNpemU6IDFlbTtcblx0XHRsaW5lLWhlaWdodDogMS4yO1xuXHR9XG5cblx0LnNlbGVjdC13cmFwcGVyOjphZnRlciB7XG5cdFx0Y29udGVudDogJ+KWvCc7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHJpZ2h0OiAwLjhyZW07XG5cdFx0dG9wOiAwLjg1cmVtO1xuXHRcdGZvbnQtc2l6ZTogMC43ZW07XG5cdFx0Y29sb3I6IHJnYmEoMCwwLDAsMC40KTtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0fVxuXG5cdHNlbGVjdCB7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdGxlZnQ6IDA7XG5cdFx0dG9wOiAwO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHRvcGFjaXR5OiAwO1xuXHR9XG5cblx0LnZpc2libGUge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRcdHBhZGRpbmc6IDVweCAwLjRlbTtcblx0XHRmb250LXNpemU6IDIwcHg7XG5cdH1cblxuXHQudmlzaWJsZSBzcGFuIHtcblx0XHR0b3A6IDAuMDVlbTtcblx0fVxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJDLGVBQWUsa0JBQUMsQ0FBQyxBQUNoQixRQUFRLENBQUUsUUFBUSxDQUNsQixPQUFPLENBQUUsS0FBSyxDQUNkLEtBQUssQ0FBRSxJQUFJLENBQ1gsT0FBTyxDQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FJcEIsV0FBVyxDQUFFLFFBQVEsQ0FDckIsV0FBVyxDQUFFLEdBQUcsQ0FDaEIsU0FBUyxDQUFFLEdBQUcsQ0FDZCxXQUFXLENBQUUsR0FBRyxBQUNqQixDQUFDLEFBRUQsaUNBQWUsT0FBTyxBQUFDLENBQUMsQUFDdkIsT0FBTyxDQUFFLEdBQUcsQ0FDWixRQUFRLENBQUUsUUFBUSxDQUNsQixLQUFLLENBQUUsTUFBTSxDQUNiLEdBQUcsQ0FBRSxPQUFPLENBQ1osU0FBUyxDQUFFLEtBQUssQ0FDaEIsS0FBSyxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ3RCLGNBQWMsQ0FBRSxJQUFJLEFBQ3JCLENBQUMsQUFFRCxNQUFNLGtCQUFDLENBQUMsQUFDUCxRQUFRLENBQUUsUUFBUSxDQUNsQixJQUFJLENBQUUsQ0FBQyxDQUNQLEdBQUcsQ0FBRSxDQUFDLENBQ04sS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLE9BQU8sQ0FBRSxDQUFDLEFBQ1gsQ0FBQyxBQUVELFFBQVEsa0JBQUMsQ0FBQyxBQUNULGNBQWMsQ0FBRSxJQUFJLENBQ3BCLE9BQU8sQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUNsQixTQUFTLENBQUUsSUFBSSxBQUNoQixDQUFDLEFBRUQsMEJBQVEsQ0FBQyxJQUFJLGtCQUFDLENBQUMsQUFDZCxHQUFHLENBQUUsTUFBTSxBQUNaLENBQUMifQ==*/"],"sourceRoot":""}]);

// exports


/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getComponentFromGist;
/* harmony export (immutable) */ __webpack_exports__["b"] = saveComponentAsGist;
const cache = {};

function request(method, url, data) {
	return new Promise((fulfil, reject) => {
		const xhr = new XMLHttpRequest();
		xhr.open(method, url);
		xhr.onload = () => {
			const response = JSON.parse(xhr.responseText);
			if (xhr.status >= 400) {
				reject(new Error(response.message));
			}
			fulfil(response);
		};
		xhr.onerror = reject;
		xhr.send(data);
	});
}

function get(url) {
	return request('GET', url);
}

function post(url, data) {
	return request('POST', url, data);
}

function getComponentFromGist(id) {
	let cancelled = false;

	if (!cache[id]) {
		cache[id] = get(`https://api.github.com/gists/${id}`)
			.catch(() => get(`/gists/${id}`))
			.then(gist => {
				const components = [];

				const componentFiles = Object.keys(gist.files).filter(file =>
					/\.(html|js)$/.test(file)
				);

				if (
					componentFiles.length === 1 &&
					componentFiles[0] === 'component.html'
				) {
					// legacy
					components.push({
						name: 'App',
						type: 'html',
						entry: true,
						source: gist.files['component.html'].content
					});
				} else {
					componentFiles.forEach(file => {
						const ext = /\.(html|js)$/.exec(file)[0];
						const name = file.slice(0, -ext.length);
						const type = ext.slice(1);

						const source = gist.files[file].content;

						components.push({ name, type, entry: name === 'App', source });
					});
				}

				const jsonFile = gist.files['data.json'];
				const json = (jsonFile && jsonFile.content) || '{}';

				return { components, json };
			})
			.catch(err => {
				cache[id] = null;
				throw err;
			});
	}

	const promise = cache[id].then(component => {
		if (cancelled) throw new Error(`Request was cancelled`);
		return component;
	});

	promise.cancel = () => {
		cancelled = true;
	};

	return promise;
}

function saveComponentAsGist(components, json) {
	const files = {
		'README.md': {
			content: `# Svelte component\n\nThis gist was generated by the [Svelte REPL](https://svelte.technology/repl). Visit https://svelte.technology/repl?gist=this_gist_id to see it.`
		},

		'data.json': {
			content: json
		}
	};

	components.forEach(component => {
		files[`${component.name}.${component.type}`] = {
			content: component.source
		};
	});

	const body = JSON.stringify({
		description: 'Svelte component',
		public: true,
		files
	});

	return post(`/gists`, body)
		.catch(() => post(`https://api.github.com/gists`, body))
		.then(gist => gist.id);
}


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
function debounce(fn, delay) {
	let timeout;

	return function() {
		clearTimeout(timeout);

		timeout = setTimeout(() => {
			fn.apply(this, arguments);
		}, delay || 250);
	};
}


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = script;
const cache = {};

function script(src) {
	if (!cache[src]) {
		cache[src] = new Promise((fulfil, reject) => {
			const script = document.createElement('script');

			script.onload = fulfil;

			script.onerror = err => {
				cache[src] = null;
				reject(err);
			};

			script.src = src;

			document.querySelector('head').appendChild(script);
		});
	}

	return cache[src];
}

// export function css(href) {
// 	if (!cache[href]) {
// 		cache[href] = new Promise((fulfil, reject) => {
// 			const link = document.createElement('link');

// 			link.onload = fulfil;

// 			link.onerror = err => {
// 				cache[href] = null;
// 				reject(err);
// 			};

// 			link.rel = 'stylesheet';
// 			link.href = href;

// 			document.querySelector('head').appendChild(link);
// 		});
// 	}

// 	return cache[href];
// }


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = get;
// TODO do we need this?
function get(url, options = {}) {
	return new Promise((fulfil, reject) => {
		const xhr = new XMLHttpRequest();
		xhr.open('GET', url);

		xhr.responseType = options.responseType || 'text';

		xhr.onload = () => {
			fulfil(xhr.response);
		};

		xhr.onerror = reject;

		xhr.send();
	});
}


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(100);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(9)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817gDDrfNZXVWS0.css", function() {
			var newContent = require("!!../../../../../../Users/208311/Development/SVELTE/svelte.technology/node_modules/css-loader/index.js??ref--1-2!./tmp-74817gDDrfNZXVWS0.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(8)(true);
// imports


// module
exports.push([module.i, ".repl-container[svelte-1505907988]{min-height:calc(100vh - 3em);background-color:#f4f4f4}@keyframes svelte-1505907988-pulse{0%{opacity:1;transform:scale(1.5)}50%{opacity:0;transform:scale(1)}100%{opacity:1;transform:scale(1.5)}}@-webkit-keyframes pulse {}@keyframes svelte-1505907988-fade-in{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fade-in {}.left[svelte-1505907988],.right[svelte-1505907988]{position:relative}@media(max-width: 767px){.left[svelte-1505907988],.right[svelte-1505907988]{width:100% !important}.top[svelte-1505907988],.bottom[svelte-1505907988]{height:auto !important}}.divider[svelte-1505907988]{position:absolute;z-index:10;display:none}h2[svelte-1505907988]{margin:1em 0 0 0;padding:0 8px;font-weight:500;font-size:1.2em}.editor-wrapper[svelte-1505907988]{z-index:5;transform-style:preserve-3d;animation-fill-mode:forwards}.repl-container[svelte-1505907988] .editor-toggle[svelte-1505907988]{position:absolute;bottom:1em;right:1em;z-index:10;background:white url(/icons/flip.svg) no-repeat calc(100% - 0.7em) 50%;background-size:1.4em 1em;padding-right:2.5em}.flip-text[svelte-1505907988]{}.editor-toggle[svelte-1505907988]:hover .flip-text[svelte-1505907988]{}.flip-out[svelte-1505907988]{animation-name:svelte-1505907988-flip-out;animation-duration:0.2s;animation-timing-function:ease-in}.flip-pause[svelte-1505907988]{opacity:0}.flip-in[svelte-1505907988]{animation-name:svelte-1505907988-flip-in;animation-duration:0.2s;animation-timing-function:ease-out}@keyframes svelte-1505907988-flip-out{from{transform:rotateY(0deg)}to{transform:rotateY(90deg)}}@keyframes svelte-1505907988-flip-in{from{transform:rotateY(-90deg)}to{transform:rotateY(0deg)}}@media(min-width: 768px){.show-if-mobile[svelte-1505907988]{display:none}.repl-container[svelte-1505907988]{min-height:auto;height:calc(100vh - 4em);background-color:white;overflow:hidden}.screen-too-small[svelte-1505907988]{display:none}.left[svelte-1505907988],.right[svelte-1505907988],.divider[svelte-1505907988]{display:block}.left[svelte-1505907988],.right[svelte-1505907988]{height:100%;float:left}.top[svelte-1505907988],.bottom[svelte-1505907988]{position:absolute;width:100%}.top[svelte-1505907988]{top:0}.bottom[svelte-1505907988]{bottom:0}.left[svelte-1505907988] .editor-wrapper[svelte-1505907988]{padding-right:8px;height:auto;height:100%}section[svelte-1505907988]{height:100%}}.divider[svelte-1505907988]::after{content:'';position:absolute;background-color:#eee}.vertical-divider[svelte-1505907988]{padding:0 8px;width:0;height:100%;cursor:ew-resize}.vertical-divider[svelte-1505907988]::after{left:8px;top:0;width:1px;height:100%}.horizontal-divider[svelte-1505907988]{padding:8px 0;width:100%;height:0;cursor:ns-resize}.horizontal-divider[svelte-1505907988]::after{top:8px;left:0;width:100%;height:1px}.loading[svelte-1505907988]{text-align:center;color:#999;font-weight:300;margin:2em 0 0 0}.input[svelte-1505907988]{padding:5.4em 0 0 0;perspective:1500px;perspective-origin:50% 0%}@media(min-width: 768px){.input[svelte-1505907988]{perspective-origin:50% 50%}}.app-controls[svelte-1505907988],.module-controls[svelte-1505907988]{position:absolute;left:0;width:100%}.app-controls[svelte-1505907988]{top:0;border-bottom:1px solid #eee;background-color:#f4f4f4;padding:0.5em;height:3em}.module-controls[svelte-1505907988]{top:3em;border-bottom:1px solid #eee;height:2.4em}.repl-container[svelte-1505907988] button{font-family:Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:inherit;background-color:white;cursor:pointer;outline:none;line-height:1;border:none}.repl-container[svelte-1505907988] .btn{display:block;float:right;padding:calc(0.5em - 1px) 1em;margin:0 0 0 0.5em;border-radius:2px;color:rgb(170,30,30);border:1px solid rgba(170,30,30,0.3);font-weight:500;box-sizing:border-box}.repl-container[svelte-1505907988] .btn:hover{border:1px solid rgb(170,30,30)}.repl-container[svelte-1505907988] .btn.active{background-color:rgb(170,30,30);color:white}.gist-link[svelte-1505907988]{float:right;line-height:2;font-family:Rajdhani;font-weight:400;padding:0 0.1em;display:none}@media(min-width: 768px){.gist-link[svelte-1505907988]{display:block}}.mousecatcher[svelte-1505907988]{position:absolute;left:0;top:0;width:100%;height:100%;background:rgba(255,255,255,0.01)}.repl-container[svelte-1505907988] .message{position:relative;border-radius:0.2em;margin:0;padding:0.5em 0.5em 0.5em 2.5em;color:white}.repl-container[svelte-1505907988] .message::before{content:'!';position:absolute;left:0.7em;top:0.55em;font-size:0.8em;font-weight:800;width:1em;height:1em;text-align:center;line-height:1;padding:0.2em 0.15em 0.1em 0.15em;border-radius:50%;color:white;border:2px solid white}.repl-container[svelte-1505907988] .error.message{background-color:rgb(170,30,30)}.repl-container[svelte-1505907988] .warning.message{background-color:rgb(160,100,30)}.repl-container[svelte-1505907988] .info.message{background-color:#666}.repl-container[svelte-1505907988] .error .filename{cursor:pointer}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/", "", {"version":3,"sources":["/Users/208311/Development/SVELTE/svelte.technology/routes/repl/index.html","/private/var/folders/5_/1988587d0t3_w4n0f1g4ydhwn85510/T/tmp-74817gDDrfNZXVWS0.css"],"names":[],"mappings":"AA8FC,mCAAiB,6BAEhB,wBAAyB,CACzB,mCAEiB,GACX,UAAa,oBAAqB,CAAG,IACrC,UAAa,kBAAmB,CAAG,KACnC,UAAa,oBAAqB,CAAG,CAC3C,2BAMA,qCAEmB,GACb,SAAW,CAAG,KACd,SAAW,CAAG,CACpB,6BAKA,mDAEc,iBACI,CAClB,yBAE0B,mDACX,qBACQ,CACtB,mDAEc,sBACS,CACvB,CACD,4BAES,kBAET,WACA,YAAa,CACb,sBAEG,iBAEH,cACA,gBACA,eAAgB,CAChB,mCAEgB,UAEhB,4BACA,4BAA6B,CAC7B,qEAE+B,kBAE/B,WACA,UACA,WACA,uEACA,0BACA,mBAAoB,CACpB,+BAIA,uEAIA,6BAEU,0CAEV,wBACA,iCAAkC,CAClC,+BAEY,SACF,CACV,4BAES,yCAET,wBACA,kCAAmC,CACnC,sCAEoB,KACd,uBAAyB,CAAG,GAC9B,wBAA0B,CAAG,CACjC,qCAEmB,KACb,yBAA2B,CAAG,GAChC,uBAAyB,CAAG,CAChC,yBAE0B,mCACT,YACH,CACb,mCAEgB,gBAEhB,yBACA,uBACA,eAAgB,CAChB,qCAEkB,YACL,CACb,+EAEwB,aACV,CAEd,mDAEc,YAEd,UAAW,CACX,mDAEc,kBAEd,UAAW,CACX,wBAEK,KAAO,CAAG,2BACP,QAAU,CAAG,4DAEC,kBAGtB,YACA,WAAY,CACZ,2BAEQ,WACI,CACZ,CACD,mCAEgB,WAEhB,kBACA,qBAAsB,CACtB,qCAEkB,cAElB,QACA,YACA,gBAAiB,CACjB,4CAEyB,SAEzB,MACA,UACA,WAAY,CACZ,uCAEoB,cAEpB,WACA,SACA,gBAAiB,CACjB,8CAE2B,QAE3B,OACA,WACA,UAAW,CACX,4BAES,kBAET,WACA,gBACA,gBAAiB,CACjB,0BAEO,oBAEP,mBACA,yBAA0B,CAC1B,yBAE0B,0BAClB,0BACoB,CAC3B,CACD,qEAEgC,kBAEhC,OACA,UAAW,CACX,iCAEc,MAEd,6BACA,yBACA,cACA,UAAW,CACX,oCAEiB,QAEjB,6BACA,YAAa,CACb,0CAEgC,4JAEhC,kBACA,uBACA,eACA,aACA,cACA,WAAY,CACZ,wCAE8B,cAE9B,YACA,8BACA,mBACA,kBACA,qBACA,qCACA,gBACA,qBAAsB,CACtB,8CAEoC,+BACJ,CAChC,+CAEqC,gCAErC,WAAY,CACZ,8BAEW,YAEX,cACA,qBACA,gBACA,gBACA,YAAa,CACb,yBAE0B,8BACd,aACG,CACd,CACD,iCAEc,kBAEd,OACA,MACA,WACA,YACA,iCAAkC,CAClC,4CAEkC,kBAElC,oBACA,SACA,gCACA,WAAY,CACZ,oDAE0C,YAE1C,kBACA,WACA,WACA,gBACA,gBACA,UACA,WACA,kBACA,cACA,kCACA,kBACA,YACA,sBAAuB,CACvB,kDAEwC,+BACR,CAChC,oDAE0C,gCACT,CACjC,iDAEuC,qBACjB,CACtB,oDAEmD,cACpC,CACf;AC1ZF,sljDAAsljD","file":"tmp-74817gDDrfNZXVWS0.css","sourcesContent":["<:Head>\n\t<title>Svelte REPL</title>\n</:Head>\n\n<Layout page='repl'>\n\t<div class='repl-container'>\n\t\t<div class='left' style='width: {{verticalDividerPos}}%;'>\n\t\t\t<section class='input'>\n\t\t\t\t<div class='app-controls'>\n\t\t\t\t\t<ExampleSelector :example_contents bind:selectedExample/>\n\n\t\t\t\t\t<div style='position: absolute; right: 0.5em; z-index: 2;'>\n\t\t\t\t\t\t<button style='width: 6em;' disabled='{{downloading}}' class='btn {{downloading ? \"active\" : \"\"}}' on:click='download()'>{{downloading ? 'zipping' : 'download'}}</button>\n\t\t\t\t\t\t<button disabled='{{saving}}' class='btn {{saving ? \"active\" : \"\"}}' on:click='save()'>{{saving ? 'saving' : 'save'}}</button>\n\n\t\t\t\t\t\t{{#if gist}}\n\t\t\t\t\t\t\t<a class='gist-link' href=\"{{githubGist}}\" title=\"Link to saved gist\" target=\"_blank\">gist</a>\n\t\t\t\t\t\t{{/if}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class='module-controls'>\n\t\t\t\t\t{{#if selectedComponent}}\n\t\t\t\t\t\t<ComponentSelector\n\t\t\t\t\t\t\tref:selector\n\t\t\t\t\t\t\t:components\n\t\t\t\t\t\t\tbind:selectedComponent\n\t\t\t\t\t\t\ton:create='createComponent()'\n\t\t\t\t\t\t\ton:remove='removeComponent(selectedComponent)'\n\t\t\t\t\t\t/>\n\t\t\t\t\t{{/if}}\n\t\t\t\t</div>\n\n\t\t\t\t{{#if loadedCodemirror}}\n\t\t\t\t\t<div ref:editorWrapper class='editor-wrapper {{flip}}'>\n\t\t\t\t\t\t{{#if selectedComponent}}\n\t\t\t\t\t\t\t{{#if showGenerated && selectedComponent.compiled}}\n\t\t\t\t\t\t\t\t<CodeMirror ref:editor mode='javascript' code='{{selectedComponent.compiled.code}}' readonly/>\n\t\t\t\t\t\t\t{{else}}\n\t\t\t\t\t\t\t\t<CodeMirror\n\t\t\t\t\t\t\t\t\tref:editor\n\t\t\t\t\t\t\t\t\tmode='{{selectedComponent.type === \"js\" ? \"javascript\" : \"handlebars\"}}'\n\t\t\t\t\t\t\t\t\tbind:code='selectedComponent.source'\n\t\t\t\t\t\t\t\t\terror='{{sourceError}}'\n\t\t\t\t\t\t\t\t\terrorLoc='{{sourceErrorLoc || runtimeErrorLoc}}'\n\t\t\t\t\t\t\t\t\twarningCount='{{warningCount}}'\n\t\t\t\t\t\t\t\t\ton:navigate='navigate(event)'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{{/if}}\n\t\t\t\t\t\t{{/if}}\n\n\t\t\t\t\t\t<button class='btn editor-toggle' on:click='flip()'>\n\t\t\t\t\t\t\t<span class='flip-text'>{{showGenerated ? 'output' : 'input'}}</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t{{else}}\n\t\t\t\t\t<p class='loading'>loading editor...</p>\n\t\t\t\t{{/if}}\n\t\t\t</section>\n\t\t</div>\n\n\t\t<div ref:right class='right' style='width: {{100 - verticalDividerPos}}%;'>\n\t\t\t<h2 class='show-if-mobile'>data.json</h2>\n\t\t\t<div class='bottom' style='height: {{100 - horizontalDividerPos}}%;'>\n\t\t\t\t{{#if loadedCodemirror}}\n\t\t\t\t\t<CodeMirror ref:data mode='javascript' bind:code='json' error='{{dataError}}' errorLoc='{{dataErrorLoc}}'/>\n\t\t\t\t{{else}}\n\t\t\t\t\t<p class='loading'>loading editor...</p>\n\t\t\t\t{{/if}}\n\t\t\t</div>\n\n\t\t\t<h2 class='show-if-mobile'>Rendered component</h2>\n\t\t\t<div class='top' style='height: {{horizontalDividerPos}}%;'>\n\t\t\t\t{{#if loadedSvelte}}\n\t\t\t\t\t{{#if bundle}}\n\t\t\t\t\t\t<Viewer :bundle :data :bundleError bind:error='runtimeError' on:change='updateData(event)' on:navigate='navigate(event)'/>\n\t\t\t\t\t{{/if}}\n\t\t\t\t{{else}}\n\t\t\t\t\t<p class='loading'>loading Svelte compiler...</p>\n\t\t\t\t{{/if}}\n\n\t\t\t\t{{#if dragging}}\n\t\t\t\t\t<div class='mousecatcher'></div>\n\t\t\t\t{{/if}}\n\t\t\t</div>\n\n\t\t\t<div class='divider horizontal-divider' style='top: calc({{horizontalDividerPos}}% - 8px)' on:drag='setHorizontal(event)'></div>\n\t\t</div>\n\n\t\t<div class='divider vertical-divider' style='left: calc({{verticalDividerPos}}% - 8px)' on:drag='setVertical(event)'></div>\n\t</div>\n</Layout>\n\n<style>\n\t.repl-container {\n\t\tmin-height: calc(100vh - 3em);\n\t\tbackground-color: #f4f4f4;\n\t}\n\n\t@keyframes pulse {\n\t\t0%   { opacity: 1; transform: scale(1.5); }\n\t\t50%  { opacity: 0; transform: scale(1); }\n\t\t100% { opacity: 1; transform: scale(1.5); }\n\t}\n\n\t@-webkit-keyframes pulse {\n\t\t0%   { opacity: 1; transform: scale(1.5); }\n\t\t50%  { opacity: 0; transform: scale(1); }\n\t\t100% { opacity: 1; transform: scale(1.5); }\n\t}\n\n\t@keyframes fade-in {\n\t\t0%   { opacity: 0; }\n\t\t100% { opacity: 1; }\n\t}\n\n\t@-webkit-keyframes fade-in {\n\t\t0%   { opacity: 0; }\n\t\t100% { opacity: 1; }\n\t}\n\n\t.left, .right {\n\t\tposition: relative;\n\t}\n\n\t@media (max-width: 767px) {\n\t\t.left, .right {\n\t\t\twidth: 100% !important; /* override divider-set width */\n\t\t}\n\n\t\t.top, .bottom {\n\t\t\theight: auto !important;\n\t\t}\n\t}\n\n\t.divider {\n\t\tposition: absolute;\n\t\tz-index: 10;\n\t\tdisplay: none;\n\t}\n\n\th2 {\n\t\tmargin: 1em 0 0 0;\n\t\tpadding: 0 8px;\n\t\tfont-weight: 500;\n\t\tfont-size: 1.2em;\n\t}\n\n\t.editor-wrapper {\n\t\tz-index: 5;\n\t\ttransform-style: preserve-3d;\n\t\tanimation-fill-mode: forwards;\n\t}\n\n\t.repl-container .editor-toggle {\n\t\tposition: absolute;\n\t\tbottom: 1em;\n\t\tright: 1em;\n\t\tz-index: 10;\n\t\tbackground: white url(/icons/flip.svg) no-repeat calc(100% - 0.7em) 50%;\n\t\tbackground-size: 1.4em 1em;\n\t\tpadding-right: 2.5em;\n\t}\n\n\t.flip-text {\n\t\t/*display: none;*/\n\t}\n\n\t.editor-toggle:hover .flip-text {\n\t\t/*display: inline-block;*/\n\t}\n\n\t.flip-out {\n\t\tanimation-name: flip-out;\n\t\tanimation-duration: 0.2s;\n\t\tanimation-timing-function: ease-in;\n\t}\n\n\t.flip-pause {\n\t\topacity: 0;\n\t}\n\n\t.flip-in {\n\t\tanimation-name: flip-in;\n\t\tanimation-duration: 0.2s;\n\t\tanimation-timing-function: ease-out;\n\t}\n\n\t@keyframes flip-out {\n\t\tfrom { transform: rotateY(0deg); }\n\t\tto { transform: rotateY(90deg); }\n\t}\n\n\t@keyframes flip-in {\n\t\tfrom { transform: rotateY(-90deg); }\n\t\tto { transform: rotateY(0deg); }\n\t}\n\n\t@media (min-width: 768px) {\n\t\t.show-if-mobile {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.repl-container {\n\t\t\tmin-height: auto;\n\t\t\theight: calc(100vh - 4em);\n\t\t\tbackground-color: white;\n\t\t\toverflow: hidden;\n\t\t}\n\n\t\t.screen-too-small {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.left, .right, .divider {\n\t\t\tdisplay: block;\n\n\t\t}\n\n\t\t.left, .right {\n\t\t\theight: 100%;\n\t\t\tfloat: left;\n\t\t}\n\n\t\t.top, .bottom {\n\t\t\tposition: absolute;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t.top { top: 0; }\n\t\t.bottom { bottom: 0; }\n\n\t\t.left .editor-wrapper {\n\t\t\t/* make it easier to interact with scrollbar */\n\t\t\tpadding-right: 8px;\n\t\t\theight: auto;\n\t\t\theight: 100%;\n\t\t}\n\n\t\tsection {\n\t\t\theight: 100%;\n\t\t}\n\t}\n\n\t.divider::after {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tbackground-color: #eee;\n\t}\n\n\t.vertical-divider {\n\t\tpadding: 0 8px;\n\t\twidth: 0;\n\t\theight: 100%;\n\t\tcursor: ew-resize;\n\t}\n\n\t.vertical-divider::after {\n\t\tleft: 8px;\n\t\ttop: 0;\n\t\twidth: 1px;\n\t\theight: 100%;\n\t}\n\n\t.horizontal-divider {\n\t\tpadding: 8px 0;\n\t\twidth: 100%;\n\t\theight: 0;\n\t\tcursor: ns-resize;\n\t}\n\n\t.horizontal-divider::after {\n\t\ttop: 8px;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 1px;\n\t}\n\n\t.loading {\n\t\ttext-align: center;\n\t\tcolor: #999;\n\t\tfont-weight: 300;\n\t\tmargin: 2em 0 0 0;\n\t}\n\n\t.input {\n\t\tpadding: 5.4em 0 0 0;\n\t\tperspective: 1500px;\n\t\tperspective-origin: 50% 0%;\n\t}\n\n\t@media (min-width: 768px) {\n\t\t.input {\n\t\t\tperspective-origin: 50% 50%;\n\t\t}\n\t}\n\n\t.app-controls, .module-controls {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t}\n\n\t.app-controls {\n\t\ttop: 0;\n\t\tborder-bottom: 1px solid #eee;\n\t\tbackground-color: #f4f4f4;\n\t\tpadding: 0.5em;\n\t\theight: 3em;\n\t}\n\n\t.module-controls {\n\t\ttop: 3em;\n\t\tborder-bottom: 1px solid #eee;\n\t\theight: 2.4em;\n\t}\n\n\t.repl-container :global(button) {\n\t\tfont-family: Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\t\tfont-size: inherit;\n\t\tbackground-color: white;\n\t\tcursor: pointer;\n\t\toutline: none;\n\t\tline-height: 1;\n\t\tborder: none;\n\t}\n\n\t.repl-container :global(.btn) {\n\t\tdisplay: block;\n\t\tfloat: right;\n\t\tpadding: calc(0.5em - 1px) 1em;\n\t\tmargin: 0 0 0 0.5em;\n\t\tborder-radius: 2px;\n\t\tcolor: rgb(170,30,30);\n\t\tborder: 1px solid rgba(170,30,30,0.3);\n\t\tfont-weight: 500;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.repl-container :global(.btn):hover {\n\t\tborder: 1px solid rgb(170,30,30);\n\t}\n\n\t.repl-container :global(.btn).active {\n\t\tbackground-color: rgb(170,30,30);\n\t\tcolor: white;\n\t}\n\n\t.gist-link {\n\t\tfloat: right;\n\t\tline-height: 2;\n\t\tfont-family: Rajdhani;\n\t\tfont-weight: 400;\n\t\tpadding: 0 0.1em;\n\t\tdisplay: none;\n\t}\n\n\t@media (min-width: 768px) {\n\t\t.gist-link {\n\t\t\tdisplay: block;\n\t\t}\n\t}\n\n\t.mousecatcher {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground: rgba(255,255,255,0.01);\n\t}\n\n\t.repl-container :global(.message) {\n\t\tposition: relative;\n\t\tborder-radius: 0.2em;\n\t\tmargin: 0;\n\t\tpadding: 0.5em 0.5em 0.5em 2.5em;\n\t\tcolor: white;\n\t}\n\n\t.repl-container :global(.message::before) {\n\t\tcontent: '!';\n\t\tposition: absolute;\n\t\tleft: 0.7em;\n\t\ttop: 0.55em;\n\t\tfont-size: 0.8em;\n\t\tfont-weight: 800;\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\ttext-align: center;\n\t\tline-height: 1;\n\t\tpadding: 0.2em 0.15em 0.1em 0.15em;\n\t\tborder-radius: 50%;\n\t\tcolor: white;\n\t\tborder: 2px solid white;\n\t}\n\n\t.repl-container :global(.error.message) {\n\t\tbackground-color: rgb(170,30,30);\n\t}\n\n\t.repl-container :global(.warning.message) {\n\t\tbackground-color: rgb(160,100,30);\n\t}\n\n\t.repl-container :global(.info.message) {\n\t\tbackground-color: #666;\n\t}\n\n\t.repl-container :global(.error) :global(.filename) {\n\t\tcursor: pointer;\n\t}\n</style>\n\n<script>\n\timport { locate } from 'locate-character';\n\timport Layout from '../_components/Layout.html';\n\timport CodeMirror from './_CodeMirror.html';\n\timport Viewer from './_Viewer.html';\n\timport ComponentSelector from './_ComponentSelector.html';\n\timport ExampleSelector from './_ExampleSelector.html';\n\timport { getComponentFromGist, saveComponentAsGist } from './_utils/gist.js';\n\timport debounce from './_utils/debounce.js';\n\timport * as load from './_utils/load.js';\n\timport { get } from './_utils/get.js';\n\timport store from '../_store.js';\n\n\tfunction loadCodemirror() {\n\t\treturn import('./_codemirror.js').then(CodeMirror => {\n\t\t\treturn (window.CodeMirror = CodeMirror);\n\t\t});\n\t}\n\n\tconst versionMatch = typeof window !== 'undefined' && /version=([^&]+)/.exec(window.location.search);\n\tlet dataQuery;\n\n\tfunction loadSvelte() {\n\t\tconst version = versionMatch ? versionMatch[1] : 'latest';\n\t\tif (version === 'local') return import('svelte');\n\t\treturn load.script(`https://unpkg.com/svelte@${version}/compiler/svelte.js`).then(() => window.svelte);\n\t}\n\n\tfunction tryParseData(encoded) {\n\t\ttry {\n\t\t\treturn JSON.parse(decodeURIComponent(atob(encoded)));\n\t\t} catch (err) {\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tfunction compile(component) {\n\t\tconst warnings = [];\n\n\t\tif (component.type === 'js') return { code: component.source, map: null, warnings };\n\n\t\tconst { code, map } = svelte.compile(component.source || '', {\n\t\t\tcascade: false,\n\t\t\tname: component.name,\n\t\t\tfilename: component.name + '.html',\n\t\t\tonwarn: warning => {\n\t\t\t\twarnings.push(warning);\n\t\t\t}\n\t\t});\n\n\t\treturn { code, map, warnings };\n\t}\n\n\texport default {\n\t\tstore: () => store,\n\n\t\tdata() {\n\t\t\tconst search = typeof window !== 'undefined' ? window.location.search : '';\n\t\t\tconst gistMatch = /gist=([^&]+)$/.exec(search);\n\t\t\tconst dataMatch = /data=([^&]+)$/.exec(search);\n\n\t\t\tlet gist = null;\n\t\t\tlet components = [];\n\t\t\tlet selectedExample = null;\n\t\t\tlet data = {};\n\n\t\t\tif (dataMatch) {\n\t\t\t\tdataQuery = dataMatch[1]; // so we don't lose it from the URL later\n\t\t\t\tconst parsed = tryParseData(dataMatch[1]);\n\n\t\t\t\tif (parsed.source && !parsed.components) {\n\t\t\t\t\t// legacy\n\t\t\t\t\tcomponents = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'App',\n\t\t\t\t\t\t\ttype: 'html',\n\t\t\t\t\t\t\tentry: true,\n\t\t\t\t\t\t\tsource: parsed.source\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\tcomponents = parsed.components;\n\t\t\t\t\tcomponents.forEach(component => {\n\t\t\t\t\t\tif (!component.type) component.type = 'html';\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdata = parsed.data;\n\t\t\t}\n\n\t\t\tlet selectedComponent = null;\n\n\t\t\tif (components && components.length > 0) {\n\t\t\t\tselectedComponent = components[0];\n\t\t\t} else if (gistMatch) {\n\t\t\t\tgist = gistMatch[1];\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\thorizontalDividerPos: 50,\n\t\t\t\tverticalDividerPos: 50,\n\t\t\t\tshowGenerated: false,\n\n\t\t\t\t// TODO remove this post-https://github.com/sveltejs/svelte/issues/424\n\t\t\t\tfalse: false,\n\t\t\t\ttrue: true,\n\t\t\t\tnull: null,\n\n\t\t\t\tselectedExample: null,\n\t\t\t\tselectedComponent,\n\n\t\t\t\tgist,\n\t\t\t\tcomponents,\n\t\t\t\tdata,\n\t\t\t\tjson: JSON.stringify(data, null, '  '),\n\n\t\t\t\tloadedCodemirror: false,\n\t\t\t\teditorRotation: 0,\n\t\t\t\tflip: ''\n\t\t\t};\n\t\t},\n\n\t\tcomputed: {\n\t\t\truntimeErrorLoc(runtimeError, selectedComponent) {\n\t\t\t\tif (!runtimeError || !selectedComponent) return null;\n\t\t\t\tif (runtimeError.filename !== `${selectedComponent.name}.${selectedComponent.type}`) return;\n\n\t\t\t\treturn runtimeError.loc;\n\t\t\t},\n\t\t\tgithubGist(gist) {\n\t\t\t\treturn 'https://gist.github.com/anonymous/' + gist;\n\t\t\t}\n\t\t},\n\n\t\tmethods: {\n\t\t\tcreateComponent() {\n\t\t\t\tconst components = this.get('components');\n\n\t\t\t\tconst newComponent = {\n\t\t\t\t\tname: this.uid++ ? `Component${this.uid}` : 'Component1',\n\t\t\t\t\ttype: 'html',\n\t\t\t\t\tsource: '',\n\t\t\t\t\tedit: true\n\t\t\t\t};\n\n\t\t\t\tcomponents.push(newComponent);\n\n\t\t\t\tthis.set({\n\t\t\t\t\tcomponents,\n\n\t\t\t\t\t// for some reason we need to unset selectedComponent before\n\t\t\t\t\t// resetting it, otherwise the editor remains bound to the\n\t\t\t\t\t// previous component. TODO look into this bug\n\t\t\t\t\tselectedComponent: null\n\t\t\t\t});\n\n\t\t\t\tthis.set({\n\t\t\t\t\tselectedComponent: newComponent\n\t\t\t\t});\n\t\t\t\tdocument.getElementById(newComponent.name).scrollIntoView(false);\n\t\t\t\tthis.refs.selector.focusLast();\n\t\t\t},\n\n\t\t\tremoveComponent(component) {\n\t\t\t\tconst components = this.get('components');\n\n\t\t\t\tlet selectedComponent;\n\n\t\t\t\tif (component.entry) {\n\t\t\t\t\t// App.html can't be removed\n\t\t\t\t\tcomponent.source = '';\n\t\t\t\t\tselectedComponent = component;\n\t\t\t\t} else {\n\t\t\t\t\tconst index = components.indexOf(component);\n\t\t\t\t\tif (~index) {\n\t\t\t\t\t\tcomponents.splice(index, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(`Could not find component! That's... odd`);\n\t\t\t\t\t}\n\n\t\t\t\t\tselectedComponent = components[index] || components[components.length - 1];\n\t\t\t\t}\n\n\t\t\t\tthis.set({\n\t\t\t\t\tcomponents,\n\t\t\t\t\tselectedComponent\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tflip() {\n\t\t\t\tif (window.innerWidth < 768) {\n\t\t\t\t\tthis.flipMobile();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.flipping) return;\n\t\t\t\tthis.flipping = true;\n\n\t\t\t\tconst wrapper = this.refs.editorWrapper;\n\t\t\t\tconst showGenerated = this.get('showGenerated');\n\n\t\t\t\tconst handleFlipOutEnd = () => {\n\t\t\t\t\twrapper.removeEventListener('animationend', handleFlipOutEnd);\n\t\t\t\t\twrapper.removeEventListener('webkitAnimationEnd', handleFlipOutEnd);\n\n\t\t\t\t\tthis.set({\n\t\t\t\t\t\tshowGenerated: !showGenerated,\n\t\t\t\t\t\tflip: 'flip-pause'\n\t\t\t\t\t});\n\n\t\t\t\t\tconst handleFlipInEnd = () => {\n\t\t\t\t\t\twrapper.removeEventListener('animationend', handleFlipInEnd);\n\t\t\t\t\t\twrapper.removeEventListener('webkitAnimationEnd', handleFlipInEnd);\n\n\t\t\t\t\t\tthis.flipping = false;\n\n\t\t\t\t\t\tthis.set({ flip: '' });\n\t\t\t\t\t}\n\n\t\t\t\t\twrapper.addEventListener('animationend', handleFlipInEnd);\n\t\t\t\t\twrapper.addEventListener('webkitAnimationEnd', handleFlipInEnd);\n\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.set({ flip: 'flip-in' });\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\twrapper.addEventListener('animationend', handleFlipOutEnd);\n\t\t\t\twrapper.addEventListener('webkitAnimationEnd', handleFlipOutEnd);\n\n\t\t\t\tthis.set({ flip: 'flip-out' });\n\t\t\t},\n\n\t\t\tflipMobile() {\n\t\t\t\tconst bcr1 = this.refs.editorWrapper.getBoundingClientRect();\n\t\t\t\tthis.set({\n\t\t\t\t\tshowGenerated: !this.get('showGenerated')\n\t\t\t\t});\n\n\t\t\t\t// if top is visible, keep it that way\n\t\t\t\tif (bcr1.top > 0) return;\n\n\t\t\t\tconst bcr2 = this.refs.editorWrapper.getBoundingClientRect();\n\t\t\t\tconst d = bcr2.bottom - bcr1.bottom;\n\t\t\t\twindow.scrollTo(0, window.scrollY + d);\n\t\t\t},\n\n\t\t\tsetHorizontal(event) {\n\t\t\t\tconst { top, bottom } = this.refs.right.getBoundingClientRect();\n\n\t\t\t\tthis.set({\n\t\t\t\t\thorizontalDividerPos: 100 * (event.clientY - top) / (bottom - top)\n\t\t\t\t});\n\n\t\t\t\tthis.refs.data.resize();\n\t\t\t},\n\n\t\t\tsetVertical(event) {\n\t\t\t\tthis.set({\n\t\t\t\t\tverticalDividerPos: 100 * event.clientX / window.innerWidth\n\t\t\t\t});\n\n\t\t\t\tthis.refs.editor.resize();\n\t\t\t\tthis.refs.data.resize();\n\t\t\t},\n\n\t\t\tupdateData({ key, value }) {\n\t\t\t\tconst data = JSON.parse(this.get('json'));\n\t\t\t\tdata[key] = value;\n\t\t\t\tthis.set({ json: JSON.stringify(data, null, '  ') });\n\t\t\t},\n\n\t\t\tsave() {\n\t\t\t\tthis.set({ saving: true });\n\n\t\t\t\tsaveComponentAsGist(this.get('components'), this.get('json')).then(id => {\n\t\t\t\t\tthis.set({\n\t\t\t\t\t\tsaving: false,\n\t\t\t\t\t\tgist: id,\n\t\t\t\t\t\tselectedExample: null\n\t\t\t\t\t});\n\t\t\t\t\tthis.updateUrl();\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tupdateBundle() {\n\t\t\t\t// TODO do this in a worker\n\t\t\t\tconst components = this.get('components');\n\n\t\t\t\tif (!components || !components.length) return;\n\t\t\t\tif (components.some(c => !c.compiled)) return;\n\n\t\t\t\tconsole.clear();\n\t\t\t\tconsole.log(`running Svelte compiler version %c${svelte.VERSION}`, 'font-weight: bold');\n\n\t\t\t\tif (this.bundlePromise) this.bundlePromise.cancel();\n\n\t\t\t\tconst lookup = {};\n\t\t\t\tlet warningCount = 0;\n\t\t\t\tfor (let i = 0; i < components.length; i += 1) {\n\t\t\t\t\tconst component = components[i];\n\t\t\t\t\tconst w = component.compiled.warnings.length;\n\t\t\t\t\twarningCount += w;\n\n\t\t\t\t\tif (w > 0) {\n\t\t\t\t\t\tconsole.group(`${component.name}.${component.type}: ${w} ${w === 1 ? 'warning' : 'warnings'}`);\n\t\t\t\t\t\tcomponent.compiled.warnings.forEach(warning => {\n\t\t\t\t\t\t\tconsole.warn(warning.message);\n\t\t\t\t\t\t\tconsole.log(warning.frame);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = `./${component.name}.${component.type}`;\n\n\t\t\t\t\tif (path in lookup) {\n\t\t\t\t\t\tthis.set({\n\t\t\t\t\t\t\tbundleError: new Error(`Multiple ${component.name}.${component.type} components`)\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlookup[path] = {\n\t\t\t\t\t\tcode: component.compiled.code,\n\t\t\t\t\t\tmap: component.compiled.map\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis.set({ warningCount });\n\n\t\t\t\tlet cancelled = false;\n\n\t\t\t\tlet uid = 1;\n\t\t\t\tconst importMap = new Map();\n\t\t\t\tconst input = './App.html';\n\n\t\t\t\tthis.bundlePromise = rollup.rollup({\n\t\t\t\t\tinput,\n\t\t\t\t\texternal: id => {\n\t\t\t\t\t\treturn id[0] !== '.';\n\t\t\t\t\t},\n\t\t\t\t\tplugins: [{\n\t\t\t\t\t\tresolveId(importee, importer) {\n\t\t\t\t\t\t\tif (importee[0] === '.') return importee;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tload(id) {\n\t\t\t\t\t\t\tif (id in lookup) return lookup[id];\n\t\t\t\t\t\t\tif (id[0] === '.') {\n\t\t\t\t\t\t\t\tthrow new Error(`file does not exist`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tonwarn(warning) {\n\t\t\t\t\t\tif (warning.code === 'MISSING_GLOBAL_NAME') return;\n\t\t\t\t\t\tconsole.warn(warning.message);\n\t\t\t\t\t}\n\t\t\t\t}).then(bundle => {\n\t\t\t\t\tif (cancelled) return;\n\n\t\t\t\t\treturn bundle.generate({\n\t\t\t\t\t\tformat: 'iife',\n\t\t\t\t\t\tname: 'SvelteComponent',\n\t\t\t\t\t\tglobals: id => {\n\t\t\t\t\t\t\tconst name = `import_${uid++}`;\n\t\t\t\t\t\t\timportMap.set(id, name);\n\t\t\t\t\t\t\treturn name;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsourcemap: true\n\t\t\t\t\t}).then(({ code, map }) => {\n\t\t\t\t\t\tthis.set({\n\t\t\t\t\t\t\tbundle: {\n\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\tmap,\n\t\t\t\t\t\t\t\timports: bundle.imports,\n\t\t\t\t\t\t\t\timportMap\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbundleError: null,\n\t\t\t\t\t\t\truntimeError: null\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error(err.stack);\n\t\t\t\t\tthis.set({\n\t\t\t\t\t\tbundleError: err\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tthis.bundlePromise.cancel = () => {\n\t\t\t\t\tcancelled = true;\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tupdateUrl() {\n\t\t\t\tif (typeof history === 'undefined') return;\n\n\t\t\t\tconst gist = this.get('gist');\n\t\t\t\tconst selectedExample = this.get('selectedExample');\n\n\t\t\t\tconst params = {};\n\t\t\t\tif (typeof svelte !== 'undefined') {\n\t\t\t\t\tparams.version = versionMatch && versionMatch[1] === 'local' ? 'local' : svelte.VERSION;\n\t\t\t\t} else if (versionMatch) {\n\t\t\t\t\tparams.version = versionMatch[1];\n\t\t\t\t}\n\n\t\t\t\tif (gist) {\n\t\t\t\t\tparams.gist = gist;\n\t\t\t\t} else if (selectedExample) {\n\t\t\t\t\tparams.example = selectedExample.id;\n\t\t\t\t} else if (dataQuery) {\n\t\t\t\t\tparams.data = dataQuery;\n\t\t\t\t}\n\n\t\t\t\tconst queryString = Object.keys(params).map(key => `${key}=${params[key]}`).join('&');\n\t\t\t\tconst url = queryString ? `/repl?${queryString}` : '/repl';\n\n\t\t\t\thistory.replaceState({}, 'x', url);\n\t\t\t},\n\n\t\t\tnavigate(filename) {\n\t\t\t\tconst name = filename.replace(/\\.html$/, '');\n\t\t\t\tconst { components, selectedComponent } = this.get();\n\n\t\t\t\tif (selectedComponent.name === name) return;\n\n\t\t\t\tthis.set({\n\t\t\t\t\tselectedComponent: components.find(c => c.name === name)\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tdownload() {\n\t\t\t\tthis.set({\n\t\t\t\t\tdownloading: true\n\t\t\t\t});\n\n\t\t\t\tPromise.all([\n\t\t\t\t\timport('jszip'),\n\t\t\t\t\timport('file-saver')\n\t\t\t\t]).then(([JSZip, saveAs]) => {\n\t\t\t\t\tconst zip = new JSZip();\n\n\t\t\t\t\tget('/svelte-app.zip', { responseType: 'arraybuffer' })\n\t\t\t\t\t\t.then(JSZip.loadAsync)\n\t\t\t\t\t\t.then(zip => {\n\t\t\t\t\t\t\tconst { bundle, components, data } = this.get();\n\n\t\t\t\t\t\t\t// remove any dotfiles that snuck in\n\t\t\t\t\t\t\tObject.keys(zip.files).forEach(key => {\n\t\t\t\t\t\t\t\tconst file = key.split('/').pop();\n\t\t\t\t\t\t\t\tif (file[0] === '.') zip.remove(key);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// add component files\n\t\t\t\t\t\t\tcomponents.forEach(component => {\n\t\t\t\t\t\t\t\tzip.file(`src/${component.name}.${component.type}`, component.source);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// add entry point\n\t\t\t\t\t\t\tzip.file(`src/main.js`, `import App from './App.html';\n\nvar app = new App({\n\ttarget: document.body,\n\tdata: ${JSON.stringify(data, null, '\\t').replace(/\\n/g, '\\n\\t')}\n});\n\nexport default app;` );\n\n\t\t\t\t\t\t\tconst go = () => {\n\t\t\t\t\t\t\t\tzip.generateAsync({ type: 'blob' })\n\t\t\t\t\t\t\t\t\t.then(blob => {\n\t\t\t\t\t\t\t\t\t\tthis.set({\n\t\t\t\t\t\t\t\t\t\t\tdownloading: false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tsaveAs(blob, 'svelte-app.zip');\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (bundle.imports.length > 0) {\n\t\t\t\t\t\t\t\tzip.file('package.json')\n\t\t\t\t\t\t\t\t\t.async('string')\n\t\t\t\t\t\t\t\t\t.then(JSON.parse)\n\t\t\t\t\t\t\t\t\t.then(pkg => {\n\t\t\t\t\t\t\t\t\t\tconst deps = {};\n\t\t\t\t\t\t\t\t\t\tbundle.imports.forEach(mod => {\n\t\t\t\t\t\t\t\t\t\t\tconst match = /^[^@\\/]+/.exec(mod);\n\t\t\t\t\t\t\t\t\t\t\tdeps[match[0]] = 'latest';\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tpkg.dependencies = deps;\n\n\t\t\t\t\t\t\t\t\t\tzip.file('package.json', JSON.stringify(pkg, null, '  '));\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.then(go);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgo();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tfindExample(id) {\n\t\t\t\tconst { example_contents } = this.get();\n\n\t\t\t\tid = decodeURIComponent(id);\n\n\t\t\t\tfor (let i = 0; i < example_contents.length; i += 1) {\n\t\t\t\t\tconst group = example_contents[i];\n\t\t\t\t\tfor (let j = 0; j < group.examples.length; j += 1) {\n\t\t\t\t\t\tconst example = group.examples[j];\n\t\t\t\t\t\tif (example.id === id) return example;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tpreload() {\n\t\t\treturn fetch(`/api/examples`).then(r => r.json()).then(example_contents => {\n\t\t\t\treturn { example_contents };\n\t\t\t});\n\t\t},\n\n\t\toncreate() {\n\t\t\tthis.uid = 0;\n\t\t\tthis.flipping = false;\n\t\t\tthis.bundlePromise = null;\n\n\t\t\tloadCodemirror().then(() => {\n\t\t\t\tthis.set({ loadedCodemirror: true });\n\t\t\t});\n\n\t\t\tlet exampleComponents;\n\t\t\tlet lastSelectedExample;\n\n\t\t\tconst { gist, components } = this.get();\n\t\t\tif (!gist && components.length === 0) {\n\t\t\t\tconst exampleMatch = /example=([^&]+)$/.exec(window.location.search);\n\t\t\t\tconst selectedExample = this.findExample(exampleMatch ? exampleMatch[1] : 'hello-world');\n\t\t\t\tthis.set({ selectedExample });\n\t\t\t}\n\n\t\t\tthis.observe('selectedExample', example => {\n\t\t\t\tif (!example) return;\n\t\t\t\tconst id = example.id;\n\n\t\t\t\tlastSelectedExample = id;\n\t\t\t\tfetch(`/api/examples/${id}`).then(r => r.json()).then(example => {\n\t\t\t\t\texampleComponents = stringifyComponents(example.components);\n\n\t\t\t\t\tif (window.svelte) {\n\t\t\t\t\t\texample.components.forEach(component => {\n\t\t\t\t\t\t\tcomponent.compiled = compile(component);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.set({\n\t\t\t\t\t\tcomponents: example.components,\n\t\t\t\t\t\tselectedComponent: example.components[0],\n\t\t\t\t\t\tjson: JSON.stringify(example.data, null, '  ')\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.updateBundle();\n\t\t\t\t});\n\n\t\t\t\tthis.set({ gist: null });\n\t\t\t\tthis.updateUrl();\n\t\t\t});\n\n\t\t\tif (!this.get('gist')) {\n\t\t\t\tthis.set({ json: JSON.stringify(this.get('data'), null, '  ') });\n\t\t\t}\n\n\t\t\tthis.observe('gist', gist => {\n\t\t\t\tif (!gist) return;\n\n\t\t\t\tif (this.promise) this.promise.cancel();\n\t\t\t\tthis.promise = getComponentFromGist(gist);\n\n\t\t\t\tthis.promise\n\t\t\t\t\t.then(({ components, json }) => {\n\t\t\t\t\t\tif (window.svelte) {\n\t\t\t\t\t\t\tcomponents.forEach(component => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tcomponent.compiled = compile(component);\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\tconsole.error(err.stack);\n\n\t\t\t\t\t\t\t\t\tthis.set({\n\t\t\t\t\t\t\t\t\t\tsourceError: err,\n\t\t\t\t\t\t\t\t\t\tsourceErrorLoc: err.loc\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.set({ components, json, selectedComponent: components[0] });\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\talert('Error loading from gist.github.com – please try again later!');\n\t\t\t\t\t\tconsole.error(err.stack);\n\t\t\t\t\t});\n\n\t\t\t\tthis.set({ selectedExample: null });\n\t\t\t\tthis.updateUrl();\n\t\t\t});\n\n\t\t\tloadSvelte().then(svelte => {\n\t\t\t\twindow.svelte = svelte;\n\n\t\t\t\tthis.set({ loadedSvelte: true });\n\n\t\t\t\tthis.get('components').forEach(component => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcomponent.compiled = compile(component);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.error(err.stack);\n\n\t\t\t\t\t\tthis.set({\n\t\t\t\t\t\t\tsourceError: err,\n\t\t\t\t\t\t\tsourceErrorLoc: err.loc\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.observe('selectedComponent', (selectedComponent, previousComponent) => {\n\t\t\t\t\tif (!selectedComponent) return;\n\t\t\t\t\tif (previousComponent && selectedComponent !== previousComponent) return;\n\n\t\t\t\t\t// if component has been edited, unset selectedExample\n\t\t\t\t\tif (stringifyComponents(this.get('components')) !== exampleComponents) {\n\t\t\t\t\t\tthis.set({ selectedExample: null });\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tselectedComponent.compiled = compile(selectedComponent);\n\t\t\t\t\t\tthis.set({ selectedComponent, sourceError: null, sourceErrorLoc: null });\n\n\t\t\t\t\t\tif (this.get('loadedRollup')) {\n\t\t\t\t\t\t\tthis.updateBundle();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.error(err.stack);\n\n\t\t\t\t\t\tthis.set({\n\t\t\t\t\t\t\tsourceError: err,\n\t\t\t\t\t\t\tsourceErrorLoc: err.loc\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.updateUrl();\n\t\t\t});\n\n\t\t\timport('rollup/dist/rollup.browser.js').then(rollup => {\n\t\t\t\tthis.set({ loadedRollup: true });\n\t\t\t\twindow.rollup = rollup;\n\n\t\t\t\tthis.updateBundle();\n\t\t\t});\n\n\t\t\tthis.observe('json', json => {\n\t\t\t\ttry {\n\t\t\t\t\tthis.set({\n\t\t\t\t\t\tdata: JSON.parse(json),\n\t\t\t\t\t\tdataError: null,\n\t\t\t\t\t\tdataErrorLoc: null\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err.stack);\n\n\t\t\t\t\tconst match = /in JSON at position (\\d+)/.exec(err.message);\n\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tconst loc = locate(json, +match[1], { offsetLine: 1 });\n\t\t\t\t\t\tthis.set({\n\t\t\t\t\t\t\tdataError: {\n\t\t\t\t\t\t\t\tmessage: err.message.slice(0, match.index).trim(),\n\t\t\t\t\t\t\t\tloc\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdataErrorLoc: loc\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tevents: {\n\t\t\tdrag(node, callback) {\n\t\t\t\tconst mousedown = event => {\n\t\t\t\t\tif (event.which !== 1) return;\n\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tthis.set({ dragging: true });\n\n\t\t\t\t\tconst onmouseup = () => {\n\t\t\t\t\t\tthis.set({ dragging: false });\n\n\t\t\t\t\t\twindow.removeEventListener('mousemove', callback, false);\n\t\t\t\t\t\twindow.removeEventListener('mouseup', onmouseup, false);\n\t\t\t\t\t};\n\n\t\t\t\t\twindow.addEventListener('mousemove', callback, false);\n\t\t\t\t\twindow.addEventListener('mouseup', onmouseup, false);\n\t\t\t\t}\n\n\t\t\t\tnode.addEventListener('mousedown', mousedown, false);\n\n\t\t\t\treturn {\n\t\t\t\t\tteardown() {\n\t\t\t\t\t\tnode.removeEventListener('mousedown', onmousedown, false);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\tcomponents: {\n\t\t\tLayout,\n\t\t\tCodeMirror,\n\t\t\tViewer,\n\t\t\tComponentSelector,\n\t\t\tExampleSelector\n\t\t}\n\t};\n\n\tfunction stringifyComponents(components) {\n\t\treturn JSON.stringify(\n\t\t\tcomponents.map(component => {\n\t\t\t\treturn {\n\t\t\t\t\tname: component.name,\n\t\t\t\t\tsource: component.source\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t}\n</script>\n",".repl-container[svelte-1505907988]{min-height:calc(100vh - 3em);background-color:#f4f4f4}@keyframes svelte-1505907988-pulse{0%{opacity:1;transform:scale(1.5)}50%{opacity:0;transform:scale(1)}100%{opacity:1;transform:scale(1.5)}}@-webkit-keyframes pulse {}@keyframes svelte-1505907988-fade-in{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fade-in {}.left[svelte-1505907988],.right[svelte-1505907988]{position:relative}@media(max-width: 767px){.left[svelte-1505907988],.right[svelte-1505907988]{width:100% !important}.top[svelte-1505907988],.bottom[svelte-1505907988]{height:auto !important}}.divider[svelte-1505907988]{position:absolute;z-index:10;display:none}h2[svelte-1505907988]{margin:1em 0 0 0;padding:0 8px;font-weight:500;font-size:1.2em}.editor-wrapper[svelte-1505907988]{z-index:5;transform-style:preserve-3d;animation-fill-mode:forwards}.repl-container[svelte-1505907988] .editor-toggle[svelte-1505907988]{position:absolute;bottom:1em;right:1em;z-index:10;background:white url(/icons/flip.svg) no-repeat calc(100% - 0.7em) 50%;background-size:1.4em 1em;padding-right:2.5em}.flip-text[svelte-1505907988]{}.editor-toggle[svelte-1505907988]:hover .flip-text[svelte-1505907988]{}.flip-out[svelte-1505907988]{animation-name:svelte-1505907988-flip-out;animation-duration:0.2s;animation-timing-function:ease-in}.flip-pause[svelte-1505907988]{opacity:0}.flip-in[svelte-1505907988]{animation-name:svelte-1505907988-flip-in;animation-duration:0.2s;animation-timing-function:ease-out}@keyframes svelte-1505907988-flip-out{from{transform:rotateY(0deg)}to{transform:rotateY(90deg)}}@keyframes svelte-1505907988-flip-in{from{transform:rotateY(-90deg)}to{transform:rotateY(0deg)}}@media(min-width: 768px){.show-if-mobile[svelte-1505907988]{display:none}.repl-container[svelte-1505907988]{min-height:auto;height:calc(100vh - 4em);background-color:white;overflow:hidden}.screen-too-small[svelte-1505907988]{display:none}.left[svelte-1505907988],.right[svelte-1505907988],.divider[svelte-1505907988]{display:block}.left[svelte-1505907988],.right[svelte-1505907988]{height:100%;float:left}.top[svelte-1505907988],.bottom[svelte-1505907988]{position:absolute;width:100%}.top[svelte-1505907988]{top:0}.bottom[svelte-1505907988]{bottom:0}.left[svelte-1505907988] .editor-wrapper[svelte-1505907988]{padding-right:8px;height:auto;height:100%}section[svelte-1505907988]{height:100%}}.divider[svelte-1505907988]::after{content:'';position:absolute;background-color:#eee}.vertical-divider[svelte-1505907988]{padding:0 8px;width:0;height:100%;cursor:ew-resize}.vertical-divider[svelte-1505907988]::after{left:8px;top:0;width:1px;height:100%}.horizontal-divider[svelte-1505907988]{padding:8px 0;width:100%;height:0;cursor:ns-resize}.horizontal-divider[svelte-1505907988]::after{top:8px;left:0;width:100%;height:1px}.loading[svelte-1505907988]{text-align:center;color:#999;font-weight:300;margin:2em 0 0 0}.input[svelte-1505907988]{padding:5.4em 0 0 0;perspective:1500px;perspective-origin:50% 0%}@media(min-width: 768px){.input[svelte-1505907988]{perspective-origin:50% 50%}}.app-controls[svelte-1505907988],.module-controls[svelte-1505907988]{position:absolute;left:0;width:100%}.app-controls[svelte-1505907988]{top:0;border-bottom:1px solid #eee;background-color:#f4f4f4;padding:0.5em;height:3em}.module-controls[svelte-1505907988]{top:3em;border-bottom:1px solid #eee;height:2.4em}.repl-container[svelte-1505907988] button{font-family:Rajdhani, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:inherit;background-color:white;cursor:pointer;outline:none;line-height:1;border:none}.repl-container[svelte-1505907988] .btn{display:block;float:right;padding:calc(0.5em - 1px) 1em;margin:0 0 0 0.5em;border-radius:2px;color:rgb(170,30,30);border:1px solid rgba(170,30,30,0.3);font-weight:500;box-sizing:border-box}.repl-container[svelte-1505907988] .btn:hover{border:1px solid rgb(170,30,30)}.repl-container[svelte-1505907988] .btn.active{background-color:rgb(170,30,30);color:white}.gist-link[svelte-1505907988]{float:right;line-height:2;font-family:Rajdhani;font-weight:400;padding:0 0.1em;display:none}@media(min-width: 768px){.gist-link[svelte-1505907988]{display:block}}.mousecatcher[svelte-1505907988]{position:absolute;left:0;top:0;width:100%;height:100%;background:rgba(255,255,255,0.01)}.repl-container[svelte-1505907988] .message{position:relative;border-radius:0.2em;margin:0;padding:0.5em 0.5em 0.5em 2.5em;color:white}.repl-container[svelte-1505907988] .message::before{content:'!';position:absolute;left:0.7em;top:0.55em;font-size:0.8em;font-weight:800;width:1em;height:1em;text-align:center;line-height:1;padding:0.2em 0.15em 0.1em 0.15em;border-radius:50%;color:white;border:2px solid white}.repl-container[svelte-1505907988] .error.message{background-color:rgb(170,30,30)}.repl-container[svelte-1505907988] .warning.message{background-color:rgb(160,100,30)}.repl-container[svelte-1505907988] .info.message{background-color:#666}.repl-container[svelte-1505907988] .error .filename{cursor:pointer}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/"],"sourceRoot":""}]);

// exports


/***/ })
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,