export function getComponentFromGist(id) {
	let cancelled = false;

	const promise = fetch(`https://api.github.com/gists/${id}`)
		.catch(() => fetch(`/api/gists/${id}`))
		.then(r => r.json())
		.then(gist => {
			if (cancelled) throw new Error(`Request was cancelled`);

			const components = [];

			const componentFiles = Object.keys(gist.files).filter(file =>
				/\.(html|js)$/.test(file)
			);

			if (
				componentFiles.length === 1 &&
				componentFiles[0] === 'component.html'
			) {
				// legacy
				components.push({
					name: 'App',
					type: 'html',
					entry: true,
					source: gist.files['component.html'].content
				});
			} else {
				componentFiles.forEach(file => {
					const ext = /\.(html|js)$/.exec(file)[0];
					const name = file.slice(0, -ext.length);
					const type = ext.slice(1);

					const source = gist.files[file].content;

					components.push({ name, type, entry: name === 'App', source });
				});
			}

			const jsonFile = gist.files['data.json'];
			const json = (jsonFile && jsonFile.content) || '{}';

			return { components, json };
		});

	promise.cancel = () => {
		cancelled = true;
	};

	return promise;
}

export function saveComponentAsGist(components, json) {
	const files = {
		'README.md': {
			content: `# Svelte component\n\nThis gist was generated by the [Svelte REPL](https://svelte.technology/repl). Visit https://svelte.technology/repl?gist=this_gist_id to see it.`
		},

		'data.json': {
			content: json
		}
	};

	components.forEach(component => {
		files[`${component.name}.${component.type}`] = {
			content: component.source
		};
	});

	const body = JSON.stringify({
		description: 'Svelte component',
		public: true,
		files
	});

	return fetch(`https://api.github.com/gists`, { method: 'POST', body })
		.catch(() => fetch(`/api/gists`, { method: 'POST', body }))
		.then(r => r.json())
		.then(gist => gist.id);
}
